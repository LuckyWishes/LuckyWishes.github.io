{
    "version": "https://jsonfeed.org/version/1",
    "title": "XGG",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/04/28/B001_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "url": "http://example.com/2023/04/28/B001_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
            "title": "",
            "date_published": "2023-04-28T07:07:43.739Z",
            "content_html": "<hr>\n<p>title: 数据结构<br>\n categories: § 基础知识 §<br>\ndate: 2020/02/21 06:39:44<br>\ntags: 数据结构<br>\n categories: 数据结构基础<br>\n comments: true</p>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h2 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\">#</a> 数据结构</h2>\n<p>[TOC]</p>\n<h5 id=\"1绪论\"><a class=\"markdownIt-Anchor\" href=\"#1绪论\">#</a> 1. 绪论</h5>\n<h6 id=\"1绪论数据结构介绍\"><a class=\"markdownIt-Anchor\" href=\"#1绪论数据结构介绍\">#</a> 1. 绪论–数据结构介绍</h6>\n<ol>\n<li>数据结构学习内容表述\n<ol>\n<li>如何使用程序代码把现实世界的问题信息化</li>\n<li>如何使用计算机高效的处理这些信息从而创造价值</li>\n</ol>\n</li>\n<li>发展阶段：人类文明–&gt; 农业革命–&gt; 工业革命–&gt; 信息革命</li>\n<li>关于计算机联系图解</li>\n</ol>\n<p>![image-20220621090912904](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621090912904.png)</p>\n<h6 id=\"2绪论概念理解\"><a class=\"markdownIt-Anchor\" href=\"#2绪论概念理解\">#</a> 2. 绪论–概念理解</h6>\n<ol>\n<li>\n<p>数据结构基本概念</p>\n<ol>\n<li>\n<p>数据：数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料</p>\n</li>\n<li>\n<p>数据元素：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理</p>\n</li>\n<li>\n<p>数据项：一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位</p>\n</li>\n<li>\n<p>数据对象：数据对象是具有相同性质的数据元素的集合，是数据的一个子集（数据元素描述的东西具有相同的性质）</p>\n</li>\n<li>\n<p>数据结构：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。(数据元素之间的关系)</p>\n</li>\n<li>\n<p>数据类型：数据类型是一个值的集合和定义在此集合上的一组操作的总称。如原子类型，其值不可再分的数据类型；结构类型，其值可以再分解为若干成分（分量）的数据类型</p>\n<p>![image-20220621095124394](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621095124394.png)</p>\n</li>\n<li>\n<p>抽象数据类型 (Abstract Data Type,ADT)：抽象数据组织及与之相关的操作。ADT 用数学化的语言定义数据的逻辑结构、定义运算。<strong>抽象数据类型定义了一个数据结构</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>数据结构的三要素</p>\n<ol>\n<li>逻辑结构\n<ol>\n<li>集合结构：各个元素同属一个集合，别无其他关系</li>\n<li>线性结构：数据元素之间是一对一的关系。除了第一个元素，所有元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继</li>\n<li>树形结构：数据元素之间是一对多的关系</li>\n<li>图状结构 (网状结构)：数据元素之间是多对多的关系</li>\n</ol>\n</li>\n<li>数据运算：针对于某种逻辑结构，结合实际需求，定义基本运算</li>\n<li>物理结构 (存储结构)：使用计算机表示数据元素之间的逻辑关系\n<ol>\n<li>顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</li>\n<li>链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系</li>\n<li>索引存储：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址）</li>\n<li>散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储</li>\n<li>非顺序存储 (离散存储)：链式存储、索引存储、散列存储</li>\n<li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个数据元素在物理上可以是离散的。数据的存储结构会影响存储空间分配的方便程度，也会影响对数据运算的速度</li>\n</ol>\n</li>\n<li>定义一种数据结构包括逻辑结构、数据运算，如何使用计算机实现这种数据结构主要讲的是物理结构</li>\n<li>运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤</li>\n</ol>\n</li>\n<li>\n<p>算法：对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作</p>\n<ol>\n<li>程序 = 数据结构 + 算法</li>\n<li>算法的特性\n<ol>\n<li>有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。算法必须是有穷的，而程序可以是无穷的（<strong>死循环不是算法</strong>）</li>\n<li>确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出</li>\n<li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现</li>\n<li>输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合</li>\n<li>输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量</li>\n</ol>\n</li>\n<li>算法的衡量角度\n<ol>\n<li>正确性。算法应能够正确地解决求解问题</li>\n<li>可读性。算法应具有良好的可读性，以帮助人们理解</li>\n<li>健壮性。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果</li>\n<li>高效率与低存储量需求。省时：时间复杂度低；省内存：空间复杂度低</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>算法的时间复杂度：事前预估算法时间开销 T (n) 与问题规模 n 的关系</p>\n<ol>\n<li>最坏时间复杂度：最坏情况下算法的时间复杂度</li>\n<li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li>\n<li>最好时间复杂度：最好情况下算法的时间复杂度</li>\n<li>计算方法：寻找一个基本操作 (最深层循环)，并计算执行次数</li>\n<li><strong>O(1)&lt;O(log<sub>2</sub>n)&lt;O(n)&lt;O(nlog<sub>2</sub>n)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</strong></li>\n</ol>\n</li>\n<li>\n<p>算法的空间复杂度：空间开销（内存开销）与问题规模 n 之间的关系</p>\n<ol>\n<li>判断口诀：常对幂指阶</li>\n<li><strong>O(1)&lt;O(log<sub>2</sub>n)&lt;O(n)&lt;O(nlog<sub>2</sub>n)&lt;O(n<sup>2</sup>)&lt;O(n<sup>3</sup>)&lt;O(2<sup>n</sup>)&lt;O(n!)&lt;O(n<sup>n</sup>)</strong></li>\n</ol>\n</li>\n</ol>\n<h5 id=\"2线性表\"><a class=\"markdownIt-Anchor\" href=\"#2线性表\">#</a> 2. 线性表</h5>\n<h6 id=\"1线性表\"><a class=\"markdownIt-Anchor\" href=\"#1线性表\">#</a> 1. 线性表</h6>\n<ol>\n<li>\n<p>定义 (逻辑结构)</p>\n<ol>\n<li>线性表是具有<strong>相同数据类型</strong>的 n（n≥0）个<strong>数据元素</strong>的<strong>有限序列</strong>，其中 n 为表长，当 n= 0 时线性表是一个空表</li>\n<li>**a<sub>i</sub>** 是线性表中的 <code>第i个</code> 元素线性表中的位序 (位序从 1 开始的，数组下标从 0 开始的)</li>\n<li>a1 是表头元素；**a<sub>n</sub>** 是表尾元素。除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继</li>\n</ol>\n</li>\n<li>\n<p>基本操作 (运算)</p>\n<ol>\n<li>InitList (&amp;L)：初始化表。构造一个空的线性表 L，分配内存空间</li>\n<li>DestroyList (&amp;L)：销毁操作。销毁线性表，并释放线性表 L 所占用的内存空间</li>\n<li>ListInsert (&amp;L,i,e)：插入操作。在表 L 中的第 i 个位置上插入指定元素 e</li>\n<li>ListDelete (&amp;L,i,&amp;e)：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值</li>\n<li>LocateElem (L,e)：按值查找操作。在表 L 中查找具有给定关键字值的元素</li>\n<li>GetElem (L,i)：按位查找操作。获取表 L 中第 i 个位置的元素的值</li>\n<li>Length (L)：求表长。返回线性表 L 的长度，即 L 中数据元素的个数</li>\n<li>PrintList (L)：输出操作。按前后顺序输出线性表 L 的所有元素值</li>\n<li>Empty (L)：判空操作。若 L 为空表，则返回 true，否则返回 false</li>\n<li><code>&amp;</code> : 引用数据类型，对参数的修改结果需要 &quot;带回来&quot;，内存地址复制还是指向原地址</li>\n<li>线性表在存储结构上分为顺序表、链表</li>\n</ol>\n<p>![image-20220622150006188](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622150006188.png)</p>\n</li>\n</ol>\n<h6 id=\"2顺序表\"><a class=\"markdownIt-Anchor\" href=\"#2顺序表\">#</a> 2. 顺序表</h6>\n<ol>\n<li>\n<p>定义</p>\n<ol>\n<li>顺序存储，把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</li>\n<li>使用 <code>sizeof()</code>  可以获取数据元素占用内存的大小</li>\n<li>静态分配（表长不可调）\n<ol>\n<li>内存中会遗留 <code>脏数据</code> ，需要设置数据的默认值即 <code>L.length = 0</code></li>\n<li>若数组存满数据，直接舍弃，因为顺序表的表长确定后无法修改（存储空间是静态的）</li>\n</ol>\n</li>\n<li>动态分配\n<ol>\n<li><code>malloc函数</code> ：动态申请内存空间</li>\n<li><code>free函数</code> ：动态释放内存空间</li>\n<li>练习：手写 malloc、free 这两个函数   <code>L.data=(ElemType*)malloc(sizeof(ElemType)* InitSize);</code></li>\n</ol>\n</li>\n<li>特点\n<ol>\n<li>随机访问，即可以在 O (1) 时间内找到第 i 个元素</li>\n<li>存储密度高，每个节点只存储数据元素</li>\n<li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的<strong>时间复杂度也比较高</strong>）</li>\n<li>插入、删除操作不方便，需要移动大量元素</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>插入</p>\n<ol>\n<li>代码实现</li>\n<li>时间复杂度\n<ol>\n<li>最好：O (1)</li>\n<li>最坏：O (n)</li>\n<li>平均：O (n)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>删除</p>\n<ol>\n<li>代码实现</li>\n<li>时间复杂度\n<ol>\n<li>最好：O (1)</li>\n<li>最坏：O (n)</li>\n<li>平均：O (n)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>查找</p>\n<ol>\n<li>按位查找\n<ol>\n<li>代码实现</li>\n<li>时间复杂度：O (1)</li>\n</ol>\n</li>\n<li>按值查找\n<ol>\n<li>代码实现</li>\n<li>时间复杂度\n<ol>\n<li>最好：O (1)</li>\n<li>最坏：O (n)</li>\n<li>平均：O (n)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>差异</p>\n<p>![image-20220622155805426](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622155805426.png)</p>\n</li>\n</ol>\n<h6 id=\"3单链表\"><a class=\"markdownIt-Anchor\" href=\"#3单链表\">#</a> 3. 单链表</h6>\n<ol>\n<li>定义\n<ol>\n<li>单链表：</li>\n<li>代码实现</li>\n<li>两种实现方式\n<ol>\n<li>带头结点 (代码实现方便)：头指针指向的元素为 null，下一个元素存储数据     <code>L-&gt;next==null</code></li>\n<li>不带头结点 (代码实现不方便)：头指针指向的元素就存储数据     <code>L==null</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>插入\n<ol>\n<li>按位序插入\n<ol>\n<li>带头结点</li>\n<li>不带头结点</li>\n</ol>\n</li>\n<li>指定结点的后插操作</li>\n<li>指定结点的前插操作</li>\n</ol>\n</li>\n<li>删除\n<ol>\n<li>按位序删除</li>\n<li>指点结点的删除</li>\n</ol>\n</li>\n<li>查找（三个时间复杂度都是 <code>O(n)</code> ）\n<ol>\n<li>按位查找\n<ol>\n<li>单链表不具备随机访问的特性，只能依次扫描</li>\n</ol>\n</li>\n<li>按值查找</li>\n<li>求单链表长度</li>\n</ol>\n</li>\n<li>建立（设置一个指向表尾的指针）：核心是初始化操作、指定结点的后插操作\n<ol>\n<li>尾插法：</li>\n<li>头插法：重要应用：链表的逆置</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"4双链表\"><a class=\"markdownIt-Anchor\" href=\"#4双链表\">#</a> 4. 双链表</h6>\n<ol>\n<li>单链表无法逆向检索，双链表可进可退，存储密度较低一些</li>\n<li>初始化</li>\n<li>插入</li>\n<li>删除</li>\n<li>遍历：双链表不可随机存取，按位查找、按值查找操作都只能用遍历的方式实现。时间复杂度 O (n)</li>\n<li>空表：前后指针都指向 null</li>\n</ol>\n<h6 id=\"5循环链表\"><a class=\"markdownIt-Anchor\" href=\"#5循环链表\">#</a> 5. 循环链表</h6>\n<ol>\n<li>循环单链表\n<ol>\n<li>单链表：表尾结点的 next 指针指向 NULL。单链表：从一个结点出发只能找到后续的各个结点</li>\n<li>循环单链表：表尾结点的 next 指针指向头结点。循环单链表：从一个结点出发可以找到其他任何一个结点</li>\n<li>从头结点找到尾部，时间复杂度为 O (n)。从尾部找到头部，时间复杂度为 O (1)</li>\n<li>空表：单手抱住空虚的自己；非空链表：</li>\n</ol>\n</li>\n<li>循环双链表\n<ol>\n<li>双链表：表头结点的 prior 指向 NULL；表尾结点的 next 指向 NULL</li>\n<li>循环双链表：表头结点的 prior 指向表尾结点；表尾结点的 next 指向头结点</li>\n<li>空表：双手抱住空虚的自己；非空链表：</li>\n</ol>\n</li>\n<li>代码问题：如何判断空表？如何判断指定结点是否为表尾结点 / 表头节点？如何在表头、表中、表尾插入 / 删除一个结点</li>\n</ol>\n<h6 id=\"6静态链表\"><a class=\"markdownIt-Anchor\" href=\"#6静态链表\">#</a> 6. 静态链表</h6>\n<ol>\n<li>静态链表\n<ol>\n<li>分配一整片连续的内存空间，各个结点集中安置</li>\n<li>静态链表也可看作用数组的方式实现的链表</li>\n<li>在静态链表中游标充当指针，游标为 - 1 时就是到达表尾</li>\n<li>优点：增、删操作不需要大量移动元素</li>\n<li>缺点：不能随机存取，只能从头结点开始依次往后查找；<strong>容量固定不可变</strong></li>\n<li>适用场景：①不支持指针的低级语言；②数据元素数量固定不变的场景（如操作系统的文件分配表 FAT）</li>\n</ol>\n</li>\n<li>定义静态链表</li>\n<li>基本操作的实现</li>\n</ol>\n<h6 id=\"7顺序表和链表比较\"><a class=\"markdownIt-Anchor\" href=\"#7顺序表和链表比较\">#</a> 7. 顺序表和链表比较</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">顺序表</th>\n<th style=\"text-align:center\">链表</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">逻辑结构</td>\n<td style=\"text-align:center\">都属于线性表，都是线性结构</td>\n<td style=\"text-align:center\">都属于线性表，都是线性结构</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储结构 / 物理结构</td>\n<td style=\"text-align:center\">优点：支持随机存取、存储密度高 <br/>缺点：大片连续空间分配不方便，改变容量不方便</td>\n<td style=\"text-align:center\">优点：离散的小空间分配方便，改变容量方便<br/>缺点：不可随机存取，存储密度低</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数据运算 / 基本操作</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">创建</td>\n<td style=\"text-align:center\">需要预分配大片连续空间。若分配空间过小，则之后不方便拓展容量；若分配空间过大，则浪费内存资源</td>\n<td style=\"text-align:center\">只需分配一个头结点（也可以不要头结点，只声明一个头指针），之后方便拓展</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增</td>\n<td style=\"text-align:center\">插入 / 删除元素要将后续元素都后移 / 前移时间复杂度 O (n)<br/>时间开销主要来自移动元素</td>\n<td style=\"text-align:center\">插入 / 删除元素只需修改指针即可<br/>时间复杂度 O (n), 时间开销主要来自查找目标元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">删</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">弹性</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">增、删</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技巧</td>\n<td style=\"text-align:center\">表长可预估、查询（搜索）操作较多</td>\n<td style=\"text-align:center\">表长难以预估、经常要增加 / 删除元素</td>\n</tr>\n</tbody>\n</table>\n<!-- #### 3.栈和队列\n\n#### 4.串\n\n#### 5.树和二叉树\n\n#### 6.图\n\n#### 7.查找\n\n#### 8.排序 -->\n",
            "tags": []
        },
        {
            "id": "http://example.com/2023/02/16/E001_Linux/",
            "url": "http://example.com/2023/02/16/E001_Linux/",
            "title": "Linux",
            "date_published": "2023-02-16T10:23:20.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"linux常用命令\"><a class=\"markdownIt-Anchor\" href=\"#linux常用命令\">#</a> Linux 常用命令</h5>\n<ul>\n<li>ls：列出当前目录下的文件和目录</li>\n<li>cd：切换目录</li>\n<li>clear：清除终端内容</li>\n<li>pwd：显示当前所在的目录的完整路径</li>\n<li>mkdir：新建一个目录</li>\n<li>touch：新建一个空文件</li>\n<li>cat：输出文件的内容到控制台</li>\n<li>cp：复制文件或目录</li>\n<li>mv：移动文件或目录</li>\n<li>rm：删除文件或目录</li>\n<li>tar：打包或解压缩文件</li>\n<li>ps：查看当前正在运行的进程</li>\n<li>top：实时查看系统资源占用情况</li>\n<li>grep：在文件中查找匹配的字符串</li>\n<li>find：查找文件</li>\n<li>wget：下载文件</li>\n</ul>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/",
            "url": "http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/",
            "title": "JavaScript执行上下文",
            "date_published": "2022-06-23T14:12:56.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h4 id=\"1-概念\"><a class=\"markdownIt-Anchor\" href=\"#1-概念\">#</a> 1. 概念</h4>\n<ol>\n<li>在函数执行的时，会创建一个内部对象，即称为执行上下文，同时定义了一个函数执行时的环境</li>\n<li>在一个函数被调用的时，会创建一个活动记录，被称为执行上下文，在这个里面会包含函数调用栈、函数调用方式、传入参数等信息</li>\n<li>每一个函数在被定义的时，会存在一个 <code>[scope]</code>  属性，该属性保存着作用域链</li>\n</ol>\n<h4 id=\"2-类型\"><a class=\"markdownIt-Anchor\" href=\"#2-类型\">#</a> 2. 类型</h4>\n<ol>\n<li>\n<h5 id=\"全局执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#全局执行上下文\">#</a> 全局执行上下文</h5>\n<ol>\n<li>\n<p>只有一个，浏览器的全局对象就是 window 对象，this 指向这个全局对象，在执行全局代码前将 window 确定为全局执行上下文</p>\n</li>\n<li>\n<p>对其全局数据进行处理</p>\n</li>\n<li>\n<p>开始执行全局代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//例子</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a1)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a2)<br><span class=\"hljs-title function_\">a2</span>()<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>)<br><span class=\"hljs-keyword\">var</span> a1 = <span class=\"hljs-number\">2</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a2</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a2&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<h5 id=\"函数执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#函数执行上下文\">#</a> 函数执行上下文</h5>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//例子</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\">a1</span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a1)<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a2)<br>  <span class=\"hljs-title function_\">a3</span>()<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>)<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">arguments</span>)<br>  <span class=\"hljs-keyword\">var</span> a2 = <span class=\"hljs-number\">3</span><br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a3</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;a3&quot;</span>)<br>  &#125;<br>&#125;<br><span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n<ol>\n<li>只有函数被调用时创建，每次调用都会创建一个新的对应的函数执行上下文对象</li>\n<li>对局部数据进行预处理</li>\n<li>开始执行函数体代码</li>\n</ol>\n</li>\n<li>\n<h5 id=\"eval函数执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#eval函数执行上下文\">#</a>  <code>Eval函数</code> 执行上下文</h5>\n<ol>\n<li>运行在该函数中的代码</li>\n</ol>\n</li>\n</ol>\n<p>概念：EC : 执行上下文、ECS : 执行上下文栈、VO ： 变量对象、AO ： 活动对象、scope chain : 作用域链</p>\n<p><code>VO变量对象</code> ：创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中</p>\n<p><code>AO活动对象</code> ：进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活</p>\n<h3 id=\"2-执行上下文的具体过程\"><a class=\"markdownIt-Anchor\" href=\"#2-执行上下文的具体过程\">#</a> 2. 执行上下文的具体过程</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">i</span>) &#123;  <br>  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;  <br>  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">privateB</span>(<span class=\"hljs-params\"></span>) &#123;&#125;;  <br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-params\"></span>) &#123;&#125;  <br>&#125;  <br><span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">22</span>);<br></code></pre></td></tr></table></figure>\n<h4 id=\"1-创建阶段函数被调用但是还未执行函数中的代码\"><a class=\"markdownIt-Anchor\" href=\"#1-创建阶段函数被调用但是还未执行函数中的代码\">#</a> 1. 创建阶段（函数被调用，但是还未执行函数中的代码）</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//创建时函数体中相关代码（代码1）</span><br>fooExecutionContext = &#123;  <br>  <span class=\"hljs-attr\">variableObject</span>: &#123;  <br>  <span class=\"hljs-attr\">arguments</span>: &#123;  <br>      <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">22</span>,  <br>      <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">1</span>  <br>    &#125;,  <br>    <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">22</span>,  <br>    <span class=\"hljs-attr\">c</span>: pointer to <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-params\"></span>),  <br>  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-literal\">undefined</span>,  <br>  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-literal\">undefined</span>  <br>\t&#125;,  <br>  <span class=\"hljs-attr\">scopeChain</span>: &#123; ... &#125;,  <br>    <span class=\"hljs-attr\">this</span>: &#123; ... &#125;  <br>&#125; <br></code></pre></td></tr></table></figure>\n<ol>\n<li>创建变量对象 (VO)\n<ol>\n<li>创建 arguments，检查当前上下文的参数，建立该对象下的属性和属性值</li>\n<li>扫描上下文的函数申明\n<ol>\n<li>每扫描到一个函数，就会在 VO 里面用函数名创建一个属性，为一个指针，指向该函数在内存中的地址</li>\n<li>如果函数名在 VO 中已经存在，对应的属性值会被新的引用覆盖</li>\n<li>即为 var（undefined）定义的全局变量为 window 属性、function（fun）声明全局函数为 window 方法、this 赋值为 widow</li>\n</ol>\n</li>\n<li>扫描上下文的变量申明：\n<ol>\n<li>每扫描到一个变量就会用变量名作为属性名，其值初始化为 undefined</li>\n<li>如果该变量名在 VO 中已经存在，则直接跳过继续扫描</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>初始化作用域链</li>\n<li>确定上下文中 this 的指向</li>\n</ol>\n<h4 id=\"2-代码执行阶段\"><a class=\"markdownIt-Anchor\" href=\"#2-代码执行阶段\">#</a> 2. 代码执行阶段</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//执行时函数体中相关代码（代码2）</span><br>fooExecutionContext = &#123;  <br>  <span class=\"hljs-attr\">variableObject</span>: &#123;  <br>    <span class=\"hljs-attr\">arguments</span>: &#123;  <br>      <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">22</span>,  <br>      <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">1</span>  <br>    &#125;,  <br>    <span class=\"hljs-attr\">i</span>: <span class=\"hljs-number\">22</span>,  <br>    <span class=\"hljs-attr\">c</span>: pointer to <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-params\"></span>),  <br>  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">&#x27;hello&#x27;</span>,  <br>  <span class=\"hljs-attr\">b</span>: pointer to <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">privateB</span>(<span class=\"hljs-params\"></span>)  <br>\t&#125;,  <br>  <span class=\"hljs-attr\">scopeChain</span>: &#123; ... &#125;,  <br>    <span class=\"hljs-attr\">this</span>: &#123; ... &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>执行函数体中的代码，给 VO 中的变量赋值</li>\n</ol>\n<h3 id=\"3-执行上下文栈execution-context-stack\"><a class=\"markdownIt-Anchor\" href=\"#3-执行上下文栈execution-context-stack\">#</a> 3. 执行上下文栈 <code>Execution context stack</code></h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//知识小练</span><br><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span><br><span class=\"hljs-keyword\">var</span> bar = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>)&#123;<br>  <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-title function_\">foo</span>(x + b)<br>&#125;<br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">y</span>)&#123;<br>  <span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-title function_\">foo1</span>(a + c + y)<br>&#125;<br><span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-number\">10</span>) <br><br></code></pre></td></tr></table></figure>\n<h4 id=\"1-执行栈调用栈\"><a class=\"markdownIt-Anchor\" href=\"#1-执行栈调用栈\">#</a> 1. 执行栈（调用栈）</h4>\n<ol>\n<li>具有 LIFO 结构（后进先出），用于存储在代码执行期间创建的上下文（函数的执行顺序和定义顺序没有关系，可以通过执行栈理解）</li>\n<li></li>\n</ol>\n<h4 id=\"2-原理\"><a class=\"markdownIt-Anchor\" href=\"#2-原理\">#</a> 2. 原理</h4>\n<ol>\n<li>每当执行 js 代码时，创建一个全局执行上下文并且 push 当前的执行上下文栈顶，此后每发生一次函数调用，搜索引擎会创建一个新的函数执行上下文，并且将其 push 当前执行栈的栈顶，当栈顶的函数执行完毕，执行栈中对应的执行上下文就会 pop，同时变量对象 <code>VO</code>  也会销毁，栈指针将会指向下一个执行上下文，直至应用关闭时将会销毁全局上下文</li>\n</ol>\n<p><img src=\"https://img-blog.csdnimg.cn/2020061514072717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2piajY1Njg4Mzl6,size_16,color_FFFFFF,t_70#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//课前小练</span><br><span class=\"hljs-comment\">//问题一</span><br><span class=\"hljs-keyword\">var</span> scope = <span class=\"hljs-string\">&quot;global scope&quot;</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkscope</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> scope = <span class=\"hljs-string\">&quot;local scope&quot;</span>;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> scope;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">f</span>();<br>&#125;<br><span class=\"hljs-title function_\">checkscope</span>();<br><br><span class=\"hljs-comment\">//问题二</span><br><span class=\"hljs-keyword\">var</span> scope = <span class=\"hljs-string\">&quot;global scope&quot;</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkscope</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">var</span> scope = <span class=\"hljs-string\">&quot;local scope&quot;</span>;<br>    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\"></span>)&#123;<br>        <span class=\"hljs-keyword\">return</span> scope;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> f;<br>&#125;<br><span class=\"hljs-title function_\">checkscope</span>()();<br><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//经典面试题1</span><br>问题<span class=\"hljs-number\">1</span>：依次输出？<br>问题<span class=\"hljs-number\">2</span>：一共产生多少执行山下文对象？<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;gb:&#x27;</span>+i)<br><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span><br><span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">i</span>)&#123;<br>  <span class=\"hljs-keyword\">if</span>(i == <span class=\"hljs-number\">4</span>)&#123;<br>    <span class=\"hljs-keyword\">return</span><br>  &#125;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;fb:&#x27;</span>+i)<br>  <span class=\"hljs-title function_\">foo</span>(i + <span class=\"hljs-number\">1</span>)<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;fe:&#x27;</span>+i)<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;ge:&#x27;</span>+i)<br><br>输出：<br><span class=\"hljs-literal\">undefined</span><br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/",
            "url": "http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/",
            "title": "原型 原型链 继承",
            "date_published": "2022-06-19T14:12:03.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"prototype\"><a class=\"markdownIt-Anchor\" href=\"#prototype\">#</a> prototype</h3>\n<blockquote>\n<p><strong>原型的概念</strong></p>\n<p>每一个 JavaScript 对象 (除了 <code>null</code>  外) 创建的时候，就会与之关联另一个对象，这个<strong>对象</strong>就是我们所说的<strong>原型</strong>，每一个对象都会从原型中 &quot;继承&quot; 属性。</p>\n</blockquote>\n<p>在 JavaScript 中，<strong>每个函数</strong>都有一个 <code>prototype</code>  属性，该属性指向函数的原型对象。</p>\n<h3 id=\"__-proto-__\"><a class=\"markdownIt-Anchor\" href=\"#__-proto-__\">#</a> __ proto __</h3>\n<p><strong>每个对象</strong> (除了 <code>null</code>  外) 都会有的属性，叫做 <code>__proto__</code> ，这个属性会指向该对象的原型。</p>\n<blockquote>\n<p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于  <code>Person.prototype</code>  中，实际上，它是来自于  <code>Object.prototype</code>  ，与其说是一个属性，不如说是一个  <code>getter/setter</code> ，当使用  <code>obj.__proto__</code>  时，可以理解成返回了  <code>Object.getPrototypeOf(obj)</code></p>\n</blockquote>\n<h3 id=\"constructor\"><a class=\"markdownIt-Anchor\" href=\"#constructor\">#</a> constructor</h3>\n<p>每个原型都有一个 <code>constructor</code> ，指向该关联的构造函数</p>\n<blockquote>\n<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性，当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取</p>\n</blockquote>\n<h3 id=\"实例与原型\"><a class=\"markdownIt-Anchor\" href=\"#实例与原型\">#</a> 实例与原型</h3>\n<p>当读取实例的属性时，如果找不到，就通过隐式原型 ( <code>__proto__</code> ) 向上查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层，若最顶层也找不到，则返回 undefined。</p>\n<h3 id=\"原型的原型\"><a class=\"markdownIt-Anchor\" href=\"#原型的原型\">#</a> 原型的原型</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它</span><br><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>();<br>obj.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;Kevin&#x27;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">name</span>);<br></code></pre></td></tr></table></figure>\n<p>原型对象就是通过 Object 构造函数生成的。又因为实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code>  所以得到总的关系图：</p>\n<p><img src=\"%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708152327825-11086376.png\" alt=\"img\"></p>\n<h3 id=\"原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型链\">#</a> 原型链</h3>\n<blockquote>\n<p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t—— 摘自《javascript 高级程序设计》</p>\n</blockquote>\n<p>最后，由于 Object 的原型对象是 null，所以得出最终的图</p>\n<p><img src=\"%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708153139577-2105652554.png\" alt=\"img\"></p>\n<p><img src=\"%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/1691fc878b9beefa~tplv-t2oaga2asx-watermark.awebp\" alt=\"img\"></p>\n<h3 id=\"继承\"><a class=\"markdownIt-Anchor\" href=\"#继承\">#</a> 继承</h3>\n<h5 id=\"原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#原型链继承\">#</a> 原型链继承</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>) &#123;<span class=\"hljs-number\">0</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-literal\">true</span>;<br>&#125;<br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span><br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subProperty</span> = <span class=\"hljs-literal\">false</span><br>&#125;<br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subProperty</span><br>&#125;<br><span class=\"hljs-comment\">// 关键，创建SuperType的实例，让SubType.prototype指向这个实例</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>()<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(<span class=\"hljs-title class_\">SuperType</span>)<br><span class=\"hljs-keyword\">let</span> inst1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>()<br><span class=\"hljs-keyword\">let</span> inst2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>()<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inst2.<span class=\"hljs-title function_\">getSuperValue</span>()) <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点：</h6>\n<ul>\n<li>父类方法可以复用</li>\n</ul>\n<h6 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点：</h6>\n<ul>\n<li>父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改</li>\n<li>子类构建实例时不能向父类传递参数</li>\n</ul>\n<h5 id=\"构造函数继承\"><a class=\"markdownIt-Anchor\" href=\"#构造函数继承\">#</a> 构造函数继承</h5>\n<p>使用父类构造函数来增强子类<strong>实例</strong>，等同于复制父类的实例给子类 (不使用原型)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">color</span> = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class=\"hljs-comment\">// 构造函数继承</span><br><span class=\"hljs-comment\">// 使得每个实例都会复制得到自己独有的一份属性</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-comment\">// 将父对象的构造函数绑定在子对象上</span><br>  <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> inst1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>()<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inst1)<br><br><span class=\"hljs-comment\">// SubType &#123;color: Array(2)&#125;</span><br></code></pre></td></tr></table></figure>\n<p>创建子类实例时调用 <code>SuperType</code>  构造函数，于是 <code>SubType</code>  的每个实例都会将 SuperType 中的属性复制一份，<strong>解决了原型链继承中多实例相互影响的问题</strong>。</p>\n<h6 id=\"优点-2\"><a class=\"markdownIt-Anchor\" href=\"#优点-2\">#</a> 优点：</h6>\n<ul>\n<li>父类的引用属性不会被共享</li>\n<li>子类构建实例时可以向父类传递参数</li>\n</ul>\n<h6 id=\"缺点-2\"><a class=\"markdownIt-Anchor\" href=\"#缺点-2\">#</a> 缺点：</h6>\n<ul>\n<li>只能继承父类的<strong>实例</strong>属性和方法，不能继承原型属性 / 方法</li>\n<li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li>\n</ul>\n<h5 id=\"组合继承上面两种结合起来\"><a class=\"markdownIt-Anchor\" href=\"#组合继承上面两种结合起来\">#</a> 组合继承（上面两种结合起来）</h5>\n<p>组合上述两种方法，用原型链实现对<strong>原型</strong>属性的继承，用构造函数来实现<strong>实例</strong>属性的继承</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span> = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span><br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-comment\">// 1、构造函数来复制父类的属性给SubType实例</span><br>  <span class=\"hljs-comment\">// *** 第二次调用SuperType()</span><br>  <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name)<br>  <span class=\"hljs-comment\">// call() 允许为不同的对象分配和调用属于一个对象的函数/方法。</span><br>  <span class=\"hljs-comment\">// call() 提供新的 this 值给当前调用的函数/方法。你可以使用 call 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</span><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>&#125;<br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getAge</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span><br>&#125;<br><br><span class=\"hljs-comment\">// 2、原型继承</span><br><span class=\"hljs-comment\">// *** 第一次调用SuperType()</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>()<br><span class=\"hljs-comment\">// 手动挂上构造器，指向自己的构造函数 SubType</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">SubType</span><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getAge</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span><br>&#125;<br><br><span class=\"hljs-keyword\">let</span> inst1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;Asuna&#x27;</span>, <span class=\"hljs-number\">20</span>)<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inst1&#x27;</span>, inst1)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inst1.<span class=\"hljs-title function_\">getName</span>(), inst1.<span class=\"hljs-title function_\">getAge</span>())<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(inst1 <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">SubType</span>, inst1 <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">SuperType</span>)<br><br><br><span class=\"hljs-comment\">// inst1 SubType &#123;name: &quot;Asuna&quot;, colors: Array(3), age: 20&#125;</span><br><span class=\"hljs-comment\">// Asuna 20</span><br><span class=\"hljs-comment\">// true true</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"优点-3\"><a class=\"markdownIt-Anchor\" href=\"#优点-3\">#</a> 优点：</h6>\n<ul>\n<li>父类的方法可以被复用</li>\n<li>父类的引用属性不会被共享</li>\n<li>子类构建实例时可以向父类传递参数</li>\n</ul>\n<h6 id=\"缺点对照注释\"><a class=\"markdownIt-Anchor\" href=\"#缺点对照注释\">#</a> 缺点（对照注释）：</h6>\n<ul>\n<li>第一次调用 <code>SuperType()</code> ：给 <code>SubType.prototype</code>  写入两个属性 name，color。</li>\n<li>第二次调用 <code>SuperType()</code> ：给 <code>instance1</code>  写入两个属性 name，color。</li>\n</ul>\n<p>实例对象 <code>inst1</code>  上的两个属性就屏蔽了其原型对象 SubType.prototype 的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的父类实例的属性 / 方法。这种被覆盖的情况造成了性能上的浪费。</p>\n<h5 id=\"原型式继承浅拷贝\"><a class=\"markdownIt-Anchor\" href=\"#原型式继承浅拷贝\">#</a> 原型式继承 (浅拷贝)</h5>\n<p><code>Object.create()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> person = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Nicholas&quot;</span>,<br>  <span class=\"hljs-attr\">friends</span>: [<span class=\"hljs-string\">&quot;Shelby&quot;</span>, <span class=\"hljs-string\">&quot;Court&quot;</span>, <span class=\"hljs-string\">&quot;Van&quot;</span>]<br>&#125;;<br><br><span class=\"hljs-keyword\">let</span> anotherPerson = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(person);<br>anotherPerson.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Greg&quot;</span>;<br>anotherPerson.<span class=\"hljs-property\">friends</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;Rob&quot;</span>);<br><br><span class=\"hljs-keyword\">let</span> yetAnotherPerson = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(person);<br>yetAnotherPerson.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&quot;Linda&quot;</span>;<br>yetAnotherPerson.<span class=\"hljs-property\">friends</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;Barbie&quot;</span>);<br><br><span class=\"hljs-title function_\">alert</span>(person.<span class=\"hljs-property\">friends</span>);   <span class=\"hljs-comment\">//&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"优点-4\"><a class=\"markdownIt-Anchor\" href=\"#优点-4\">#</a> 优点：</h6>\n<ul>\n<li>父类方法可以复用</li>\n</ul>\n<h6 id=\"缺点-3\"><a class=\"markdownIt-Anchor\" href=\"#缺点-3\">#</a> 缺点：</h6>\n<ul>\n<li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能</li>\n<li>子类构建实例时不能向父类传递参数</li>\n</ul>\n<h5 id=\"寄生式继承能附加一些方法\"><a class=\"markdownIt-Anchor\" href=\"#寄生式继承能附加一些方法\">#</a> 寄生式继承（能附加一些方法）</h5>\n<p>使用原型式继承获得一份目标对象的<strong>浅拷贝</strong>，然后增强了这个浅拷贝的能力。</p>\n<p><strong>优缺点其实和原型式继承一样</strong>，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">object</span>(<span class=\"hljs-params\">obj</span>) &#123;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>) &#123; &#125;<br>  F.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = obj<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">F</span>()<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createAnother</span>(<span class=\"hljs-params\">original</span>) &#123;<br>  <span class=\"hljs-comment\">// 通过调用函数创建一个新对象</span><br>  <span class=\"hljs-keyword\">let</span> clone = <span class=\"hljs-title function_\">object</span>(original)<br>  <span class=\"hljs-comment\">//以某种方式来增强这个对象</span><br>  clone.<span class=\"hljs-property\">getName</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;我有了getName方法: &#x27;</span> + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>)<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> clone<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> person = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Asuna&#x27;</span>,<br>  <span class=\"hljs-attr\">friends</span>: [<span class=\"hljs-string\">&#x27;Kirito&#x27;</span>, <span class=\"hljs-string\">&#x27;Yuuki&#x27;</span>, <span class=\"hljs-string\">&#x27;Sinon&#x27;</span>]<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> inst1 = <span class=\"hljs-title function_\">createAnother</span>(person)<br><span class=\"hljs-keyword\">let</span> inst2 = <span class=\"hljs-title function_\">createAnother</span>(person)<br></code></pre></td></tr></table></figure>\n<h6 id=\"优点-5\"><a class=\"markdownIt-Anchor\" href=\"#优点-5\">#</a> 优点：</h6>\n<ul>\n<li>父类方法可以复用</li>\n</ul>\n<h6 id=\"缺点-4\"><a class=\"markdownIt-Anchor\" href=\"#缺点-4\">#</a> 缺点：</h6>\n<ul>\n<li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能</li>\n<li>子类构建实例时不能向父类传递参数</li>\n</ul>\n<h5 id=\"寄生组合继承最优方案\"><a class=\"markdownIt-Anchor\" href=\"#寄生组合继承最优方案\">#</a> 寄生组合继承（最优方案）</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inheritPrototype</span>(<span class=\"hljs-params\">subType, superType</span>) &#123;<br>  <span class=\"hljs-comment\">// 修正子类原型对象指针，指向父类原型的一个副本 (用object()也可以) </span><br>  subType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(superType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>)<br>  <span class=\"hljs-comment\">// 增强对象，弥补因重写原型而失去的默认的constructor属性</span><br>  subType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = subType<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span> = [<span class=\"hljs-string\">&#x27;red&#x27;</span>, <span class=\"hljs-string\">&#x27;blue&#x27;</span>, <span class=\"hljs-string\">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getColors</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>  <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name)<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>&#125;<br><br><span class=\"hljs-title function_\">inheritPrototype</span>(<span class=\"hljs-title class_\">SubType</span>, <span class=\"hljs-title class_\">SuperType</span>)<br><br><span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getAge</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> inst1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&quot;Asuna&quot;</span>, <span class=\"hljs-number\">20</span>)<br><span class=\"hljs-keyword\">let</span> inst2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&quot;Krito&quot;</span>, <span class=\"hljs-number\">21</span>)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inst1&#x27;</span>, inst1)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inst2&#x27;</span>, inst2)<br></code></pre></td></tr></table></figure>\n<h5 id=\"多继承\"><a class=\"markdownIt-Anchor\" href=\"#多继承\">#</a> 多继承</h5>\n<p>如果你希望能继承到多个对象，则可以使用混入的方式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MyClass</span>(<span class=\"hljs-params\"></span>) &#123;<br>     <span class=\"hljs-title class_\">SuperClass</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);<br>     <span class=\"hljs-title class_\">OtherSuperClass</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 继承一个类（就是寄生组合继承的套路）</span><br><span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">SuperClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><br><span class=\"hljs-comment\">// 混合其它类，关键是这里的 assign() 方法</span><br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">assign</span>(<span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>, <span class=\"hljs-title class_\">OtherSuperClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);<br><br><span class=\"hljs-comment\">// 重新指定constructor</span><br><span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">MyClass</span>;<br><br><span class=\"hljs-comment\">// 在之类上附加方法</span><br><span class=\"hljs-title class_\">MyClass</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">myMethod</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-comment\">// do a thing</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>Object.assign 会把  <code>OtherSuperClass</code>  原型上的函数拷贝到  <code>MyClass</code>  原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。Object.assign 是在 ES2015 引入的，且可用 polyfilled。要支持旧浏览器的话，可用使用 jQuery.extend () 或者_.assign ()。 ——[MDN] Object.create ()</p>\n</blockquote>\n<h5 id=\"es6-extends\"><a class=\"markdownIt-Anchor\" href=\"#es6-extends\">#</a> ES6 extends</h5>\n<blockquote>\n<p>虽然 ES6 引入了关键字 class，但是底层仍然是基于原型的实现。class 只是语法糖，使得在 JavaScript 模拟类的代码更为简洁。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t——《JavaScript 忍者秘籍》</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br><br>  <span class=\"hljs-comment\">// 原型方法</span><br>  <span class=\"hljs-comment\">// 即 Person.prototype.getName = function() &#123; &#125;</span><br>  <span class=\"hljs-comment\">// 下面可以简写为 getName() &#123;...&#125;</span><br>  getName = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Person:&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>)<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Gamer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> &#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name, age</span>) &#123;<br>    <span class=\"hljs-comment\">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span><br>    <span class=\"hljs-variable language_\">super</span>(name)<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">const</span> asuna = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gamer</span>(<span class=\"hljs-string\">&#x27;Asuna&#x27;</span>, <span class=\"hljs-number\">20</span>)<br>asuna.<span class=\"hljs-title function_\">getName</span>() <span class=\"hljs-comment\">// 成功访问到父类的方法</span><br></code></pre></td></tr></table></figure>\n<p><strong> <code>super</code>  实现的原理</strong></p>\n<p>就是将继承的那个父类对象在子类中调用，比如  <code>super.call(this)</code>  实现将父类中的属性 (父类的方法是通过原型链来继承，实例都可以共享这些方法) 在子类中声明。</p>\n<h3 id=\"作用域和作用域链\"><a class=\"markdownIt-Anchor\" href=\"#作用域和作用域链\">#</a> 作用域和作用域链</h3>\n<h3 id=\"作用域的概念\"><a class=\"markdownIt-Anchor\" href=\"#作用域的概念\">#</a> 作用域的概念</h3>\n<p>字面意思就是起作用的范围。</p>\n<h3 id=\"全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#全局作用域\">#</a> 全局作用域</h3>\n<p>在代码中任何地方都能访问到的对象拥有全局作用域</p>\n<p>常见情况</p>\n<ul>\n<li>最外层函数 和在最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li>\n<li>所有 window 对象的属性拥有全局作用域\n<ul>\n<li>此处的 window 对象意味顶层对象，不同环境下有可能顶层对象不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"局部作用域\"><a class=\"markdownIt-Anchor\" href=\"#局部作用域\">#</a> 局部作用域</h3>\n<p>块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：</p>\n<ol>\n<li>在一个函数内部</li>\n<li>在一个代码块（由一对花括号包裹）内部</li>\n</ol>\n<h5 id=\"暂时性死区\"><a class=\"markdownIt-Anchor\" href=\"#暂时性死区\">#</a> 暂时性死区</h5>\n<ul>\n<li><strong>var 的创建和初始化被提升，赋值不会被提升。</strong></li>\n<li><strong>let 的创建被提升，初始化和赋值不会被提升。</strong></li>\n<li><strong>function 的创建、初始化和赋值均会被提升。</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a)<br>\t<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">7</span>;<br>&#125;<br><span class=\"hljs-title function_\">test</span>()<br></code></pre></td></tr></table></figure>\n<h5 id=\"函数作用域\"><a class=\"markdownIt-Anchor\" href=\"#函数作用域\">#</a> 函数作用域</h5>\n<p>指在函数内部生效。</p>\n<h5 id=\"作用域链\"><a class=\"markdownIt-Anchor\" href=\"#作用域链\">#</a> 作用域链</h5>\n<p>当前作用域内找不到的变量会根据作用域链向上寻找，直到顶层对象 window 也没有就返回 undefined。</p>\n<h3 id=\"作用域与执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#作用域与执行上下文\">#</a> 作用域与执行上下文</h3>\n<p>JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样：</p>\n<h5 id=\"解释阶段\"><a class=\"markdownIt-Anchor\" href=\"#解释阶段\">#</a> 解释阶段：</h5>\n<ul>\n<li>词法分析</li>\n<li>语法分析</li>\n<li>作用域规则确定</li>\n</ul>\n<h5 id=\"执行阶段\"><a class=\"markdownIt-Anchor\" href=\"#执行阶段\">#</a> 执行阶段：</h5>\n<ul>\n<li>创建执行上下文</li>\n<li>执行函数代码</li>\n<li>垃圾回收</li>\n</ul>\n<p>JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。</p>\n<p>一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。<strong>同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值</strong></p>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/",
            "url": "http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/",
            "title": "变量提升与函数提升",
            "date_published": "2022-06-17T07:43:53.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"1-提升\"><a class=\"markdownIt-Anchor\" href=\"#1-提升\">#</a> 1 提升</h3>\n<p>在 j s 代码执行前引擎会先进行预编译，预编 译期间会将变量声明与函数声明提升至其对应作用域的最顶端。</p>\n<h3 id=\"2-变量提升\"><a class=\"markdownIt-Anchor\" href=\"#2-变量提升\">#</a> 2 变量提升</h3>\n<p>在 ES 6 出来之前，J S 并没有块级作用域这一说，只有全局作用域和局部作用域。变量提升指的是<strong>使用 var 声明的变量提升到他所在的作用域的最顶端</strong>。创建阶段，初始化阶段变量提升，赋值阶段没有提升，值为 undefined。</p>\n<pre><code class=\"hljs\">* 赋值逻辑不提升\n* 全局变量会被局部作用域中的同名变量覆盖\n</code></pre>\n<p>let，con st 变量，在创建阶段被提升了，但初始化和赋值阶段都没有被提升，没法使用变量，都存在一个暂时性死区。</p>\n<h3 id=\"3-函数提升\"><a class=\"markdownIt-Anchor\" href=\"#3-函数提升\">#</a> 3 函数提升</h3>\n<p>函数声明提升：是将函数名及函数体全部提升到其所在作用域的顶部。</p>\n<p>函数创建有两个方式：</p>\n<p>1，函数声明形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 声明式</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span> () &#123;<br>    <span class=\"hljs-comment\">// to do...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>2，函数字面量形式（即函数表达式）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 函数字面量</span><br><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// to do...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>还有一种是方式：函数构造法：var a = new Fun ()，技术角度来讲也是一个字面量形式。</p>\n<p>函数提升只针对具名函数，而对于赋值的匿名函数，并不会存在函数提升。</p>\n<h3 id=\"4-变量提升与函数提升的优先级\"><a class=\"markdownIt-Anchor\" href=\"#4-变量提升与函数提升的优先级\">#</a> 4 变量提升与函数提升的优先级</h3>\n<p>函数提升优先级高于变量提升，且不会被同名变量声明覆盖，但是会被变量赋值后覆盖。</p>\n<h3 id=\"5-为什么有变量提升\"><a class=\"markdownIt-Anchor\" href=\"#5-为什么有变量提升\">#</a> 5 为什么有变量提升</h3>\n<p>JavaScript 作为脚本语言，不同于编程语言的一点是没有编译过程，但是它需要脚本解释器边解析边执行，而脚本解释器在解释执行代码前会先扫描一遍，这个过程就是 “预解析” 过程。</p>\n<p>J S 运行阶段包括预解析阶段和运行阶段。</p>\n<p>预解析阶段：</p>\n<p>​\t变量提升</p>\n<p>​\t函数提升</p>\n<p>执行阶段：</p>\n<p>​\t创建一个执行上下文 (execution context)，函数压栈，生成 active object (活动对象)</p>\n<p>​\t执行 / 解释上下文中的 function，为变量赋值</p>\n<p>预解析需要<strong>注意</strong>如下几个问题：</p>\n<ol>\n<li>预编译首先是全局预编译，函数体未调用时是不进行预编译的。</li>\n<li>只有 var 和 function 声明会被提升。</li>\n<li>在所在的作用域会被提升，不会扩展到其他的作用域。</li>\n<li>预编译后会顺序执行代码。</li>\n</ol>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/06/15/4001_JavaScript/",
            "url": "http://example.com/2022/06/15/4001_JavaScript/",
            "title": "JavaScript",
            "date_published": "2022-06-15T11:12:03.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"函数的this绑定\"><a class=\"markdownIt-Anchor\" href=\"#函数的this绑定\">#</a> 函数的 this 绑定</h5>\n<ol>\n<li>\n<p>全局作用域下</p>\n<ol>\n<li>\n<p>浏览器环境：全局作用域下 <code>this</code>  绑定 window</p>\n</li>\n<li>\n<p>node 环境： <code>空对象&#123;&#125;</code></p>\n<ol>\n<li>执行步骤：首先将要执行的 js 文件作为模块，然后进行加载编译，此时将 js 代码所有文件放入一个函数中，执行该函数，但是该函数调用 <code>call()</code> , 在调用时向 <code>call()</code>  中传入一个空对象绑定为 <code>this</code>  即 <code>执行函数.call(&#123;&#125;)</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><em>函数作用域下</em> <code>this</code>  指向</p>\n<ol>\n<li>\n<p>函数在被调用时，JavaScript 会默认给 this 绑定一个值，this 指向与函数所处位置 (<strong>函数定义位置</strong>) 无关，与<strong>函数被调用的方式</strong>及调用位置有关，<strong>this 是在运行时被绑定</strong></p>\n</li>\n<li>\n<p><strong>默认绑定</strong></p>\n<ol>\n<li>\n<p>独立函数调用 <code>this</code>  指向的是全局对象 <code>window</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj1&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><span class=\"hljs-comment\">// 将obj1的foo赋值给bar</span><br><span class=\"hljs-keyword\">var</span> bar = obj1.<span class=\"hljs-property\">foo</span>;<br><span class=\"hljs-title function_\">bar</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>隐式绑定</strong></p>\n<ol>\n<li>\n<p>通过某个对象进行调用，即调用位置中是<strong>通过某个对象发起的函数调用</strong> (谁发起函数调用 this 就绑定谁)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> test = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;test&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj1&quot;</span>,<br>  <span class=\"hljs-attr\">test</span>: test<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj2 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj2&quot;</span>,<br>  <span class=\"hljs-attr\">obj1</span>: obj1<br>&#125;<br>obj2.<span class=\"hljs-property\">obj1</span>.<span class=\"hljs-property\">test</span>.<span class=\"hljs-title function_\">foo</span>();<span class=\"hljs-comment\">//test对象</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>object.fn()</code> ：object 对象会被 js 引擎绑定到 fn 函数中的 this 上</p>\n</li>\n<li>\n<p>隐式绑定的前提条件</p>\n<ol>\n<li>必须在调用的对象内部有一个对函数的引用（比如一个属性）</li>\n<li>如果没有这样的引用，在进行调用时，会报找不到该函数的错误</li>\n<li>正是通过这个引用，间接的将 this 绑定到了这个对象上</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>显示绑定</strong></p>\n<ol>\n<li>\n<p><code>call()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式)</li>\n</ol>\n</li>\n<li>\n<p><code>apply()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (数组形式)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">num1,num2,num3</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num1+num2+num3,<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>sum.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&quot;call&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>);<span class=\"hljs-comment\">//剩余参数形式</span><br>sum.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-string\">&quot;apply&quot;</span>,[<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>]);<span class=\"hljs-comment\">//数组形式</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>bind()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式), <code>bind</code>  返回为一个新的函数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-comment\">// 默认绑定和显示绑定bind冲突：优先级（显示绑定）</span><br><span class=\"hljs-keyword\">var</span> newFoo = foo.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;aaaa&quot;</span>);<br><span class=\"hljs-title function_\">newFoo</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>new 绑定</strong></p>\n<ol>\n<li>使用 new 关键字来调用函数执行如下的操作\n<ol>\n<li>创建一个全新的对象，<strong>并将该对象赋值给 this，函数最后返回该对象</strong></li>\n<li>这个新对象会被执行 prototype 连接</li>\n<li>这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>内置函数绑定</strong></p>\n<ol>\n<li>\n<p><code>setTimeout</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 因为setTimeout内部实现函数调用时为独立函数调用，所以打印this时指向window</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);  <span class=\"hljs-comment\">//window</span><br>&#125;, <span class=\"hljs-number\">2000</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>数组.forEach/map/filter/find等高阶函数</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> names = [<span class=\"hljs-string\">&quot;aaa&quot;</span>,<span class=\"hljs-string\">&quot;bbb&quot;</span>,<span class=\"hljs-string\">&quot;ccc&quot;</span>,<span class=\"hljs-string\">&quot;ddd&quot;</span>];<br><span class=\"hljs-comment\">// 函数直接独立调用指向window</span><br>names.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item,<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br><span class=\"hljs-comment\">// forEach函数接收两个参数，第一个参数为一个函数，第二个参数为this绑定对象</span><br>names.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item,<span class=\"hljs-variable language_\">this</span>);<br>&#125;,<span class=\"hljs-string\">&quot;forEach&quot;</span>)<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>div的点击</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 2、监听box盒子的点击,内部函数调用实现为：隐式this绑定调用进行打印即boxDiv.onclick()形式调用</span><br><span class=\"hljs-keyword\">const</span> boxDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.box&quot;</span>);<br><span class=\"hljs-comment\">// 1.方式一：该方式添加监听事件会进行覆盖，也就是后面一个监听事件会覆盖前面一个，只生效一个最后一个事件</span><br>boxDiv.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-comment\">// 2.方式二：不会进行事件覆盖，会将函数收集到一个数组里面，执行时进行遍历</span><br><span class=\"hljs-comment\">// 内部函数调用实现为：call()方式，即fn.call(boxDiv)</span><br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2022/03/13/11001_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2022/03/13/11001_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/",
            "title": "浏览器基础",
            "date_published": "2022-03-13T02:23:44.000Z",
            "content_html": "<h2 id=\"title-浏览器基础categories-基础知识1\"><a class=\"markdownIt-Anchor\" href=\"#title-浏览器基础categories-基础知识1\">#</a> title: 浏览器基础<br>\n categories: § 基础知识 (1) §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"从地址栏输入地址到显示页面过程浏览器做什么事情\"><a class=\"markdownIt-Anchor\" href=\"#从地址栏输入地址到显示页面过程浏览器做什么事情\">#</a> 从地址栏输入地址到显示页面过程，浏览器做什么事情</h5>\n<h5 id=\"三次握手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手\">#</a> 三次握手</h5>\n<h5 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\">#</a> 四次挥手</h5>\n<h5 id=\"浏览器缓存-协商缓存-强制缓存\"><a class=\"markdownIt-Anchor\" href=\"#浏览器缓存-协商缓存-强制缓存\">#</a> 浏览器缓存、协商缓存、强制缓存</h5>\n",
            "tags": [
                "浏览器"
            ]
        },
        {
            "id": "http://example.com/2022/03/11/11002_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2022/03/11/11002_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/",
            "title": "浏览器基础",
            "date_published": "2022-03-11T01:39:44.000Z",
            "content_html": "<h2 id=\"title-计算机网络categories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-计算机网络categories-基础知识\">#</a> title: 计算机网络<br>\n categories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"http不同版本\"><a class=\"markdownIt-Anchor\" href=\"#http不同版本\">#</a> http 不同版本</h5>\n<h5 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> tcp</h5>\n<h5 id=\"不同状态码\"><a class=\"markdownIt-Anchor\" href=\"#不同状态码\">#</a> 不同状态码</h5>\n<h5 id=\"长短轮询-长短连接\"><a class=\"markdownIt-Anchor\" href=\"#长短轮询-长短连接\">#</a> 长短轮询、长短连接</h5>\n<h5 id=\"xss攻击类型-如何防御\"><a class=\"markdownIt-Anchor\" href=\"#xss攻击类型-如何防御\">#</a> XSS 攻击，类型、如何防御</h5>\n<h5 id=\"csrf攻击类型-如何防御\"><a class=\"markdownIt-Anchor\" href=\"#csrf攻击类型-如何防御\">#</a> CSRF 攻击，类型、如何防御</h5>\n<h5 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> Cookie</h5>\n<h5 id=\"ssr与csr\"><a class=\"markdownIt-Anchor\" href=\"#ssr与csr\">#</a> SSR 与 CSR</h5>\n<h5 id=\"引起前端安全的问题有哪些\"><a class=\"markdownIt-Anchor\" href=\"#引起前端安全的问题有哪些\">#</a> 引起前端安全的问题有哪些</h5>\n<h5 id=\"浏览器内核\"><a class=\"markdownIt-Anchor\" href=\"#浏览器内核\">#</a> 浏览器内核</h5>\n",
            "tags": [
                "浏览器"
            ]
        },
        {
            "id": "http://example.com/2021/01/21/10001_uniapp/",
            "url": "http://example.com/2021/01/21/10001_uniapp/",
            "title": "uni-app",
            "date_published": "2021-01-21T11:32:44.000Z",
            "content_html": "<h2 id=\"title-uni-appcategories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-uni-appcategories-基础知识\">#</a> title: uni-app<br>\ncategories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"1-小程序定义\"><a class=\"markdownIt-Anchor\" href=\"#1-小程序定义\">#</a> 1. 小程序定义</h5>\n<ul>\n<li>体积小，下载速度快，压缩包的体积不能大于 1M，2017 年之后开始小于 2M</li>\n<li>和 APP 进行互补，提供和 APP 相同的功能，而且比较简洁；下载简单；使用频率较少，但又不得不用；连接线上和线下；开发门槛低，成本低</li>\n</ul>\n<h5 id=\"2小程序准备\"><a class=\"markdownIt-Anchor\" href=\"#2小程序准备\">#</a> 2. 小程序准备</h5>\n<ol>\n<li>官网下载安装微信 <strong>开发者工具</strong></li>\n<li>下载地址：<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></li>\n<li>申请注册小程序账号</li>\n</ol>\n<h5 id=\"3-知识储备了解\"><a class=\"markdownIt-Anchor\" href=\"#3-知识储备了解\">#</a> 3. 知识储备了解</h5>\n<ol>\n<li>\n<p>flex 布局学习</p>\n</li>\n<li>\n<p>移动端知识</p>\n<ol>\n<li>\n<p>物理像素（真实存在）<br>\n叫作屏幕的分辨率； 屏幕上一个发光点就是物理像素点，分辨率越高，物理像素点越多，本身像素点越小越精致，屏幕越清晰</p>\n</li>\n<li>\n<p>设备独立像素 &amp;&amp; CSS 像素（虚拟像素）</p>\n<p>屏幕大小为 4.7 英寸、5.5 英寸等（主对角线）<br>\n设备独立像素（密度无关像素）：例如：iPhone 6（375px × 667px）、iPhone 6 plus（414px × 736px）<br>\nCSS 像素（px）：可以与设备独立像素相互装换</p>\n</li>\n<li>\n<p>dpr 比 &amp; DPI&amp;PPI<br>\ndpr 比：设备像素比，物理像素 / 设备独立像素 = dpr, 一般以 iPhone 6 的 dpr 为准 dpr = 2;</p>\n<p>DPI: 最早指的是打印机在单位面积上打印的墨点数，墨点越多越清晰；</p>\n<p>PPI: 一英寸显示屏上的像素点个数</p>\n</li>\n</ol>\n</li>\n<li>\n<p>移动端的适配方案</p>\n<ol>\n<li>\n<p>viewport 适配</p>\n<ol>\n<li>为什么做 viewport 适配<br>\n手机厂商生产手机大部分默认页面宽度的为 980px<br>\n 手机实际视口宽度都要小于 980px, 如：iPhone 6 为 375x<br>\n 开发需求：需要将 980px 的页面安全显示在手机屏幕上且没有滚动条<br>\n注意：视觉视口就是手机屏幕的大小；布局视口：就是网页的大小；</li>\n<li>实现</li>\n</ol>\n<meta name=''viewport'' content=''width=device-width,initial-scale=1.0''>\nwidth：网页视口的宽度即布局视口\ndevice-width：屏幕大小即视觉视口\n把视觉视口等于布局视口\n</li>\n<li>\n<p>rem 适配（root em 根节点字体的大小）</p>\n<ol>\n<li>\n<p>机型太多，不同的机型屏幕大小不一样<br>\n需求：一套设计稿的内容在不同的机型上呈现的效果一致，根据屏幕大小不同的变化，页面中的内容也相应的变化；</p>\n</li>\n<li>\n<p>实现</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">remRefresh</span>(<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-keyword\">let</span> clientWidth = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">clientWidth</span>;<br>  <span class=\"hljs-comment\">//将屏幕分成10等分</span><br>  <span class=\"hljs-keyword\">let</span> rem = clientWidth/<span class=\"hljs-number\">10</span>;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">documentElement</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = rem + <span class=\"hljs-string\">&#x27;px&#x27;</span>;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">&#x27;12px&#x27;</span>;<br>&#125;<br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;pageshow&#x27;</span>,<span class=\"hljs-function\">() =&gt;</span>&#123;<br>  <span class=\"hljs-title function_\">remRefresh</span>();<br>&#125;)<br><span class=\"hljs-comment\">//函数防抖</span><br><span class=\"hljs-keyword\">let</span> timeoutId;<br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;resize&#x27;</span>,<span class=\"hljs-function\">() =&gt;</span>&#123;<br>  timeoutId &amp;&amp; <span class=\"hljs-built_in\">clearTimeout</span>(timeoutId);<br>  timeoutId = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>    <span class=\"hljs-title function_\">remRefresh</span>();<br>  &#125;,<span class=\"hljs-number\">300</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>第三方库实现<br>\n lib-flexible 和 px2rem-loader</p>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "uni-app"
            ]
        },
        {
            "id": "http://example.com/2020/09/01/9003_TypeScript/",
            "url": "http://example.com/2020/09/01/9003_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-09-01T11:58:59.000Z",
            "content_html": "<h2 id=\"title-uni-appcategories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-uni-appcategories-基础知识\">#</a> title: uni-app<br>\ncategories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"10属性的封装\"><a class=\"markdownIt-Anchor\" href=\"#10属性的封装\">#</a> 10. 属性的封装</h5>\n<ol>\n<li>\n<p>修饰符</p>\n<ol>\n<li><code>public</code> : 修饰的属性可以在任意位置访问及修改，默认值</li>\n<li><code>private</code> : 私有属性，只能在类内部进行访问及修改，通过类中添加方法使得私有属性可以被外部访问</li>\n<li><code>protected</code> : 只能在当前类和当前类的子类中访问及修改</li>\n</ol>\n</li>\n<li>\n<p>封装属性提升安全性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Personn</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>  &#125;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">    getter方法用来读取属性，</span><br><span class=\"hljs-comment\">    setter方法用来设置属性，这两个方法被称为属性的存取器。</span><br><span class=\"hljs-comment\">  */</span><br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">name_easy</span>() &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">name_easy</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>= value;<br>    &#125;<br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">age_easy</span>()&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">age_easy</span>(<span class=\"hljs-params\">value:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = value;<br>    &#125;<br><span class=\"hljs-comment\">/*   // 定义方法，用来获取name属性</span><br><span class=\"hljs-comment\">  getterName()&#123;</span><br><span class=\"hljs-comment\">    return this.name;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来设置name属性</span><br><span class=\"hljs-comment\">  setterName(value:string)&#123;</span><br><span class=\"hljs-comment\">    this.name = value;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来获取age性</span><br><span class=\"hljs-comment\">  getterAge()&#123;</span><br><span class=\"hljs-comment\">    return this.age;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来设置age属性</span><br><span class=\"hljs-comment\">  setterAge(value:number)&#123;</span><br><span class=\"hljs-comment\">    // 用来判断数据是否合法</span><br><span class=\"hljs-comment\">    if (value&gt;=0) &#123;    </span><br><span class=\"hljs-comment\">      this.age = value;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">  &#125; */</span><br>&#125;<br><span class=\"hljs-comment\">// 简洁版，直接将属性定义在构造函数中</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> name:<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-keyword\">public</span> age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> personn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Personn</span>(<span class=\"hljs-string\">&#x27;李四&#x27;</span>,<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-comment\">/* personn.setterName(&#x27;王二&#x27;);// 修改name的值</span><br><span class=\"hljs-comment\">personn.setterAge(-12);// 修改age的值 */</span><br>personn.<span class=\"hljs-property\">name_easy</span> = <span class=\"hljs-string\">&#x27;test&#x27;</span>;<br>personn.<span class=\"hljs-property\">age_easy</span> = <span class=\"hljs-number\">23</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn.<span class=\"hljs-property\">name_easy</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn.<span class=\"hljs-property\">age_easy</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"11泛型\"><a class=\"markdownIt-Anchor\" href=\"#11泛型\">#</a> 11. 泛型</h5>\n<ol>\n<li>\n<p>泛型的使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 在定义函数和类时，遇到类型不明确就可以使用泛型</span><br><span class=\"hljs-keyword\">function</span> fn&lt;T&gt;(<span class=\"hljs-attr\">a</span>:T):T&#123;<br>  <span class=\"hljs-keyword\">return</span> a;<br>&#125;<br><span class=\"hljs-comment\">// 1.不指定泛型，直接使用，利用TS的自动类型检测</span><br><span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-number\">12</span>);<br><span class=\"hljs-comment\">// 2. 指定泛型</span><br>fn&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br><span class=\"hljs-comment\">// 泛型可以同时指定多个</span><br><span class=\"hljs-keyword\">function</span> fn2&lt;T,K&gt;(<span class=\"hljs-attr\">a</span>:T,<span class=\"hljs-attr\">b</span>:K):T &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b);<br>  <span class=\"hljs-keyword\">return</span> a;<br>&#125;<br>fn2&lt;<span class=\"hljs-built_in\">number</span>,<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">12</span>,<span class=\"hljs-string\">&#x27;test&#x27;</span>);<br><span class=\"hljs-comment\">//函数可以使用泛型</span><br><span class=\"hljs-comment\">//  T extends Inter 表示泛型T必须是Inter实现类(子类)。</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Inter</span>&#123;<br>  <span class=\"hljs-attr\">demo</span>:<span class=\"hljs-built_in\">number</span><br>&#125;<br><span class=\"hljs-keyword\">function</span> fn3&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Inter</span>&gt;(<span class=\"hljs-attr\">a</span>:T):<span class=\"hljs-built_in\">number</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> a.<span class=\"hljs-property\">demo</span>;<br>&#125;<br><span class=\"hljs-comment\">// 类中也可以使用泛型</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">myClass</span>&lt;T&gt; &#123;<br>  <span class=\"hljs-attr\">name</span>:T;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:T</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> mc = <span class=\"hljs-keyword\">new</span> myClass&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&#x27;张三&#x27;</span>);<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "http://example.com/2020/08/27/9002_TypeScript/",
            "url": "http://example.com/2020/08/27/9002_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-08-27T10:58:09.000Z",
            "content_html": "<h2 id=\"title-uni-appcategories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-uni-appcategories-基础知识\">#</a> title: uni-app<br>\ncategories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"5使用webpack打包ts代码\"><a class=\"markdownIt-Anchor\" href=\"#5使用webpack打包ts代码\">#</a> 5. 使用 webpack 打包 ts 代码</h5>\n<ol>\n<li>\n<p><code>webpack.config.js</code>  文件配置 webpack</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 引入路径管理的包</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-comment\">//webpack中所有的配置信息都写在module.exports中 </span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-comment\">// 指定入口文件路径</span><br>  <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./test.ts&#x27;</span>,<br><br>  <span class=\"hljs-comment\">// 指定打包文件所在目录</span><br>  <span class=\"hljs-attr\">output</span>:&#123;<br>    <span class=\"hljs-comment\">// 指定打包文件的目录</span><br>    <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>    <span class=\"hljs-comment\">// 打包后文件的名字</span><br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;bundle.js&quot;</span><br>  &#125;,<br>  <span class=\"hljs-comment\">// 指定webpack打包时要使用的模块</span><br>  <span class=\"hljs-attr\">module</span>:&#123;<br>    <span class=\"hljs-comment\">// 指定要加载的规则</span><br>    <span class=\"hljs-attr\">rules</span>:[<br>      &#123;<br>        <span class=\"hljs-comment\">// 指定规则生效的文件，使用正则语法</span><br>        <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.ts$/</span>,<span class=\"hljs-comment\">//ts文件生效</span><br>        <span class=\"hljs-comment\">// 要使用的loader</span><br>        <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">&#x27;ts-loader&#x27;</span>,<br>        <span class=\"hljs-comment\">// 要排除的文件</span><br>        <span class=\"hljs-attr\">exclude</span>:<span class=\"hljs-regexp\">/node-modules/</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"6面向对象\"><a class=\"markdownIt-Anchor\" href=\"#6面向对象\">#</a> 6. 面向对象</h5>\n<ol>\n<li>在程序中把一切事物当作对象编写</li>\n</ol>\n<h5 id=\"7类的简介\"><a class=\"markdownIt-Anchor\" href=\"#7类的简介\">#</a> 7. 类的简介</h5>\n<ol>\n<li>\n<p>类的实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;hello&#x27;</span><br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">18</span><br>  <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">aa</span>:<span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">12</span><br>  <span class=\"hljs-comment\">// constructor(parameters) &#123;</span><br>    <br>  <span class=\"hljs-comment\">// &#125;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(); <br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person);<br>person.<span class=\"hljs-property\">aa</span> = <span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//报错，只读属性，不能修改。</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>属性分为两种</p>\n<ol>\n<li>\n<p>实例属性：直接定义的属性，需要通过对象的实例去访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;hello&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br>person.<span class=\"hljs-property\">name</span>;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类属性 | 静态属性：使用 <code>static</code>  关键字修饰的属性，直接通过类去访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;<br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;test&#x27;</span><br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">name</span>;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>readonly</code> : 只读属性，无法修改</p>\n</li>\n</ol>\n</li>\n<li>\n<p>方法分为两种</p>\n<ol>\n<li>实例方法：需要使用对象的实例去访问。</li>\n<li>类方法 | 静态方法：直接使用类去访问。</li>\n</ol>\n</li>\n<li>\n<p><code>constructor</code> : 称为构造函数，构造函数会在创建对象时调用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Per</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;王二&#x27;</span><br>  age = <span class=\"hljs-number\">12</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-comment\">// 在实例方法中，this就表示当前的实例</span><br>    <span class=\"hljs-comment\">// 在构造函数中当前对象就是新建对象</span><br>    <span class=\"hljs-comment\">// 可以通过this向新建对象中添加属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hahahha&quot;</span>);<br>    <span class=\"hljs-comment\">// 在方法中可以使用this来表示当前调用方法的对象</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> per = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Per</span>(<span class=\"hljs-string\">&#x27;张三&#x27;</span>,<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(per);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(per.<span class=\"hljs-property\">name</span>);<br>per.<span class=\"hljs-title function_\">speak</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"8继承\"><a class=\"markdownIt-Anchor\" href=\"#8继承\">#</a> 8. 继承</h5>\n<ol>\n<li>\n<p>简介</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;动物在说话!&quot;</span>);<br>    <br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">//子类继承父类，Animal为父类，Dog为子类，子类将会拥有父类所有的属性和方法</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span>&#123;<br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>在奔跑!`</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 子类将会把父类中相同的方法覆盖掉，被称为重写</span><br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`汪汪汪`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span>&#123;<br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`喵喵喵`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&#x27;小狗&#x27;</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&#x27;小猫&#x27;</span>,<span class=\"hljs-number\">4</span>);<br>dog.<span class=\"hljs-title function_\">talk</span>();<br>cat.<span class=\"hljs-title function_\">talk</span>();<br>dog.<span class=\"hljs-title function_\">run</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>super</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Ani</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`动物在说话!000`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Doff</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Ani</span> &#123;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>    <span class=\"hljs-comment\">// 若子类中写构造函数，则把父类中构造函数覆盖（重写），在子类构造函数中必须对父类中构造函数进行调用</span><br>    <span class=\"hljs-variable language_\">super</span>(name);<span class=\"hljs-comment\">//调用父类中构造函数</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-comment\">// 在类的方法中super就表示当前类的父类</span><br>      <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">sayHello</span>();<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> doff = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Doff</span>(<span class=\"hljs-string\">&#x27;旺财&#x27;</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doff);<br>doff.<span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>抽象类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  以abstract开头的类是抽象类，</span><br><span class=\"hljs-comment\">  抽象类不能用来创建对象，</span><br><span class=\"hljs-comment\">  抽象类就是专门用来被继承的类。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animala</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">    抽象方法使用abstract开头，没有方法体，</span><br><span class=\"hljs-comment\">    抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-title function_\">sayHello</span>():<span class=\"hljs-built_in\">void</span><br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dogg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animala</span>&#123;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>说话!`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> dogg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dogg</span>(<span class=\"hljs-string\">&#x27;旺财1&#x27;</span>,<span class=\"hljs-number\">2</span>);<br>dogg.<span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"9-接口\"><a class=\"markdownIt-Anchor\" href=\"#9-接口\">#</a> 9. 接口</h5>\n<ol>\n<li>\n<p>接口的使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 类型声明(不能重复声明)，描述一个对象的类型</span><br><span class=\"hljs-keyword\">type</span> myType = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>&#125;;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">obj</span>:myType = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;test&#x27;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span><br>&#125;<br><span class=\"hljs-comment\">// 接口用来定义一个类结构，定义类中应该包含哪些属性和方法</span><br><span class=\"hljs-comment\">// 同时接口也可以当成类型声明使用(可以重复声明)</span><br><span class=\"hljs-keyword\">interface</span> myInterface&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">object</span>:myInterface = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;demo&#x27;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span><br>&#125;<br><span class=\"hljs-comment\">// 接口可以在定义类时限制类的结构，</span><br><span class=\"hljs-comment\">// 接口中所有的属性都不能有实际的值，</span><br><span class=\"hljs-comment\">// 接口只定义对象的结构，而不考虑实际值，在接口中所有的方法都是抽象方法</span><br><span class=\"hljs-keyword\">interface</span> myInter&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">sayHello</span>():<span class=\"hljs-built_in\">void</span>;<br>&#125;<br><span class=\"hljs-comment\">// 定义类时可以使类去实现一个接口,实现接口就是使类满足接口的要求</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span> <span class=\"hljs-keyword\">implements</span> myInter&#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(): <span class=\"hljs-built_in\">void</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`hello !`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "http://example.com/2020/08/21/9001_TypeScript/",
            "url": "http://example.com/2020/08/21/9001_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-08-21T08:38:49.000Z",
            "content_html": "<h2 id=\"title-uni-appcategories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-uni-appcategories-基础知识\">#</a> title: uni-app<br>\ncategories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"1简介\"><a class=\"markdownIt-Anchor\" href=\"#1简介\">#</a> 1. 简介</h5>\n<ol>\n<li>以 JavaScript 为基础构建的语言；一个 JavaScript 的超集；可以在任何支持 JavaScript 的平台中执行，TS 不能被 JS 解析器直接执行，需要编译转换为 JavaScript；typescript 扩展了 JavaScript，并且添加了类型。</li>\n<li>typescript 增加了类型、支持 ES6 新特性、强大的开发工具、添加 ES 不具备的新特性、丰富的配置选项</li>\n</ol>\n<h5 id=\"2-搭建ts开发环境\"><a class=\"markdownIt-Anchor\" href=\"#2-搭建ts开发环境\">#</a> 2. 搭建 TS 开发环境</h5>\n<ol>\n<li>下载 node</li>\n<li>安装 node <code>node -v</code></li>\n<li>npm 全局安装 ts <code>npm i typescript -g</code></li>\n<li>检查 typescript 版本 <code>tsc --version</code></li>\n</ol>\n<h5 id=\"3类型声明\"><a class=\"markdownIt-Anchor\" href=\"#3类型声明\">#</a> 3. 类型声明</h5>\n<ol>\n<li>\n<p>基本类型 (小写)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>number、string、boolean三种类型<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">bb</span>:number;<br><span class=\"hljs-comment\">//TS具有自动类型判断机制，当变量和赋值同时进行时可以省略类型声明</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">aa</span>:string = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">cc</span>:boolean = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">参数<span class=\"hljs-number\">1</span>:类型,参数<span class=\"hljs-number\">2</span>:类型</span>):类型&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>字面量类型 (联合类型)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&#x27;test&#x27;</span> | <span class=\"hljs-string\">&#x27;demo&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>: boolean | number;<br>b = <span class=\"hljs-literal\">true</span>;<br>b = <span class=\"hljs-number\">12</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>any (任意类型): 相当于关闭 TS 的类型检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> a;（隐式）<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:any;（显式）<br>以上两种类型均是any类型<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>unknown (未知类型)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>any赋值问题<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:any;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:string;<br>b = a;<span class=\"hljs-comment\">//a是any类型，它可以赋值给任意变量（谁碰any谁变）</span><br><span class=\"hljs-number\">2.</span>unknown赋值问题<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:unknown;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:string;<br>b = a;<span class=\"hljs-comment\">//报错，unknown实际上是类型安全的any，unknown类型的变量，不能直接赋值给其他变量</span><br>可以使用类型断言处理报错[<span class=\"hljs-number\">1.</span>添加条件 <span class=\"hljs-number\">2.</span>类型断言]<br><span class=\"hljs-number\">3.</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>void (用来表示空，以函数为例，表示没有返回值的函数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>):<span class=\"hljs-keyword\">void</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> unll/underfined<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>never (表示永远不会返回结果)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>):never&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>object</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:object;<br>\ta = &#123;&#125;<br><span class=\"hljs-number\">2.</span>&#123;&#125;用来指定对象中可以包含哪些属性<br>\t语法:&#123;属性名:属性值,属性名:属性值&#125;<br>\t在属性名后边加上?，表示属性为可选的<br>\t<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:&#123;<span class=\"hljs-attr\">name</span>:string,age?:number&#125;<br>\tb = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;测试&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;<br><span class=\"hljs-number\">3.</span>定义对象:[属性名:类型(一般为string)]:类型(一般为any)<br>\tt <span class=\"hljs-attr\">c</span>:&#123;<span class=\"hljs-attr\">name</span>:string,[<span class=\"hljs-attr\">propName</span>:string]:any&#125;;<br>\tc = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;测试&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;;<br><span class=\"hljs-number\">3.</span>定义函数:设置函数结构的类型声明<br>\t语法:<span class=\"hljs-function\">(<span class=\"hljs-params\">形参:类型,形参:类型...</span>) =&gt;</span> 返回值<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">d</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">a:number,b:number</span>) =&gt;</span>number<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">数组的类型声明<br><span class=\"hljs-number\">1.</span>类型[]<br>\t<span class=\"hljs-number\">1.1</span> string[] 表示字符串数组<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:string[];<br>\ta = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>];<br>\t<span class=\"hljs-number\">1.2</span> number[] 表示数值数组<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:number[];<br>\tb = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-number\">2.</span><span class=\"hljs-title class_\">Array</span>&lt;&gt;<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">aa</span>:<span class=\"hljs-title class_\">Array</span>&lt;number&gt;;<br>  aa = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>tuple (元组): 固定长度的数组</p>\n<ol>\n<li>语法：[类型，类型，类型]</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">test</span>:[string,string];<br>test = [<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>];<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>enum (枚举)[常用于选择项]</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Gender</span>&#123;<br>  <span class=\"hljs-title class_\">Male</span> = <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-title class_\">Female</span> =<span class=\"hljs-number\">0</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obj</span>:&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-title class_\">Gender</span>&#125;<br>obj = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;悟空&#x27;</span>,<br>  <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-title class_\">Gender</span>.<span class=\"hljs-property\">Male</span><br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">gender</span>===<span class=\"hljs-title class_\">Gender</span>.<span class=\"hljs-property\">Male</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类型断言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>语法<span class=\"hljs-number\">1</span>:变量 <span class=\"hljs-keyword\">as</span> 类型 <br><span class=\"hljs-number\">2.</span>语法<span class=\"hljs-number\">2</span>:&lt;类型&gt; 变量<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>补充</p>\n<ol>\n<li><code>&amp;</code>  同时</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">j</span>:&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>&#125; &amp; &#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>&#125;<br>j = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;悟空&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>类型的别名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">type</span> myType = <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">2</span>|<span class=\"hljs-number\">3</span>|<span class=\"hljs-number\">4</span>|<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">k</span>:myType;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">l</span>:myType;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"4编译选项\"><a class=\"markdownIt-Anchor\" href=\"#4编译选项\">#</a> 4. 编译选项</h5>\n<ol>\n<li>\n<p><code>tsc 文件名.ts -w</code> ：自动监视文件变化</p>\n</li>\n<li>\n<p><code>tsconfig.json</code>  文件配置</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">&#123;<br>  <span class=\"hljs-comment\">// tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span><br>  <span class=\"hljs-comment\">// 用来指定需要编译的ts目录及文件</span><br>  <span class=\"hljs-comment\">// 路径：** 表示任意目录，* 表示任意文件</span><br>  <span class=\"hljs-string\">&quot;include&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./test.ts&quot;</span><br>  ],<br>  <span class=\"hljs-comment\">// 用来指定不需要编译的ts文件</span><br>  <span class=\"hljs-comment\">// 默认值：[&#x27;node_modules&#x27;,&#x27;bower_components&#x27;,&#x27;jspm_packages&#x27;]</span><br>  <span class=\"hljs-string\">&quot;exclude&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./demo.ts&quot;</span><br>  ],<br><br>  <span class=\"hljs-comment\">// 用来继承其他的配置文件 </span><br>  <span class=\"hljs-string\">&quot;extends&quot;</span>: <span class=\"hljs-string\">&quot;./tsconfig.json&quot;</span>,<br><br>  <span class=\"hljs-comment\">// 用来指定需要编译的ts文件</span><br>  <span class=\"hljs-string\">&quot;files&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./test.ts&quot;</span><br>  ],<br><br>  <span class=\"hljs-comment\">// 编译选项，对编译器的配置</span><br>  <span class=\"hljs-string\">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class=\"hljs-comment\">// 项目选项</span><br>    <span class=\"hljs-comment\">// 设置ts代码编译的目标版本</span><br>    <span class=\"hljs-string\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;ES6&quot;</span>,<br>    <span class=\"hljs-comment\">// 指定要使用的模块化规范</span><br>    <span class=\"hljs-string\">&quot;module&quot;</span>: <span class=\"hljs-string\">&quot;ES6&quot;</span>,<br>    <span class=\"hljs-comment\">// 用来指定项目中要使用的库</span><br>    <span class=\"hljs-string\">&quot;lib&quot;</span>: [<br>      <span class=\"hljs-string\">&quot;ES2015&quot;</span>,<br>      <span class=\"hljs-string\">&quot;DOM&quot;</span><br>    ],<br>    <span class=\"hljs-comment\">// 用来指定编译后文件所在的目录</span><br>    <span class=\"hljs-string\">&quot;outDir&quot;</span>: <span class=\"hljs-string\">&quot;./dist&quot;</span>,<br>    <span class=\"hljs-comment\">// 将代码合并为一个文件，所有全局作用域中的代码会合并到同一个文件里</span><br>    <span class=\"hljs-comment\">// &quot;outFile&quot;: &quot;./dist/test.js&quot;</span><br><br>    <span class=\"hljs-comment\">// 是否对js文件进行编译，默认值为false</span><br>    <span class=\"hljs-string\">&quot;allowJs&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否检查js代码符合语法规范，默认值为false</span><br>    <span class=\"hljs-string\">&quot;checkJs&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否在文件编译后移除注释</span><br>    <span class=\"hljs-string\">&quot;removeComments&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否生成编译后的文件</span><br>    <span class=\"hljs-string\">&quot;noEmit&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 代码存在错误时不生成编译后的文件</span><br>    <span class=\"hljs-string\">&quot;noEmitOnError&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 所有严格检查的总开关</span><br>    <span class=\"hljs-string\">&quot;strict&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 用来设置编译后的文件是否使用严格模式，默认为false</span><br>    <span class=\"hljs-string\">&quot;alwaysStrict&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 不允许隐式的any类型</span><br>    <span class=\"hljs-string\">&quot;noImplicitAny&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 不允许类型不明确的this</span><br>    <span class=\"hljs-string\">&quot;noImplicitThis&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 严格检查空值</span><br>    <span class=\"hljs-string\">&quot;strictNullChecks&quot;</span>: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "http://example.com/2020/06/14/8003_Node.js/",
            "url": "http://example.com/2020/06/14/8003_Node.js/",
            "title": "Node",
            "date_published": "2020-06-14T05:47:42.000Z",
            "content_html": "<h2 id=\"title-uni-appcategories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-uni-appcategories-基础知识\">#</a> title: uni-app<br>\ncategories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n",
            "tags": [
                "Node"
            ]
        },
        {
            "id": "http://example.com/2020/06/08/8002_Node.js/",
            "url": "http://example.com/2020/06/08/8002_Node.js/",
            "title": "Node",
            "date_published": "2020-06-08T07:59:44.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<p>express 框架<br>\n egg 框架<br>\n koa 框架</p>\n",
            "tags": [
                "Node"
            ]
        },
        {
            "id": "http://example.com/2020/06/01/8001_Node.js/",
            "url": "http://example.com/2020/06/01/8001_Node.js/",
            "title": "Node",
            "date_published": "2020-06-01T07:09:44.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"node-事件循环\"><a class=\"markdownIt-Anchor\" href=\"#node-事件循环\">#</a> Node 事件循环</h5>\n<ol>\n<li>浏览器中 <code>EventLoop即事件循环</code> 是根据 HTML5 定义的规范来实现的，不同的浏览器可能会有不同的实现，而 node 中是由 <code>libuv库</code> 现实的</li>\n<li>微任务和宏任务\n<ol>\n<li>宏任务 (macrotask)：setTimeout、setInterval、IO 事件、setImmediate、close 事件</li>\n<li>微任务 (microtask)：Promise 的 then 回调、process.nextTick、queueMicrotask</li>\n<li>node 队列执行顺序\n<ol>\n<li><code>next tick microtask queue</code></li>\n<li><code>other microtask queue</code></li>\n<li><code>timer queue</code></li>\n<li><code>poll queue</code></li>\n<li><code>check queue</code></li>\n<li><code>close queue</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "Node"
            ]
        },
        {
            "id": "http://example.com/2020/05/19/7003_Webpack/",
            "url": "http://example.com/2020/05/19/7003_Webpack/",
            "title": "Webpack",
            "date_published": "2020-05-19T05:51:54.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h6 id=\"浏览器兼容性\"><a class=\"markdownIt-Anchor\" href=\"#浏览器兼容性\">#</a> 浏览器兼容性</h6>\n<ol>\n<li>browserslist 工具：查询浏览器版本，一个在不同的前端工具之间，共享目标浏览器和 Node.js 版本的配置 (Babel、Autoprefixer、postcss-preset-env 等)</li>\n<li>browserslist 编写规则\n<ol>\n<li>defaults:Browserslist 的默认浏览器</li>\n<li>5%: 通过全局使用情况统计的信息选择浏览器版本</li>\n<li>dead:24 个月没有官方支持或更新的浏览器</li>\n<li>last 2 version: 每一个浏览器的最后 2 个版本</li>\n<li>not ie &lt;=8: 排除先前查询选择的浏览器</li>\n<li>node 10: 选择最新的的 node.js 版本 (如 current node:Browserslist 现在使用的 Node.js 版本)</li>\n<li>iOS 7: 直接使用 iOS 浏览器版本 7</li>\n<li>supports es6-module: 支持特定功能的浏览器</li>\n</ol>\n</li>\n<li>browserslist 工具使用 caniuse-lite 工具进行条件查询\n<ol>\n<li><code>,</code> 、 <code>or</code> : 并集，满足一个即可</li>\n<li><code>and</code> : 交集，所有条件都要满足</li>\n<li><code>not</code> : 取反</li>\n</ol>\n</li>\n<li>在多个 browserslist 共享查询条件时，两种编写方式\n<ol>\n<li>在 <code>package.json</code>  文件里面添加字段<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;browserslist&quot;</span>: [<br><span class=\"hljs-string\">&quot;&gt;1%&quot;</span>,<br><span class=\"hljs-string\">&quot;last 2 version&quot;</span>,<br><span class=\"hljs-string\">&quot;not dead&quot;</span><br>]<br></code></pre></td></tr></table></figure>\n</li>\n<li>新建 <code>.browserslistrc</code>  文件<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&gt;<span class=\"hljs-number\">1</span>%,<br>last <span class=\"hljs-number\">2</span> version,<br>not dead<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>注意：浏览器版本查询的依赖网站:<a href=\"https://caniuse.com/\">https://caniuse.com/</a></p>\n<h6 id=\"postcss\"><a class=\"markdownIt-Anchor\" href=\"#postcss\">#</a> postcss</h6>\n<p>定义：一个通过 JavaScript 来转换样式的工具，但是要实现特定的功能需要借助与 postcss 相应的插件 (如自动添加浏览器前缀，css 样式重置)</p>\n<ol>\n<li>postcss 的使用\n<ol>\n<li>查找 postcss 在构建工具中的扩展，如 webpack 中的 <code>postcss-loader</code></li>\n<li>选择添加需要的 postcss 相关插件实现相应的功能</li>\n</ol>\n</li>\n<li>在命令行中使用 postcss <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 安装postcss工具</span><br>npm install postcss -D<br><span class=\"hljs-comment\">// 安装postcss命令行工具</span><br>npm install postcss-cli -D<br><span class=\"hljs-comment\">// 使用postcss工具对test.css文件中样式进行处理，生成目标文件result.css</span><br>npx postcss -o result.<span class=\"hljs-property\">css</span> ./src/css/test.<span class=\"hljs-property\">css</span><br><span class=\"hljs-comment\">//安装`autoprefixer`插件为了给样式添加浏览器前缀</span><br>npm install autoprefixer -D<br><span class=\"hljs-comment\">//`--use autoprefixer`指定使用特性插件</span><br>npx postcss --use autoprefixer -o result.<span class=\"hljs-property\">css</span> ./src/css/test.<span class=\"hljs-property\">css</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：推荐查询样式适配浏览器的网站:<a href=\"https://autoprefixer.github.io/(%E5%91%8A%E8%AF%89%E4%BD%A0%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%BA%94%E7%9A%84%E5%89%8D%E7%BC%80)\">https://autoprefixer.github.io/(告诉你是否需要添加相应的前缀)</a></p>\n<ol>\n<li>在 webpack 中使用 postcss<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 安装postcss工具</span><br>npm install postcss -D<br><span class=\"hljs-comment\">// 安装postcss-loader</span><br>npm install postcss-loader -D<br><span class=\"hljs-comment\">//安装`autoprefixer`插件为了给样式自动添加浏览器前缀</span><br>npm install autoprefixer -D<br><span class=\"hljs-comment\">//安装`postcss-preset-env`插件为了使CSS新特性适配大部分浏览器</span><br>npm install postcss-preset-env -D<br></code></pre></td></tr></table></figure>\n</li>\n<li><code>postcss-preset-env</code> : 讲一些现代 CSS 特性转成大多数浏览器识别的 CSS，且根据目标浏览器或者运行时环境添加所需的 <code>polyfill</code>\n<ol>\n<li><code>postcss-preset-env</code>  插件已经包含 <code>autoprefixer</code>  插件的特性 (自动为浏览器添加前缀)</li>\n<li>rgb (#000000):6 位；rgba (#00000000):8 位部分浏览器可以解析识别，最后两位表示透明度</li>\n<li>在 webpack 中使用 <code>postcss</code>  工具时，使用相同的插件时可以进行相同的 <code>插件代码抽离</code> ，只需新建文件 <code>postcss.config.js</code>  (特定文件名), 在该文件里面添加以下代码<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">//对webpack中的postcss工具使用postcss-preset-env插件配置单独抽离</span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">plugins</span>:[<br>    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;postcss-preset-env&quot;</span>)<br>    <span class=\"hljs-comment\">// 该插件可以简写为以下形式，但并不是所有的插件都可以写成简写形式</span><br>    <span class=\"hljs-comment\">// &quot;postcss-preset-env&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"资源模块类型asset-module-type\"><a class=\"markdownIt-Anchor\" href=\"#资源模块类型asset-module-type\">#</a> 资源模块类型 (asset module type)</h6>\n<ol>\n<li>4 种新的模块类型\n<ol>\n<li><code>asset/resource</code> : 发送一个单独的文件并导出 URL, 相当于 <code>file-loader</code>  的作用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;asset/resource&quot;</span>,<br>  <span class=\"hljs-attr\">generator</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:6][ext]&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n附加：加载字体文件 (阿里图标库)  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.ttf|eot|woff2?$/i</span>,<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;asset/resource&quot;</span>,<br>  <span class=\"hljs-attr\">generator</span>:&#123;<br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;font/[name].[hash:6][ext]&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><code>asset/inline</code> : 导出一个资源 data URL, 相当于 <code>url-loader</code>  的作用<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;asset/inline&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><code>asset/source</code> : 导出资源的源代码，相当于 <code>raw-loader</code>  的作用</li>\n<li><code>asset</code> : 在导出一个 data URL 和发送一个单独文件之间自动选择，相当于 <code>url-loader</code>  的作用，且配置资源体积限制实现 (大小图片进行筛选)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;asset&quot;</span>,<br>  <span class=\"hljs-attr\">generator</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:6][ext]&quot;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">parser</span>:&#123;<br>    &lt;!-- <span class=\"hljs-string\">`url-loader`</span>的limit效果 --&gt;<br>    <span class=\"hljs-attr\">dataUrlCondition</span>:&#123;<br>      <span class=\"hljs-attr\">maxSize</span>:<span class=\"hljs-number\">160</span> * <span class=\"hljs-number\">1024</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>将图片放入对应的文件夹里面的两种方式\n<ol>\n<li>在 <code>output</code>  中进行配置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">output</span>: &#123;<br><span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle.js&quot;</span>,<br><span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;build&quot;</span>),<br><span class=\"hljs-attr\">assetModuleFilename</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:6][ext]&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>在 <code>rules</code>  中配置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;asset/resource&quot;</span>,<br>  <span class=\"hljs-attr\">generator</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:6][ext]&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"plugin每一个plugin是一个类\"><a class=\"markdownIt-Anchor\" href=\"#plugin每一个plugin是一个类\">#</a> Plugin (每一个 plugin 是一个类)</h6>\n<ol>\n<li>定义: <code>Loader</code>  用于特定模块类型进行转换； <code>Plugin</code>  用于执行更加广泛的任务 (打包优化、资源管理、环境变量注入)</li>\n<li><code>Plugin</code>\n<ol>\n<li>安装 <code>clean-webpack-plugin</code> : 修改一些配置后自动生成 dist 文件夹进行替换<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 第一步引入需要的plugin --&gt;<br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;clean-webpack-plugin&quot;</span>);<br>&lt;!-- 第二步使用需要的plugin --&gt;<br><span class=\"hljs-attr\">plugins</span>: [<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CleanWebpackPlugin</span>()<br>]<br></code></pre></td></tr></table></figure>\n</li>\n<li>安装 <code>html-webpack-plugin</code> : 根据 <code>ejs模板</code> 自动生成 <code>index.js</code>  文件，并引入相关文件；ejs 模板里面可以设置 <code>options.title</code>  属性，即为生成 index 文件的标题；自定义 HTML 模板，新建 public 文件夹，在里面新建 HTML 文件，使用 <code>template</code>  进行引入即可；自定义模板数据填充，使用 <code>&lt;% 变量 %&gt;</code> ，该方式是 ejs 模板填充数据的方式<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 第一步引入需要的plugin --&gt;<br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-title class_\">CleanWebpackPlugin</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;clean-webpack-plugin&quot;</span>);<br>&lt;!-- 第二步使用需要的plugin --&gt;<br><span class=\"hljs-attr\">plugins</span>: [<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CleanWebpackPlugin</span>(&#123;<br>    <span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&quot;自定义index文件的标题名&quot;</span>,<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&quot;./pubilc/index.html&quot;</span><br>  &#125;)<br>]<br></code></pre></td></tr></table></figure>\n</li>\n<li>安装 <code>define-plugin</code> : 解决 <code>BASE_URL的常量</code> 无法找到问题，区分开发与生产环 境，区分 mode 模式等，允许编译时创建配置的全局常量，属于 webpack 内置插件，无需安装<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 第一步进行引入 --&gt;<br><span class=\"hljs-keyword\">const</span> &#123; <span class=\"hljs-title class_\">DefinePlugin</span> &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>);<br>&lt;!-- 第二步使用 --&gt;<br><span class=\"hljs-attr\">plugins</span>: [<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CleanWebpackPlugin</span>(),<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>(&#123;<br>    <span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">&quot;XGG&quot;</span>,<br>    <span class=\"hljs-attr\">template</span>:<span class=\"hljs-string\">&quot;./public/index.html&quot;</span><br>  &#125;),<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefinePlugin</span>(&#123;<br>    <span class=\"hljs-attr\">BASE_URL</span>:<span class=\"hljs-string\">&#x27;&quot;./&quot;&#x27;</span><br>  &#125;)<br>]<br></code></pre></td></tr></table></figure>\n</li>\n<li>安装 <code>copy-webpack-plugin</code> : 将指定文件夹里面的文件复制到另一个文件夹<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">plugins</span>: [<br>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CopyWebpackPlugin</span>(&#123;<br>    <span class=\"hljs-attr\">patterns</span>:[<br>      &#123;<br>        <span class=\"hljs-attr\">from</span>:<span class=\"hljs-string\">&quot;public&quot;</span>,<br>        <span class=\"hljs-comment\">// 可以省略不写，默认会复制到output中生成的文件夹</span><br>        <span class=\"hljs-comment\">// to:&quot;build&quot;,</span><br>        <span class=\"hljs-comment\">// 可以忽略不进行复制的文件</span><br>        <span class=\"hljs-attr\">globOptions</span>:&#123;<br>          <span class=\"hljs-comment\">// ignoreFiles:&quot;index.js&quot;</span><br>          <span class=\"hljs-attr\">ignore</span>:[<br>            <span class=\"hljs-string\">&quot;**/index.html&quot;</span>,<br>            <span class=\"hljs-comment\">// 若是Mac的话也需要忽略该文件,该文件是记录当前文件夹的状态信息</span><br>            <span class=\"hljs-string\">&quot;**/.DS_Store&quot;</span>,<br>            <span class=\"hljs-string\">&quot;**/test.txt&quot;</span><br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;)<br>]<br></code></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "Webpack"
            ]
        },
        {
            "id": "http://example.com/2020/05/15/7002_Webpack/",
            "url": "http://example.com/2020/05/15/7002_Webpack/",
            "title": "Webpack",
            "date_published": "2020-05-15T01:01:44.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h4 id=\"loader\"><a class=\"markdownIt-Anchor\" href=\"#loader\">#</a> loader</h4>\n<p>定义:loader 可以用于对模块的源代码进行转换</p>\n<ol>\n<li>css-loader 的使用方案有三种使用方案\n<ol>\n<li>内联方式<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;css-loader!../css/index.css&quot;</span>;   <br></code></pre></td></tr></table></figure>\n</li>\n<li>CLI 方式 (webpack 已经不使用)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">webpack --<span class=\"hljs-variable language_\">module</span>-bind jade-loader --<span class=\"hljs-variable language_\">module</span>-bind <span class=\"hljs-string\">&#x27;css=style-loader!css-loader&#x27;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>配置方式 (在使用多个 loader 时需要注意，webpack 加载 loader 的顺序是从后向前加载的，从下往上，从右往左)\n<ol>\n<li><code>npm install css-loader -D</code>  安装 css-loader <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">module</span>: &#123;<br>  <span class=\"hljs-attr\">rules</span>: [<br>    &#123;<br>      <span class=\"hljs-comment\">// 匹配相关文件资源，规则使用正则表达式编写</span><br>      <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.css$/i</span>,<br>      <span class=\"hljs-comment\">// 使用相对应loader进行解析相应的模块</span><br>      <span class=\"hljs-comment\">// loader:&quot;css-loader&quot;</span><br>      <span class=\"hljs-comment\">// use:&quot;css-loader&quot;</span><br>      <span class=\"hljs-attr\">use</span>:[<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;style-loader&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;css-loader&quot;</span>&#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><code>css-loader的importLoaders属性</code><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">module</span>: &#123;<br>  <span class=\"hljs-attr\">rules</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.css$/i</span>,<br>      <span class=\"hljs-attr\">use</span>:[<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;style-loader&quot;</span>&#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;css-loader&quot;</span>,<br>          <span class=\"hljs-attr\">options</span>:&#123;<br>            <span class=\"hljs-attr\">importLoaders</span>:<span class=\"hljs-number\">1</span><br>          &#125;<br>        &#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;postcss-loader&quot;</span>&#125;<br>      ]<br>    &#125;,<br>    &#123;<br>      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.less$/i</span>,<br>      <span class=\"hljs-attr\">use</span>:[<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;style-loader&quot;</span>&#125;,<br>        &#123;<br>          <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;css-loader&quot;</span>,<br>          <span class=\"hljs-attr\">options</span>:&#123;<br>            <span class=\"hljs-attr\">importLoaders</span>:<span class=\"hljs-number\">2</span><br>          &#125;<br>        &#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;postcss-loader&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;less-loader&quot;</span>&#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>注意：出现 CSS 文件嵌套引用时，需要使用 <code>importLoaders</code>  属性，因为 webpack 加载 loader 的顺序是从后往前，使用该属性后可以重新倒回去再次使用后面的 loader，使用的数量根据属性值决定</p>\n</blockquote>\n<ol start=\"2\">\n<li>style-loader 的使用\n<ol>\n<li><code>npm install style-loader -D</code>  安装 style-loader</li>\n<li>使用 <code>document.createElement(style)</code>  方式在 head 中创建 style 标签，使用 css 嵌入方式编写样式</li>\n</ol>\n</li>\n<li>less-loader 的使用\n<ol>\n<li><code>npm install less -D</code>  安装 less 工具，实现 <code>less</code>  转换为 <code>css</code></li>\n<li><code>npm install less-loader -D</code>  安装 less-loader</li>\n<li>webpack.config.js 编写 loader<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-attr\">module</span>: &#123;<br>  <span class=\"hljs-attr\">rules</span>: [<br>    &#123;<br>      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.less$/i</span>,<br>      <span class=\"hljs-attr\">use</span>:[<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;style-loader&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;css-loader&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;less-loader&quot;</span>&#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>file-loader 的使用\n<ol>\n<li><code>npm install file-loader -D</code>  安装 file-loader, 处理 <code>png</code> 、 <code>jpg</code>  等格式的图片，处理 <code>import/require()方式</code> 引入的文件资源，且会将该资源放到输出的文件夹中</li>\n<li>引入图片的两种形式  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 第一种方式 --&gt;<br><span class=\"hljs-keyword\">import</span> 图片名 <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;图片路径&quot;</span>;<br>&lt;!-- 第二种方式 --&gt;<br>background-<span class=\"hljs-attr\">image</span>:<span class=\"hljs-title function_\">url</span>(文件路径);<br></code></pre></td></tr></table></figure>\n</li>\n<li><code>img</code>  文件夹里面的图片经过 <code>MD4算法(散列函数处理)|(摘要算法:提取文件名核心值)</code>  生成 128bit 比特位哈希值路径 (32 个十六进制)</li>\n<li>文件名和文件路径设置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">use</span>:[<br>    &#123;<br>      <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;file-loader&quot;</span>,<br>      <span class=\"hljs-attr\">options</span>:&#123;<br>        <span class=\"hljs-comment\">// 使用占位符placeholder,name:&quot;[placeholder]&quot;</span><br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:8].[ext]&quot;</span>,<br>        <span class=\"hljs-comment\">// outputPath:&quot;img&quot;,</span><br>        <span class=\"hljs-attr\">esModule</span>:<span class=\"hljs-literal\">false</span><br>      &#125;<br>    &#125;<br>  ],<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;javascript/auto&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>常用的 placeholder\n<ol>\n<li><code>[ext]</code> : 处理文件的扩展名</li>\n<li><code>[name]</code> : 处理文件的名称</li>\n<li><code>[hash]</code> : 文件的内容，使用 MD4 散列算法处理</li>\n<li><code>[contentHash]</code> : 在 file-loader 中效果和 <code>[hash]</code>  结果一致，其他可能会不同</li>\n<li><code>[hash:&lt;length&gt;]</code> : 截取 hash 长度，默认 32 个字符太长</li>\n<li><code>[path]</code> : 文件相对于 webpack 配置文件的路径</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>url-loader 的使用\n<ol>\n<li><code>npm install url-loader -D</code>  安装 url-loader</li>\n<li>工作方式与 <code>file-loader</code>  相似，但是可以将较小的文件转成 base64 的 URI (base64 data)</li>\n<li>注意：小图片转换 base64 和页面直接一起请求，减少不必要的请求过程；大图片直接使用图片即可，若大图片也进行转换会影响页面的请求速度</li>\n<li><code>limit属性</code> 图片大小的最大值，小于该值就可以转换为 base64 嵌入打包文件里面，单位是字节 (Byte)<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&#123;<br>  <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.(png|jpe?g|gif|svg)$/</span>,<br>  <span class=\"hljs-attr\">use</span>:[<br>    &#123;<br>      <span class=\"hljs-attr\">loader</span>:<span class=\"hljs-string\">&quot;url-loader&quot;</span>,<br>      <span class=\"hljs-attr\">options</span>:&#123;<br>        <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;img/[name].[hash:8].[ext]&quot;</span>,<br>        <span class=\"hljs-attr\">limit</span>:<span class=\"hljs-number\">160</span> * <span class=\"hljs-number\">1024</span>,<br>        <span class=\"hljs-attr\">esModule</span>:<span class=\"hljs-literal\">false</span><br>      &#125;<br>    &#125;<br>  ],<br>  <span class=\"hljs-attr\">type</span>:<span class=\"hljs-string\">&quot;javascript/auto&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<code>raw-loader</code> : 将一些内容转换为字符串</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "Webpack"
            ]
        },
        {
            "id": "http://example.com/2020/05/11/7001_Webpack/",
            "url": "http://example.com/2020/05/11/7001_Webpack/",
            "title": "Webpack",
            "date_published": "2020-05-11T07:31:44.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h6 id=\"1webpack定义\"><a class=\"markdownIt-Anchor\" href=\"#1webpack定义\">#</a> 1.webpack 定义</h6>\n<p>webpack: 一个用于现代 JavaScript 应用程序的静态模块打包工具</p>\n<h6 id=\"2webpack与webpack-cli关系\"><a class=\"markdownIt-Anchor\" href=\"#2webpack与webpack-cli关系\">#</a> 2.webpack 与 webpack-cli 关系</h6>\n<blockquote>\n<p>webpack -&gt; node_modules/.bin 下 webpack -&gt; 依赖 webpack-cli 的 runCli 函数 -&gt; 依赖 webpack 打包<br>\n注意：CLI:command line interface (命令行接口)<br>\n 注意：可以越过 webpack-cli, 使用以下语句即可手动调用 webpack，一些框架中就是这样使用进行调用，比如 React、Vue 等</p>\n</blockquote>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> webpack =  <span class=\"hljs-built_in\">require</span>(webpack);<br><span class=\"hljs-keyword\">const</span> com = <span class=\"hljs-title function_\">webpack</span>(config);<br></code></pre></td></tr></table></figure>\n<h6 id=\"3webpack安装\"><a class=\"markdownIt-Anchor\" href=\"#3webpack安装\">#</a> 3.webpack 安装</h6>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">npm install webpack webpack-cli -g 全局安装 <br>npm install webpack webpack-cli -D 局部安装<br></code></pre></td></tr></table></figure>\n<p>注意: <code>-D</code>  是 <code>--dev-save</code>  缩写</p>\n<h6 id=\"4打包编译\"><a class=\"markdownIt-Anchor\" href=\"#4打包编译\">#</a> 4. 打包编译</h6>\n<p>webapck 执行流程：执行 <code>webpack</code>  命令后，会寻找当前目录下 src/index.js 文件作为入口<br>\n使用 <code>npm init</code>  命令生成 package.json 配置文件，若添加 - y 则无需进行手动设置，自动生成 package.json 文件</p>\n<h6 id=\"5使用局部本地webpack打包方法3种\"><a class=\"markdownIt-Anchor\" href=\"#5使用局部本地webpack打包方法3种\">#</a> 5. 使用局部 (本地) webpack 打包方法 (3 种)</h6>\n<ol>\n<li>使用 <code>./node_modules/.bin/webpack</code>  命令</li>\n<li>使用 <code>npx webpack</code>  命令，(npx: 直接执行 node_modules 文件中的命令 (文件))</li>\n<li>package.json 文件里面配置以下语句，使用 <code>npm run build</code>  即可 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-string\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意：如果局部没有安装 webpack，那么在执行的时候就寻找全局的 webpack</p>\n<h6 id=\"6指定入口文件\"><a class=\"markdownIt-Anchor\" href=\"#6指定入口文件\">#</a> 6. 指定入口文件</h6>\n<ol>\n<li>使用 <code>npx webapck --entry ./src/main.js --output-path ./build</code>  指定入口文件为 src 文件夹里 main.js 文件，打包生成文件夹 build (较为复杂)</li>\n<li>指定入口和出口的两种方式\n<ol>\n<li>在 package.json 文件里配置<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-string\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;webpack --entry ./src/main.js --output-path ./build&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>新建 webpack.config.js 文件，添加相关配置 <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\">&lt;!-- 导入node里内置的path模块 --&gt;<br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&quot;./src/main.js&quot;</span>,<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;bundle.js&quot;</span>,<br>    &lt;!-- path只能填写绝对路径 --&gt;<br>    &lt;!-- <span class=\"hljs-string\">`path.resolve(__dirname,&quot;&quot;)`</span>可以获取当前文件的绝对路径，与第二个参数进行拼接获取完整的绝对路径 --&gt;<br>    <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">&quot;./build&quot;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"7手动指定webpack配置文件\"><a class=\"markdownIt-Anchor\" href=\"#7手动指定webpack配置文件\">#</a> 7. 手动指定 webpack 配置文件</h6>\n<p>当执行 <code>npm run build</code>  命令后就会执行 package.json 文件中 <code>&quot;script&quot;:&#123;&quot;build&quot;:&quot;webpack&quot;&#125;</code> , 然后会查看当前文件夹下面有没有 webpack.config.js 文件，如果有就会依赖该文件进行编译执行；如果没有的话就会寻找 <code>src/index.js</code>  文件<br>\n手动指定 webpack 配置文件代码如下</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-string\">&quot;scripts&quot;</span>: &#123;<br>  <span class=\"hljs-string\">&quot;build&quot;</span>: <span class=\"hljs-string\">&quot;webpack --config ./webpack.config.js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>",
            "tags": [
                "Webpack"
            ]
        },
        {
            "id": "http://example.com/2020/05/04/D001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/",
            "url": "http://example.com/2020/05/04/D001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/",
            "title": "计算机组成",
            "date_published": "2020-05-04T07:36:44.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"存储形式\"><a class=\"markdownIt-Anchor\" href=\"#存储形式\">#</a> 存储形式</h5>\n<ul>\n<li>真值：带有符号的数，如 - 1、+1、+2 等</li>\n<li>机器数 (符号数字化的数，计算机中定点数分为有符号数和无符号数)\n<ul>\n<li>有符号数 (使用原码、反码、补码三种方式来表示定点整数和定点小数，使用移码只能表示定点整数)\n<ul>\n<li>原码\n<ul>\n<li>原码就是二进制定点表示法，即最高位为符号位，“0” 表示正，“1” 表示负，其余位表示数值的大小</li>\n<li>表示范围：8 位二进制位表示范围是 - 127~+127</li>\n<li>数 0 的原码有两种形式:</li>\n<li>[+0] 原 = 00000000B</li>\n<li>[-0] 原 = 10000000B</li>\n</ul>\n</li>\n<li>反码\n<ul>\n<li>正数的反码与其原码相同；负数的反码是符号位不变，对其原码逐位取反</li>\n<li>表示范围：8 位二进制反码的表示范围：-127～+127</li>\n<li>数 0 的反码有两种形式:\n<ul>\n<li>[+0] 反 = 00000000B</li>\n<li>[-0] 反 = 11111111B</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补码\n<ul>\n<li>模的概念，补数的概念，如 8 位二进制数，其模数为 256，计算机中两个互补的数称为补码</li>\n<li>正数的补码与其原码相同；负数的补码是在其反码的末位加 1，符号为 1</li>\n<li>表示范围：8 位二进制位表示范围是 - 127~+127</li>\n<li>与原码、反码不同，数值 0 的补码只有一个，[+0] 补 =[-0] 补 = 00000000B</li>\n<li>进行补码运算时，应注意所得结果不应超过补码所能表示数的范围</li>\n<li>采用补码后，可以方便地将减法运算转化成加法运算，运算过程得到简化。正数的补码即是它所表示的数的真值，而负数的补码的数值部份却不是它所表示的数的真值。采用补码进行运算，所得结果仍为补码</li>\n<li>二进制补码转换原码技巧：从最右边开始，遇到第一个 1 后，出符号为不变，其余位取反即可得到原码</li>\n</ul>\n</li>\n<li>移码\n<ul>\n<li>将符号位取反的补码 (不区分正负)</li>\n<li>表示范围：8 位二进制位表示范围是 - 127~+127</li>\n<li>数值 0 的移码只有一个，[+0] 移 =[-0] 移 = 00000000B</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>无符号数\n<ul>\n<li>相对有符号数而言，指的是整个机器字长的全部二进制位均表示数值位，相当于数的绝对值，因为只能表示非负数也就是 0 和正数</li>\n<li>计算机中无符号数没有原码、反码、补码、移码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"进制转化\"><a class=\"markdownIt-Anchor\" href=\"#进制转化\">#</a> 进制转化</h5>\n<ul>\n<li>二进制 (0、1 组成)\n<ul>\n<li>二进制转八进制：3 位一组，一组对应一个八进制数字</li>\n<li>任意进制转十进制：采用 r 进制计数法每个位数的基数 × 该进制的位权次幂依次相加即可</li>\n<li>二进制转十六进制：4 位一组，，一组对应一个十六进制数字</li>\n</ul>\n</li>\n<li>八进制 (0~7 组成)\n<ul>\n<li>八进制转二进制：每一个八进制数字对应 3 个二进制数字</li>\n</ul>\n</li>\n<li>十进制 (0~9 组成)\n<ul>\n<li>十进制转任意进制\n<ul>\n<li>除 x 取余倒排法 (x 代表进制数)</li>\n<li>拼凑法 (记忆一个表格)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>十六进制 (0<sub>9、A</sub>F 组成)\n<ul>\n<li>十六进制转二进制：每一个十六进制数字对应 4 个二进制数字</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "计算机组成"
            ]
        },
        {
            "id": "http://example.com/2020/04/14/C001_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "url": "http://example.com/2020/04/14/C001_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "title": "操作系统",
            "date_published": "2020-04-14T13:56:44.000Z",
            "content_html": "<h2 id=\"title-linuxexcerpt-开发常用命令01-date-20230216-182320tags-linuxcategories-linux基础comments-true\"><a class=\"markdownIt-Anchor\" href=\"#title-linuxexcerpt-开发常用命令01-date-20230216-182320tags-linuxcategories-linux基础comments-true\">#</a> title: Linux<br>\nexcerpt: § 开发常用命令 (01) §<br>\ndate: 2023/02/16 18:23:20<br>\ntags: Linux<br>\ncategories: Linux 基础<br>\n comments: true</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"进程-线程\"><a class=\"markdownIt-Anchor\" href=\"#进程-线程\">#</a> 进程、线程</h5>\n<ul>\n<li>进程：进程是系统进行资源分配和调度的一个独立单位，是系统中并发执行的单位，资源分配的基本单位、最小单位\n<ul>\n<li>运行中的程序，就被称进程</li>\n<li>一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态\n<ul>\n<li>运行状态（Running）: 该时刻进程占用 CPU；</li>\n<li>就绪状态（Ready）: 可运行，由于其他进程处于运行状态而暂时停止运行；</li>\n<li>阻塞状态（Blocked）: 该进程正在等待某一事件发生（如等待输入 / 输出操作的完成）而暂时停止运行，这时，即使给它 CPU 控制权，它也无法运行；</li>\n</ul>\n</li>\n<li>进程的另外两个基本状态\n<ul>\n<li>创建状态（new）: 进程正在被创建时的状态</li>\n<li>结束状态（Exit）: 进程正在从系统中消失时的状态</li>\n</ul>\n</li>\n<li>进程的挂起状态也分为两种\n<ul>\n<li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现</li>\n<li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行</li>\n</ul>\n</li>\n<li>PCB 进程控制块 是进程存在的唯一标识</li>\n<li>进程的描述信息\n<ul>\n<li>进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符</li>\n<li>用户标识符：进程归属的用户，用户标识符主要为共享和保护服务</li>\n</ul>\n</li>\n<li>进程优先级：进程抢占 CPU 时的优先级</li>\n<li>CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。</li>\n</ul>\n</li>\n<li>线程：线程是进程的一个实体，也是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位，有时被称为轻权进程或轻量级进程\n<ul>\n<li>线程是进程当中的一条执行流程，同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。</li>\n<li>线程的实现主要有三种线程的实现方式\n<ul>\n<li>用户线程 (User Thread): 在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li>\n<li>内核线程 (Kernel Thread): 在内核中实现的线程，是由内核管理的线程；</li>\n<li>轻量级进程 (LightWeight Process): 在内核中来支持用户线程；</li>\n<li>用户线程与内核线程的对应关系\n<ul>\n<li>第一种关系是多对一的关系，也就是多个用户线程对应同一个内核线程</li>\n<li>第二种是一对一的关系，也就是一个用户线程对应一个内核线程</li>\n<li>第三种是多对多的关系，也就是多个用户线程对应到多个内核线程</li>\n</ul>\n</li>\n<li>用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等</li>\n<li>线程的优点\n<ul>\n<li>一个进程中可以同时存在多个线程</li>\n<li>各个线程之间可以并发执行</li>\n<li>各个线程之间可以共享地址空间和文件等资源</li>\n</ul>\n</li>\n<li>线程的缺点\n<ul>\n<li>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C/C++ 语言，Java 语言中的线程奔溃不会造成进程崩溃</li>\n<li>内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进程 / 线程间通信方式：进程间通信 (IPC,InterProcess Communication) 是指在不同进程之间传播或交换信息\n<ul>\n<li>IPC 的方式通常有管道 (包括无名管道和命名管道)、消息队列、信号量、共享存储、Socket、Streams 等，其中 Socket 和 Streams 支持不同主机上的两个进程 IPC。</li>\n<li>管道\n<ul>\n<li>它是半双工的，具有固定的读端和写端</li>\n<li>它只能用于父子进程或者兄弟进程之间的进程的通信</li>\n<li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的 read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中</li>\n</ul>\n</li>\n<li>命名管道\n<ul>\n<li>FIFO 可以在无关的进程之间交换数据，与无名管道不同</li>\n<li>FIFO 有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中</li>\n</ul>\n</li>\n<li>消息队列\n<ul>\n<li>消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符 ID 来标识</li>\n<li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级</li>\n<li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除</li>\n<li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取</li>\n</ul>\n</li>\n<li>信号量\n<ul>\n<li>信号量（semaphore）是一个计数器。用于实现进程间的互斥与同步，而不是用于存储进程间通信数据</li>\n<li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存</li>\n<li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作</li>\n<li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数</li>\n<li>支持信号量组</li>\n</ul>\n</li>\n<li>共享内存\n<ul>\n<li>共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区</li>\n<li>共享内存是最快的一种 IPC，因为进程是直接对内存进行存取</li>\n</ul>\n</li>\n<li>Socket 通信：不同主机的进程间通信，那么就需要 Socket 通信，Socket 实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信\n<ul>\n<li>根据创建 Socket 的类型不同，分为三种常见的通信方式</li>\n<li>一个是基于 TCP 协议的通信方式</li>\n<li>一个是基于 UDP 协议的通信方式</li>\n<li>一个是本地进程间通信方式</li>\n</ul>\n</li>\n<li>线程通信间的方式\n<ul>\n<li>同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信</li>\n<li>对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步\n<ul>\n<li>互斥的方式，可保证任意时刻只有一个线程访问共享资源</li>\n<li>同步的方式，可保证线程 A 应在线程 B 之前执行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"并发与并行\"><a class=\"markdownIt-Anchor\" href=\"#并发与并行\">#</a> 并发与并行</h5>\n<ul>\n<li>并行是在不同实体上的多个事件，并发是在同一实体上的多个事件</li>\n<li>并发：指两个或多个事件在同一时间间隔发生</li>\n<li>并行：指两个或者多个事件在同一时刻发生</li>\n</ul>\n<h5 id=\"用户态和内核态\"><a class=\"markdownIt-Anchor\" href=\"#用户态和内核态\">#</a> 用户态和内核态</h5>\n<ul>\n<li>内核态：处于内核态的 CPU 可以访问任意的数据，并且占用 CPU 不会发生抢占情况，一般处于特权级 0 的状态我们称之为内核态</li>\n<li>用户态：处于用户态的 CPU 只能受限的访问内存，并且不允许访问外围设备，用户态下的 CPU 不允许独占，也就是说 CPU 能够被其他程序获取</li>\n</ul>\n<h5 id=\"局部性原理主要分为时间局部性和空间局部性\"><a class=\"markdownIt-Anchor\" href=\"#局部性原理主要分为时间局部性和空间局部性\">#</a> 局部性原理：主要分为时间局部性和空间局部性。</h5>\n<p>时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)<br>\n 空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。(因为很多数据在内存中都是连续存放的，并且程序的指令也是顺序地在内存中存放的)</p>\n<h5 id=\"异常和中断\"><a class=\"markdownIt-Anchor\" href=\"#异常和中断\">#</a> 异常和中断</h5>\n<ul>\n<li>异常：当我们在敲击键盘的同时就会产生中断，当硬盘读写完数据之后也会产生中断，所以我们需要知道，中断是由硬件设备产生的，而它们从物理上说就是电信号，它们通过中断控制器发送给 CPU，接着 CPU 判断收到的中断来自于哪个硬件设备（这定义在内核中），最后，由 CPU 发送给内核，有内核处理中断</li>\n<li>中断：CPU 处理程序的时候一旦程序不在内存中，会产生缺页异常；当运行除法程序时，当除数为 0 时，又会产生除 0 异常。所以异常是由 CPU 产生的，同时它会发送给内核，要求内核处理这些异常</li>\n<li>相同点\n<ul>\n<li>由 CPU 发送给内核，由内核去处理</li>\n</ul>\n</li>\n<li>不同点\n<ul>\n<li>产生源不相同，异常是由 CPU 产生的，而中断是由硬件设备产生的</li>\n<li>内核需要根据是异常还是中断调用不同的处理程序</li>\n</ul>\n</li>\n<li>中断不是时钟同步的，这意味着中断可能随时到来；异常由于是 CPU 产生的，所以它是时钟同步的，当处理中断时，处于中断上下文中；处理异常时，处于进程上下文中</li>\n</ul>\n<h5 id=\"原子操作\"><a class=\"markdownIt-Anchor\" href=\"#原子操作\">#</a> 原子操作</h5>\n<ul>\n<li>处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作</li>\n<li>处理器会自动保证基本的内存操作的原子性。处理器保证从系统内存中读取或者写入一个字节是原子的，当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址</li>\n<li>原子性方法\n<ul>\n<li>使用总线锁保证原子性</li>\n<li>使用缓存锁保证原子性</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"服务器高并发解决方案\"><a class=\"markdownIt-Anchor\" href=\"#服务器高并发解决方案\">#</a> 服务器高并发解决方案</h5>\n<ul>\n<li>应用数据与静态资源分离将静态资源 (图片，视频，js,css 等) 单独保存到专门的静态资源服务器中，在客户端访问的时候从静态资源服务器中返回静态资源，从主服务器中返回应用数据</li>\n<li>客户端缓存效率比较高，消耗资源最小的就是纯静态的 html 页面，所以可以把网站上的页面尽可能用静态的来实现，在页面过期或者有数据更新之后再将页面重新缓存。或先生成静态页面，然后用 ajax 异步请求获取动态数据</li>\n<li>集群和分布式\n<ul>\n<li>集群是所有的服务器都有相同的功能，请求哪台都可以，主要起分流作用</li>\n<li>分布式是将不同的业务放到不同的服务器中，处理一个请求可能需要使用到多台服务器，起到加快请求处理的速度</li>\n<li>反向代理在访问服务器的时候，服务器通过别的服务器获取资源或结果返回给客户端</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"抖动或颠簸现象\"><a class=\"markdownIt-Anchor\" href=\"#抖动或颠簸现象\">#</a> 抖动或颠簸现象</h5>\n<ul>\n<li>刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动或颠簸</li>\n<li>产生抖动的主要原因是进程频繁访问的页面数目高于可用的物理块数 (分配给进程的物理块不够)</li>\n<li>为进程分配的物理块太少，会使进程发生抖动现象；为进程分配的物理块太多，又会降低系统整体的并发度，降低某些资源的利用率，为了研究应该为每个进程分配多少个物理块，Denning 提出了<strong>进程工作集</strong>的概念</li>\n</ul>\n",
            "tags": [
                "操作系统"
            ]
        },
        {
            "id": "http://example.com/2020/04/08/5002_React/",
            "url": "http://example.com/2020/04/08/5002_React/",
            "title": "React",
            "date_published": "2020-04-08T11:47:56.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"组件通信\"><a class=\"markdownIt-Anchor\" href=\"#组件通信\">#</a> 组件通信</h5>\n<ol>\n<li>\n<p>父子组件通信</p>\n<ol>\n<li>\n<p>父组件传递子组件数据通信</p>\n<ol>\n<li>\n<p>父组件通过 <code>属性=值</code> 的形式来传递给子组件数据</p>\n</li>\n<li>\n<p>子组件通过 <code>props</code>  参数获取父组件传递过来的数据</p>\n</li>\n<li>\n<p>类组件之间传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">class Children extends Component&#123;<br>  // 构造方法，方式一<br>  // constructor(props)&#123;<br>  //   super();<br>  //   this.props = props;<br>  // &#125;     <br>  <br>  // 构造方法，方式二<br>  // constructor(props)&#123;<br>  //   super(props);<br>  // &#125;<br>  // 构造方法，方式三<br>  // 不写，子类的默认构造方法可以省略<br>  render()&#123;<br>    const &#123; name,age,height &#125; = this.props;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;子组件显示数据:&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br>export default class App extends Component &#123;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;Children name=&quot;why&quot; age=&quot;20&quot; height=&quot;188&quot;&gt;&lt;/Children&gt; <br>        &lt;Children name=&quot;GXX&quot; age=&quot;22&quot; height=&quot;172&quot;&gt;&lt;/Children&gt; <br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数组件之间传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">function Children(props) &#123;<br>  const &#123; name,age,height &#125; = props;<br>  return (<br>    &lt;div&gt;<br>      &lt;h2&gt;App_函数组件&lt;/h2&gt;<br>      &lt;h2&gt;&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br>export default class App extends Component &#123;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;Children name=&quot;why&quot; age=&quot;20&quot; height=&quot;188&quot;&gt;&lt;/Children&gt; <br>        &lt;Children name=&quot;GXX&quot; age=&quot;22&quot; height=&quot;172&quot;&gt;&lt;/Children&gt; <br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>组件参数类型验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">import PropTypes from &#x27;prop-types&#x27;<br>function Children(props) &#123;<br>  const &#123; name,age,height,names&#125; = props;<br>  return (<br>    &lt;div&gt;<br>      &lt;h2&gt;App_函数组件&lt;/h2&gt;<br>      &lt;h2&gt;&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>      &lt;ul&gt;<br>        &#123;<br>          names.map((item,index)=&gt;&#123;<br>            return &lt;li&gt;&#123;item&#125;&lt;/li&gt;<br>          &#125;)<br>        &#125;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br>// 设置属性类型验证<br>Children.propsTypes = &#123;<br>  name:PropTypes.string.isRequired,<br>  age:PropTypes.number,<br>  height:PropTypes.number,<br>  names:PropTypes.array<br>&#125;<br>// 设置属性默认值<br>Children.defaultProps = &#123;<br>  name:&quot;XGG&quot;,<br>  age:12,//默认类型也会进行类型判断<br>  height:199,<br>  names:[&quot;123&quot;,&quot;456&quot;,&quot;789&quot;]<br>&#125;<br>// 补充：类组件的相关属性编写规范<br>class Children2 extends Component&#123;<br>  //es6中class fields写法，给类上添加属性，而非对象上<br>  static propsTypes =&#123;<br>  &#125;<br>  static defaultProps =&#123;<br>  &#125;<br>&#125;<br>Children2.propsTypes = &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>子组件传递父组件通信</p>\n<ol>\n<li>父组件给子组件传递一个回调函数，在子组件中调用这个函数即可</li>\n<li>子组件可以通过该回调函数向父组件传递参数</li>\n</ol>\n</li>\n<li>\n<p>模拟插槽样式</p>\n</li>\n</ol>\n</li>\n<li>\n<p>跨组件通信 (数据传递)</p>\n<ol>\n<li>按照层次依次传递： <code>Spread Attributes</code> ，可以使用<strong>属性展开符： <code>...</code> </strong>，但是此方案对于中间层会存在冗余操作</li>\n<li>使用 ReactAPI: <code>Context</code>\n<ol>\n<li><code>React.createContext</code> : 创建一个需要共享的对象，若某组件订阅 <code>Context</code>  时该组件会从距离自身最近的匹配 <code>Provider</code>  中读取到当前 <code>Context</code>  值， <code>defaultValue</code>  是组件在顶层查找过程中没有找到对应的 <code>Provider</code> , 就会使用默认值。</li>\n<li><code>context.Provider</code> : 在创建 <code>Context对象</code>  (context) 时会返回一个 <code>Provider React组件</code> ，它允许消费组件订阅 <code>Context</code>  变化， <code>Provider</code>  接收一个属性 <code>value</code>  属性传递给消费组件，一个 <code>Provider</code>  可以和多个消费组件有对应关系，多个 <code>Provider</code>  可以嵌套使用，里层会覆盖外层数据；当 <code>Provider</code>  的 <code>value</code>  值发生变化时，它内部所有的消费组件都会重新渲染</li>\n<li><code>contextType</code> : 挂载在 <code>class</code>  上的 <code>contextType</code>  属性会被重新赋值为一个由 <code>React.createContext</code>  创建的 <code>Context</code>  对象，这可以使用 <code>this.context</code>  来获取最近 <code>Context</code>  上的值；可以在任何生命周期中访问到，包括 <code>render</code>  函数</li>\n<li><code>Consumer</code> : React 组件可以订阅到 context 变化，可以在函数式组件中完成订阅 context，需要函数作为子元素，该函数接收当前的 context 值，返回一个 React 节点</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><code>events</code> （全局事件传递）</p>\n<ol>\n<li><code>npm install events</code> : 安装</li>\n<li>常用 API\n<ol>\n<li><code>eventBus对象</code> ：创建 EventEmitter 对象</li>\n<li><code>eventBus.emit(&quot;事件名称&quot;,参数列表)</code> : 发出事件</li>\n<li><code>eventBus.addListener(&quot;事件名称&quot;,监听函数)</code> : 监听事件</li>\n<li><code>eventBus.removeListener(&quot;事件名称&quot;,监听函数)</code> : 移除事件</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "http://example.com/2020/04/06/5001_React/",
            "url": "http://example.com/2020/04/06/5001_React/",
            "title": "React",
            "date_published": "2020-04-06T00:20:45.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"react选择jsx\"><a class=\"markdownIt-Anchor\" href=\"#react选择jsx\">#</a> React 选择 JSX</h5>\n<ol>\n<li>\n<p>jsx 是嵌入到 JavaScript 中的一种结构语法</p>\n</li>\n<li>\n<p>jsx 顶层只能有一个根元素，通常在 jsx 的外层包裹着一个小括号 ()</p>\n</li>\n<li>\n<p>如果是单标签必须以 <code>&lt;/&gt;</code>  结尾，否则报错</p>\n</li>\n<li>\n<p>注释的方式： <code>&#123;/*我是注释*/&#125;</code></p>\n</li>\n<li>\n<p><code>&#123;&#125;</code>  中是否显示</p>\n<ol>\n<li>\n<p>直接显示： <code>number</code> 、 <code>string</code> 、 <code>array</code></p>\n</li>\n<li>\n<p>不显示内容为空： <code>null</code> 、 <code>undefined</code> 、 <code>Boolean</code></p>\n<p>附加：若想让其显示的措施为：布尔类型直接使用 tostring 方法，另外两个使用 totring 包裹或者添加一个空字符串</p>\n</li>\n<li>\n<p>** <code>对象类型</code>  ** 不能作为 jsx 的子类，不能直接放在 <code>&#123;&#125;</code>  中显示</p>\n</li>\n<li>\n<p><code>&#123;&#125;</code>  嵌入表达式：运算表达式、三元运算符、执行一个函数</p>\n</li>\n</ol>\n</li>\n<li>\n<p>绑定属性</p>\n<ol>\n<li>绑定普通属性</li>\n<li>绑定 class 属性: <code>className</code> 、 <code>htmlFor</code></li>\n<li>绑定 style 属性: <code>style=&#123;&#123;&#125;&#125;</code></li>\n</ol>\n</li>\n<li>\n<p>绑定事件</p>\n<ol>\n<li>\n<p>关于 <code>this</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">&#123;<span class=\"hljs-comment\">/*方式1.1：bind绑定this(显示绑定)*/</span>&#125;<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>)&#125;&gt;按钮&lt;/button&gt;<br>&#123;<span class=\"hljs-comment\">/*方式1.2：在constructor中统一绑定事件*/</span>&#125;<br><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>  <span class=\"hljs-variable language_\">super</span>(props);<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>   <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;&quot;</span><br>\t&#125;<br>   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>...<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>&#125;&gt;按钮&lt;/button&gt;<br>...<br>&#123;<span class=\"hljs-comment\">/*方式2：定义函数时，使用箭头函数，箭头函数中永远不绑定this，会向上即最近作用域寻找当前对象*/</span>&#125;<br>...<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>&#125;&gt;按钮&lt;/button&gt;<br>...<br>add = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">counter</span>);<br>&#125;<br>&#123;<span class=\"hljs-comment\">/*方式3(推荐)：直接传入一个箭头函数，在箭头函数中调用需要执行的函数*/</span>&#125;<br>&lt;button onClick=&#123;<span class=\"hljs-function\">()=&gt;</span>&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">add</span>()&#125;&#125;&gt;按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>传递参数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">movies</span>:[<span class=\"hljs-string\">&quot;天下无敌&quot;</span>,<span class=\"hljs-string\">&quot;奇门遁甲&quot;</span>,<span class=\"hljs-string\">&quot;十面埋伏&quot;</span>,<span class=\"hljs-string\">&quot;您好，李焕英&quot;</span>]<br>    &#125;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">liClick</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">liClick</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.liClick&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            this.state.movies.map((item,index,arr)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;(event)</span>=&gt;</span>&#123;this.liClick(item,index,event)&#125;&#125;&gt;&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>  <span class=\"hljs-title function_\">liClick</span>(<span class=\"hljs-params\">item,index,event</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;点击按钮&quot;</span>,item,index);<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>条件渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">isLogin</span>:<span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;isLogin&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>    <span class=\"hljs-keyword\">let</span> welcome = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">let</span> btnText = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">if</span> (isLogin) &#123;<br>      welcome = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>欢迎回来<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>      btnText = <span class=\"hljs-string\">&quot;退出&quot;</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      welcome = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>请先登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>      btnText = <span class=\"hljs-string\">&quot;登录&quot;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        &#123;welcome&#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;event</span>=&gt;</span>&#123;this.loginClick()&#125;&#125;&gt;&#123;isLogin?&quot;退出&quot;:&quot;登录&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span>  </span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;isLogin?&quot;GXX&quot;:null&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        &#123;isLogin&amp;&amp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>GXX<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>&#125;</span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>  <span class=\"hljs-title function_\">loginClick</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>      <span class=\"hljs-attr\">isLogin</span>: !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">isLogin</span><br>    &#125;)<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>列表渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">names</span>:[<span class=\"hljs-string\">&quot;cba&quot;</span>,<span class=\"hljs-string\">&quot;nba&quot;</span>,<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;aaa&quot;</span>],<br>      <span class=\"hljs-attr\">nums</span>:[<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-string\">&quot;88&quot;</span>]<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; names,nums &#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>列表渲染1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            names.map((item,index,arr)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>数字列表渲染2(过滤)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            nums.filter((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return item&gt;=30;</span><br><span class=\"language-xml\">            &#125;).map((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>数字列表渲染3(截取)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            nums.slice(0,3).map((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>  </span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>jsx</code>  的本质</p>\n<ol>\n<li><code>jsx</code>  是 <code>React.createElement(component,props,...children)</code>  函数的语法糖，将会转换成 <code>React.createElement()</code>  函数调用</li>\n<li><code>React.createElement()</code>  需要三个参数 ( <code>源码讲解</code> )\n<ol>\n<li>参数一：type\n<ol>\n<li>当前 ReactElement 的类型</li>\n<li>标签元素，字符串表示 <code>&quot;div&quot;</code></li>\n<li>组件元素，组件名称</li>\n</ol>\n</li>\n<li>参数二：config\n<ol>\n<li>所有的 jsx 属性都在 config 中以对象的属性和值的形式存储</li>\n</ol>\n</li>\n<li>参数三：children\n<ol>\n<li>存放在标签中的内容，以 children 数组的方式进行存储</li>\n</ol>\n</li>\n<li>遍历 <code>React.createElement函数中的参数</code> <br>\n<img src=\"../../all_photo/React.createElement%E5%87%BD%E6%95%B0_%E6%BA%90%E7%A0%81.png\" alt=\"image-20220608201741842\"></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>过程</p>\n<ol>\n<li><code>jsx-&gt;通过React.createElement函数-&gt;创建ReactElement(对象)-&gt;组成JavaScript的对象树(虚拟DOM)-&gt;通过ReactDOM.render函数-&gt;映射成浏览器中的真实DOM</code></li>\n<li><code>jsx-&gt;通过React.createElement函数-&gt;创建ReactElement(对象)-&gt;组成JavaScript的对象树(虚拟DOM)-&gt;通过ReactDOM.render函数-&gt;原生的控件(UIButton/Button)</code></li>\n</ol>\n</li>\n<li>\n<p>为什么使用虚拟 DOM</p>\n<ol>\n<li>很难跟踪状态发生的改变</li>\n<li>操作真实 DOM 性能较低\n<ol>\n<li>创建出来的对象较复杂</li>\n<li>DOM 操作会引起浏览器的回流和重绘，因此在开发中避免频繁 DOM 操作</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>虚拟 DOM</p>\n<ol>\n<li>由命令式转换为声明式编程</li>\n<li>UI 以虚拟的方式保存在内存中，并且是 JavaScript 对象</li>\n<li>可以使用 <code>ReactDOM.render()</code>  让虚拟 DOM 和真实 DOM 同步起来，这个过程叫作协调</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "http://example.com/2020/03/12/A001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "http://example.com/2020/03/12/A001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2020-03-12T08:39:44.000Z",
            "content_html": "<h2 id=\"title-数据结构categories-基础知识\"><a class=\"markdownIt-Anchor\" href=\"#title-数据结构categories-基础知识\">#</a> title: 数据结构<br>\n categories: § 基础知识 §</h2>\n<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h4 id=\"计算机网络\"><a class=\"markdownIt-Anchor\" href=\"#计算机网络\">#</a> 计算机网络</h4>\n<p>[TOC]</p>\n<h5 id=\"1计网体系结构\"><a class=\"markdownIt-Anchor\" href=\"#1计网体系结构\">#</a> 1. 计网体系结构</h5>\n<h6 id=\"1计算机网络概述\"><a class=\"markdownIt-Anchor\" href=\"#1计算机网络概述\">#</a> 1. 计算机网络概述</h6>\n<ol>\n<li>\n<p>认识计算机网络</p>\n<ol>\n<li>理解记忆，抓住重点（典型网络、协议、网络设备）</li>\n</ol>\n</li>\n<li>\n<p>概念</p>\n<ol>\n<li>计算机网络：一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。计算机网络是互连的、自治的计算机集合。互连：通过通信链路互联互通；自治：无主从关系</li>\n<li>网络：把许多计算机连接在一起</li>\n<li>互联网：把许多网络连接在一起</li>\n<li>因特网：是世界上最大的互联网。</li>\n</ol>\n</li>\n<li>\n<p>组成</p>\n<ol>\n<li>\n<p>组成部分</p>\n<ol>\n<li>硬件</li>\n<li>软件</li>\n<li>协议（一系列的规则和约定）</li>\n</ol>\n</li>\n<li>\n<p>工作方式</p>\n<ol>\n<li>边缘部分：用户直接使用（端与端之间通信是进程通信）\n<ol>\n<li>通信方式一：C/S 方式：移动端和服务器、B/S 方式：浏览器和服务器</li>\n<li>通信方式二：P2P 方式（同时是客户端与服务器，两者都是对等的，人人为我，我为人人，机器越多，下载越快）</li>\n</ol>\n</li>\n<li>核心部分 ：为边缘部分提供服务</li>\n</ol>\n</li>\n<li>\n<p>功能组成</p>\n<ol>\n<li>通信子网：实现数据通信</li>\n<li>资源子网：实现资源共享 / 数据处理</li>\n</ol>\n<p>![image-20220621113503905](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621113503905.png)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>功能</p>\n<ol>\n<li>数据通信</li>\n<li>资源共享：同一个计算机网络上的其他计算机可使用某台计算机的计算机资源的行为，可共享硬件、软件、数据</li>\n<li>分布式处理：多台计算机各自承担同一工作任务的不同部分，如 Hadoop 平台\n<ol>\n<li>提高可靠性</li>\n<li>负载均衡</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>分类</p>\n<ol>\n<li>按分布范围\n<ol>\n<li>广域网 WAN：交换技术</li>\n<li>城域网 MAN</li>\n<li>局域网 LAN：广播技术</li>\n<li>个人区域网 PAN</li>\n</ol>\n</li>\n<li>按使用者\n<ol>\n<li>公用网：中国电信</li>\n<li>专用网：军队、政府</li>\n</ol>\n</li>\n<li>按交换技术\n<ol>\n<li>电路交换：电话（占用）</li>\n<li>报文交换：（存储转发）</li>\n<li>分组交换：（存储转发）</li>\n</ol>\n</li>\n<li>按拓扑结构\n<ol>\n<li>总线型</li>\n<li>星型</li>\n<li>环型</li>\n<li>网状型：常用于广域网</li>\n</ol>\n</li>\n<li>按传输技术\n<ol>\n<li>广播式网络：共享公共通信信道</li>\n<li>点对点网络：使用分组存储转发和路由选择机制</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>标准化工作</p>\n<ol>\n<li>要实现不同厂商的硬件、软件之间相互联通，必须遵从统一的标准</li>\n<li>法定标准：由权威机构制定的正式、合法的标准（ISO/OSI）</li>\n<li>事实标准：某些公司在竞争中占据主流，成为标准（TCP/IP）</li>\n<li>RFC (因特网标准的形式) 成为正式标准四个阶段：因特网草案、建议标准、草案标准（2013 已取消）、因特网标准</li>\n</ol>\n</li>\n<li>\n<p>相关组织</p>\n<ol>\n<li>国际标准化组织 ISO：ISO/OSI 模型、HDLC 协议</li>\n<li>国际电信联盟 ITU：制定通信规则</li>\n<li>电器和电子工程师协会 IEEE：学术机构、5G、</li>\n<li>Internet 工程任务组 IETF: 负责因特网相关标准的制定、RFC</li>\n</ol>\n</li>\n<li>\n<p>性能指标</p>\n<ol>\n<li>\n<p>速率：即数据率或称数据传输率或比特率，连接在计算机网络上的主机在数字信道上传送数据位数的速率，单位是 b/s，kb/s，Mb/s，Gb/s，Tb/s\t\t（补充：1/0 为比特位）</p>\n<p>![image-20220621124312010](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621124312010.png)</p>\n</li>\n<li>\n<p>带宽：计算机网络中，带宽用来表示<strong>网络的通信线路传送数据的能力</strong>，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”, 单位是 “比特每秒”，b/s，kb/s，Mb/s，Gb/s（<strong>网络设备所支持的最高速度</strong>）理解：最大发射数据的数据率。指的是发送数据率、传输数据率</p>\n</li>\n<li>\n<p>吞吐量：表示在单位时间内通过某个网络（或信道、接口）的数据量。单位 b/s，kb/s，Mb/s 等，吞吐量受网络的带宽或网络的额定速率的限制</p>\n</li>\n<li>\n<p>时延：指数据 (报文、分组、比特流) 从网络 (链路) 的一端传送到另一端所需的时间。也叫延迟、迟延，单位是 <code>s</code></p>\n<ol>\n<li>\n<p>发送时延 (传输时延)：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间</p>\n</li>\n<li>\n<p>传播时延：取决于电磁波传播速度和链路长度</p>\n</li>\n<li>\n<p>排队时延：等待输出 / 入链路可用</p>\n</li>\n<li>\n<p>处理时延：检错找出口</p>\n</li>\n<li>\n<p>高速链路：指的是发送速率提高，不会影响到电磁波的传播速率</p>\n</li>\n<li>\n<p>计算公式</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>发送时延：</mtext><mfrac><mtext>数据长度</mtext><mrow><mtext>信道带宽</mtext><mo stretchy=\"false\">(</mo><mtext>发送速率</mtext><mo stretchy=\"false\">)</mo></mrow></mfrac><mtext>    传播时延：</mtext><mfrac><mtext>信道长度</mtext><mtext>电磁波在信道上的传播速率</mtext></mfrac><mtext>    时延带宽积</mtext><mo stretchy=\"false\">(</mo><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy=\"false\">)</mo><mtext>：</mtext><mfrac><mrow><mtext>传播时延</mtext><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mtext>带宽</mtext><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo stretchy=\"false\">)</mo></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">发送时延：\\frac{数据长度}{信道带宽(发送速率)}\\ \\ \\ \\ 传播时延：\\frac{信道长度}{电磁波在信道上的传播速率}\\ \\ \\ \\ 时延带宽积(bit)：\\frac{传播时延(s)}{带宽(b/s)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">送</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">延</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">宽</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">送</span><span class=\"mord cjk_fallback\">速</span><span class=\"mord cjk_fallback\">率</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">长</span><span class=\"mord cjk_fallback\">度</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">播</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">延</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.36033em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">电</span><span class=\"mord cjk_fallback\">磁</span><span class=\"mord cjk_fallback\">波</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">播</span><span class=\"mord cjk_fallback\">速</span><span class=\"mord cjk_fallback\">率</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">长</span><span class=\"mord cjk_fallback\">度</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">延</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">宽</span><span class=\"mord cjk_fallback\">积</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">宽</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">播</span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">延</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n</li>\n</ol>\n</li>\n<li>\n<p>时延带宽积：又称为以比特为单位的链路长度，“某段链路现在有多少比特”</p>\n</li>\n<li>\n<p>往返时间 RTT：从发送方发送数据开始，到发送方收到接收方的确认 (接收方收到数据后立即发送确认), 总共经历的时延，RTT 越大。在收到确认之前，可以发送的数据越多。</p>\n<ol>\n<li>往返时延 RTT 包括<strong>往返传播时延 = 传播时延 × 2 + 末端处理时间</strong></li>\n</ol>\n</li>\n<li>\n<p>利用率</p>\n<p>![image-20220621142024345](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621142024345.png)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>因特网络发展阶段</p>\n<ol>\n<li>第一阶段：阿帕网–&gt; 互联网–&gt; 因特网</li>\n<li>第二阶段：三级结构</li>\n<li>第三阶段：多层次 ISP 结构</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"2体系结构参考模型\"><a class=\"markdownIt-Anchor\" href=\"#2体系结构参考模型\">#</a> 2. 体系结构 &amp; 参考模型</h6>\n<ol>\n<li>\n<p>分层结构</p>\n<ol>\n<li>实体：指的是每一层的活动元素</li>\n<li>对等实体：同一层的实体</li>\n<li>分层原则\n<ol>\n<li>各层之间相互独立，每层只实现一种相对独立的功能</li>\n<li>每层之间界面自然清晰，易于理解，相互交流尽可能少</li>\n<li>结构上可分割开，每层都采用最合适的技术来实现</li>\n<li>保持下层对上层的独立性，上层单向使用下层提供的服务</li>\n<li>整个分层结构应该能促进标准化工作</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>网络协议：为进行网络中的对等实体数据交换而建立的规则、标准或约定（<strong>水平</strong>）</p>\n<ol>\n<li>语法：规定传输数据的格式</li>\n<li>语义：规定所要完成的功能</li>\n<li>同步：规定各种操作的顺序</li>\n</ol>\n</li>\n<li>\n<p>接口：上层使用下层服务的入口</p>\n</li>\n<li>\n<p>服务：下层为相邻上层提供的功能调用，上层使用下层服务，下级为上级提供服务（<strong>单向、垂直</strong>）</p>\n</li>\n<li>\n<p>数据包含关系</p>\n<p>![image-20220621162003918](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621162003918.png)</p>\n</li>\n<li>\n<p>概念总结</p>\n<ol>\n<li>网络体系结构是从<strong>功能上</strong>描述计算机网络结构，计算机网络体系结构简称网络体系结构是<strong>分层结构</strong>，每层遵循某个 / 些网络协议以完成本层功能，<strong>计算网络体系结构是计算机网络的各层及协议的集合</strong>。第 n 层在向第 n+1 层提供服务时，此服务不仅包括第 n 层本身的功能，还包含由下层服务提供的功能，仅仅在相邻间有接口，且所有的具体实现细节对上一层完全屏蔽，体系结构是抽象的，而实现是指能运行的一些软件和硬件</li>\n</ol>\n</li>\n<li>\n<p><strong>ISO/OSI 参考模型</strong> (7 层、法定标准)</p>\n<ol>\n<li>为了解决计算机网络复杂问题，提出按功能分层结构，，目的是支持异构网络系统的互联互通，每层完成特定的功能</li>\n<li>应用层\n<ol>\n<li>资源子网 (数据处理)、端到端</li>\n<li>用户和网络的界面，面向用户的，所有能和用户交互<strong>产生网络流量</strong>的程序，联网可以操作的程序如：QQ、电子邮件</li>\n<li>相关协议：文件传输 (FTP)、电子邮件 (SMTP)、万维网 (HTTP)</li>\n</ol>\n</li>\n<li>表示层\n<ol>\n<li>资源子网 (数据处理)、端到端</li>\n<li>表示、呈现屏幕上，用于处理两个通信系统中交换信息的表示方式（语法、语义），相关协议：JPEG、ASCII</li>\n<li>功能一：数据格式转换 (翻译官角色)</li>\n<li>功能二：数据加密解密</li>\n<li>功能三 ：数据的压缩和恢复</li>\n</ol>\n</li>\n<li>会话层\n<ol>\n<li>资源子网 (数据处理)、端到端</li>\n<li>向表示层实体 / 用户进程提供<strong>建立连接</strong>并在连接上有序的传输数据，也称为建立同步</li>\n<li>功能一：建立、管理、终止会话</li>\n<li>功能二：使用校验点可使会话在通信失效时从校验点 / 同步点继续恢复通信，实现数据同步，适用于传输大文件</li>\n<li>相关协议：ADSP、ASP</li>\n</ol>\n</li>\n<li>传输层\n<ol>\n<li>端到端 (进程与进程之间通信)</li>\n<li>负责主机中两个进程的通信，即端到端的通信。<strong>传输单位是报文、用户数据报</strong></li>\n<li>功能一：可靠传输、不可靠传输</li>\n<li>功能二：差错控制</li>\n<li>功能三：流量控制（不是手机流量，指的是发送速度）</li>\n<li>功能四：复用分用    （<strong>记忆口诀：可差留用</strong>）\n<ol>\n<li>复用：多个应用层进程可同时使用下面运输层的服务</li>\n<li>分用：运输层把收到的信息分别交付给上面应用层中相应的进程</li>\n</ol>\n</li>\n<li>相关协议：TCP、UDP</li>\n</ol>\n</li>\n<li>网络层\n<ol>\n<li>通信子网 (数据通信)、点到点</li>\n<li>主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。<strong>网络层传输单位是数据报</strong>，分组：指的是若数据报过长，就会切割为一个个小的分组</li>\n<li>功能一：路由选择（最佳路径）</li>\n<li>功能二：流量控制</li>\n<li>功能三：差错控制</li>\n<li>功能四：拥塞控制，即若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态，因此要采取一定措施，缓解这种拥塞</li>\n<li>相关协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF</li>\n</ol>\n</li>\n<li>数据链路层\n<ol>\n<li>通信子网 (数据通信)、点到点、（首尾均添加信息）</li>\n<li>主要任务是把网络层传下来的数据报组装成帧。<strong>数据链路层 / 链路层的传输单位是帧</strong></li>\n<li>功能一：成帧（定义帧的开始和结束）</li>\n<li>功能二：差错控制（帧错 + 位错）</li>\n<li>功能三：流量控制</li>\n<li>功能四：访问（接入）控制（控制对信道的访问）</li>\n<li>相关协议：SDLC、HDLC、PPP、STP</li>\n</ol>\n</li>\n<li>物理层\n<ol>\n<li>通信子网 (数据通信)、点到点、（不添加信息不做处理，形成 0/1 形式放在传输介质上）</li>\n<li>主要任务是在物理媒体上实现比特流的透明传输，物理层传输单位是比特。透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送</li>\n<li>功能一：定义接口特性</li>\n<li>功能二：定义传输模式</li>\n<li>功能三：定义传输速率</li>\n<li>功能四：比特同步（单工、半双工、双工）</li>\n<li>功能五：比特编码</li>\n<li>相关协议：Rj45、802.3</li>\n</ol>\n</li>\n<li><strong>记忆口诀：物联网淑慧试用</strong></li>\n</ol>\n</li>\n<li>\n<p><strong>TCP/IP 参考模型</strong> (4 层、事实标准)</p>\n<ol>\n<li>OSI 定义三点：服务、协议、接口</li>\n<li>OSI 先出现，参考模型先于协议发明，不偏向特定协议</li>\n<li>TCP/IP 设计之初就考虑到异构网互联问题，将 IP 作为重要层次</li>\n</ol>\n</li>\n<li>\n<p>相同点</p>\n</li>\n<li>\n<p>两者都分层</p>\n</li>\n<li>\n<p>基于独立的协议栈的概念</p>\n</li>\n<li>\n<p>可以实现异构网络互联</p>\n</li>\n<li>\n<p>不同点</p>\n<ol>\n<li>\n<p>图解</p>\n<p>![image-20220621174245136](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621174245136.png)</p>\n</li>\n<li>\n<p>面向连接分为三个阶段</p>\n<ol>\n<li>第一阶段：段建立连接，发出一个建立连接的请求</li>\n<li>第二阶段：只有在连接成功建立之后，才能开始数据传输</li>\n<li>第三阶段：当数据传输完毕，必须释放连接</li>\n</ol>\n</li>\n<li>\n<p>面向无连接没有这么多阶段，它直接进行数据传输</p>\n</li>\n</ol>\n</li>\n<li>\n<p>图解</p>\n</li>\n</ol>\n<p>![image-20220621173437248](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621173437248.png)</p>\n<p><strong>补充：5 层参考模型</strong></p>\n<p>![image-20220621175126771](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621175126771.png)</p>\n<p>![image-20220621175437248](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621175437248.png)</p>\n<h5 id=\"2物理层\"><a class=\"markdownIt-Anchor\" href=\"#2物理层\">#</a> 2. 物理层</h5>\n<h6 id=\"1通信基础\"><a class=\"markdownIt-Anchor\" href=\"#1通信基础\">#</a> 1. 通信基础</h6>\n<ol>\n<li>\n<p>基本概念</p>\n<ol>\n<li>\n<p>物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体</p>\n</li>\n<li>\n<p>物理层主要任务</p>\n<ol>\n<li>确定与传输媒体接口有关的一些特性：定义标准</li>\n<li>机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、<strong>引线数目、引脚数量</strong>和排列情况</li>\n<li>电气特性：规定传输二进制位时，线路上信号的<strong>电压范围</strong>、阻抗匹配、传输速率和<strong>距离</strong>限制等（有数字，电压）</li>\n<li>功能特性：指明某条线上出现的<strong>某一电平表示何种意义</strong>，接口部件的信号线的用途（无数字，电平高低）</li>\n<li>规程特性：(过程特性) 定义各条物理线路的工作<strong>规程和时序</strong>关系</li>\n</ol>\n</li>\n<li>\n<p>数据通信模型</p>\n<p>![image-20220622213950101](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622213950101.png)</p>\n</li>\n<li>\n<p>通信的目的是传送消息（消息：语音、文字、图像、视频等）</p>\n</li>\n<li>\n<p>数据 data：传送信息的实体，通常是有意义的符号序列。数据通信指在不同计算机之间传输表示信息的二进制数 0、1 序列的过程。</p>\n</li>\n<li>\n<p>信号：数据的电气 / 电磁的表现，是数据在传输过程中的存在形式</p>\n<ol>\n<li>数字信号 / 离散信号：代表消息的参数的取值是离散的</li>\n<li>模拟信号 / 连续信号：代表消息的参数的取值是连续的</li>\n</ol>\n</li>\n<li>\n<p>信源：产生和发送数据的源头</p>\n</li>\n<li>\n<p>信宿：接收数据的终点</p>\n</li>\n<li>\n<p>信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。</p>\n<ol>\n<li>按传输介质分：无线信道、有线信道</li>\n<li>按传输信号分：模拟信道、数字信道</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>通信方式</p>\n<ol>\n<li>单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道（广播）</li>\n<li>半双工通信 / 双相交替通信：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道（对讲机）</li>\n<li>全双工通信 / 双向同时通信：通信双方可以同时发送和接受信息，也需要两条信道（打电话）</li>\n</ol>\n</li>\n<li>\n<p>数据传输方式</p>\n<ol>\n<li>串行传输\n<ol>\n<li>将表示一个字符的 8 位二进制数按由低位到高位的顺序依次发送</li>\n<li>速度慢，费用低，适合远距离</li>\n</ol>\n</li>\n<li>并行传输\n<ol>\n<li>将表示一个字符的 8 位二进制数同时通过 8 条信道发送</li>\n<li>速度快，费用高，适合近距离（用于计算机内部数据传输）</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>实现字符同步</p>\n<ol>\n<li>同步传输：在同步传输的模式下，数据的传送是以一个<strong>数据区块</strong>为单位，因此同步传输又称为区块传输。在传送数据时，需先送出 1 个或多个同步字符，再送出整批的数据（时钟同步）</li>\n<li>异步传输：异步传输将比特分成小组进行传送，小组可以是 8 位的 1 个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方不知道它们会在什么时候到达。传送数据时，<strong>加一个字符起始位和一个字符终止位</strong>（键盘打字）</li>\n</ol>\n</li>\n<li>\n<p>码元：码元是指用一个固定时长的信号波形（数字脉冲），代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为 k 进制码元，而该时长称为码元宽度。当码元的离散状态有 M 个时（M 大于 2），此时码元为 M 进制码元。<strong>1 码元可以携带多个比特的信息量</strong>。例如，在使用二进制编码时，只有两种不同的码元，一种代表 0 状态，另一种代表 1 状态。4 进制码元，可以携带 2b 信息量；16 进制码元，可以携带 4b 信息量。</p>\n</li>\n<li>\n<p>数字通信系统数据传输速率的两种表示方法</p>\n<ol>\n<li>\n<p>速率也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用码元传输速率和信息传输速率表示</p>\n</li>\n<li>\n<p><strong>码元传输速率</strong></p>\n<ol>\n<li>别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数 (也可称为<strong>脉冲个数或信号变化的次数</strong>), 单位是波特 (Baud)。1 波特表示数字通信系统每秒传输一个码元</li>\n<li>一秒钟传输多少个码元</li>\n<li>数字信号有多进制和二进制之分，但码元速率与进制数无关，只与码元长度 T 有关</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>R</mi><mtext>：</mtext><mfrac><mn>1</mn><mi>T</mi></mfrac><mo stretchy=\"false\">(</mo><mi>B</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">R：\\frac{1}{T}(B)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span></span></span></span></span></p>\n</li>\n<li>\n<p><strong>信息传输速率</strong></p>\n<ol>\n<li>别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数 (即比特数) 单位是比特 / 秒 (b/s)</li>\n<li>一秒钟传输多少个比特</li>\n</ol>\n</li>\n<li>\n<p>两者关系：若一个码元携带 nbit 的信息量，则 M Baud 的码元传输速率所对应的<strong>信息传输速率为 M×nbit/s</strong></p>\n</li>\n<li>\n<p>思考题 1：系统传输的是比特流，通常比较的是信息传输速率，所以传输十六进制码元的通信系统传输速率较快</p>\n</li>\n</ol>\n</li>\n<li>\n<p>信道带宽</p>\n<ol>\n<li>模拟信号系统中：当输入的信号频率高或低到一定程度，使得系统的输出功率成为输入功率的一半时 (即 - 3dB)，最高频率和最低频率间的差值就代表了系统的通频带宽，其单位为赫兹 (Hz)</li>\n<li>数字信号设备：表示在单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”/ 单位时间内通过链路的数量，常用来表示网络的通信线路所能传输数据的能力。单位是比特每秒 (bps)</li>\n<li>拥有更宽的带宽，也就是有更大的信息运送能力</li>\n</ol>\n</li>\n<li>\n<p>失真</p>\n<ol>\n<li>影响失真程度的因素：\n<ol>\n<li>码元传输速率</li>\n<li>信号传输距离</li>\n<li>噪声干扰</li>\n<li>传输媒体质量</li>\n</ol>\n</li>\n<li>码间串扰：接收端收到的信号波形失去了码元之间清晰界限的现象（振动频率太快）</li>\n</ol>\n</li>\n<li>\n<p>编码 &amp;&amp; 调制</p>\n<ol>\n<li>\n<p>信道：信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道</p>\n</li>\n<li>\n<p>信道上传输的信号</p>\n<ol>\n<li>基带信号\n<ol>\n<li>将数字信号 1 和 0 直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）。来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如我们说话的声波就是基带信号。</li>\n</ol>\n</li>\n<li>宽带信号\n<ol>\n<li>将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）。把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）</li>\n</ol>\n</li>\n<li>在传输距离较近时，计算机网络采用基带传输方式（近距离衰减小，从而信号内容不易发生变化）。<br>\n在传输距离较远时，计算机网络采用宽带传输方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>数据</mtext><mo>−</mo><mtext>数字信号</mtext><mo>−</mo><mtext>编码    数字数据</mtext><mo>−</mo><mo stretchy=\"false\">(</mo><mtext>数字发送器</mtext><mo stretchy=\"false\">)</mo><mo>−</mo><mtext>数字信号</mtext><mo>−</mo><mtext>编码    模拟数据</mtext><mo>−</mo><mo stretchy=\"false\">(</mo><mi>P</mi><mi>C</mi><mi>M</mi><mtext>编码器</mtext><mo stretchy=\"false\">)</mo><mo>−</mo><mtext>数字信号</mtext><mo>−</mo><mtext>编码</mtext><mspace linebreak=\"newline\"></mspace><mtext>数据</mtext><mo>−</mo><mtext>模拟信号</mtext><mo>−</mo><mtext>调制    数字数据</mtext><mo>−</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mtext>调制器</mtext><mo stretchy=\"false\">)</mo><mo>−</mo><mo>−</mo><mtext>模拟信号</mtext><mo>−</mo><mtext>调制    模拟数据</mtext><mo>−</mo><mo stretchy=\"false\">(</mo><mtext>放大器调制器</mtext><mo stretchy=\"false\">)</mo><mo>−</mo><mtext>模拟信号</mtext><mo>−</mo><mtext>调制</mtext></mrow><annotation encoding=\"application/x-tex\">数据-数字信号-编码\\ \\ \\ \\ 数字数据-(数字发送器)-数字信号-编码\\ \\ \\ \\ 模拟数据-(PCM编码器)-数字信号-编码\\\\数据-模拟信号-调制\\ \\ \\ \\ 数字数据--(调制器)--模拟信号-调制\\ \\ \\ \\ 模拟数据-(放大器调制器)-模拟信号-调制\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">码</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">送</span><span class=\"mord cjk_fallback\">器</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">码</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">器</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">编</span><span class=\"mord cjk_fallback\">码</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">制</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">字</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">制</span><span class=\"mord cjk_fallback\">器</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">制</span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mspace\"> </span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">放</span><span class=\"mord cjk_fallback\">大</span><span class=\"mord cjk_fallback\">器</span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">制</span><span class=\"mord cjk_fallback\">器</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord cjk_fallback\">模</span><span class=\"mord cjk_fallback\">拟</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">调</span><span class=\"mord cjk_fallback\">制</span></span></span></span></span></p>\n</li>\n<li>\n<p>数字数据编码为数字信号</p>\n<ol>\n<li><strong>非归零编码【NRZ】</strong>\n<ol>\n<li>高 1 低 0</li>\n<li>编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方难以保持同步</li>\n</ol>\n</li>\n<li><strong>曼彻斯特编码</strong>（携带时钟信号和数字信号）\n<ol>\n<li>将一个码元分成两个相等的间隔，前一个间隔为低电平后一个间隔为高电平表示码元 1；码元 0 则正好相反。也可以采用相反的规定。该编码的特点是在每一个码元的中间出现电平跳变，位中间的跳变既作时钟信号（可用于同步），又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。每一个码元都被调成两个电平，所以数据传输速率只有调制速率的 1/2（一次时钟周期发生两次脉冲）</li>\n</ol>\n</li>\n<li><strong>差分曼彻斯特编码</strong>（携带时钟信号和数字信号）\n<ol>\n<li>同 1 异 0</li>\n<li>常用于局域网传输，其规则是：若码元为 1, 则前半个码元的电平与上一个码元的后半个码元的电平相同，若为 0。则相反。该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现自同步，且抗干扰性强于曼彻斯特编码</li>\n</ol>\n</li>\n<li>归零编码【RZ】\n<ol>\n<li>信号电平在一个码元之内都要恢复到零的这种编码成编码方式</li>\n</ol>\n</li>\n<li>反向不归零编码【NRZI】\n<ol>\n<li>信号电平翻转表示 0，信号电平不变表示 1</li>\n</ol>\n</li>\n<li>4B/5B 编码\n<ol>\n<li>比特流中插入额外的比特以打破一连串的 0 或 1，就是用 5 个比特来编码 4 个比特的数据，之后再传给接收方，因此称为 4B/5B。编码效率为 80%</li>\n<li>只采用 16 种对应 16 种不同的 4 位码，其他的 16 种作为控制码（帧的开始和结束，线路的状态信息等）或保留</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>数字数据调制为模拟信号</p>\n<ol>\n<li>数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程</li>\n<li>2ASK：调幅，1 有 0 无</li>\n<li>2FSK：调频，1 密 0 稀</li>\n<li>2PSK：调相，正弦余弦波</li>\n<li>QAM：调幅 + 调相</li>\n</ol>\n</li>\n<li>\n<p>模拟数据编码为数字信号</p>\n<ol>\n<li>计算机内部处理的是二进制数据，处理的都是数字音频，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列（即实现音频数字化）</li>\n<li>最典型的例子就是对音频信号进行编码的脉码调制（PCM），在计算机应用中，能够达到最高保真水平的就是 PCM 编码，被广泛用于素材保存及音乐欣赏，CD、DVD 以及我们常见的 WAV 文件中均有应用。它主要包括三步：抽样、量化、编码\n<ol>\n<li>抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：f 采样频率≥ 2f 信号最高频率</li>\n<li>量化：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字量</li>\n<li>编码：把量化的结果转换为与之对应的二进制编码</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>模拟数据调制为模拟信号</p>\n<ol>\n<li>为了实现传输的有效性，可能需要<strong>较高的频率</strong>。这种调制方式还可以使用<strong>频分复用技术</strong>，充分利用带宽资源</li>\n<li>在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>数据交换</p>\n<ol>\n<li>\n<p>交换是通过某些交换中心将数据进行集中和传送。传输线路为各个用户共用，从而大大节省通信线路，降低系统费用</p>\n</li>\n<li>\n<p><strong>电路交换 / 线路交换</strong>（全双工）</p>\n<ol>\n<li>电路交换的原理：在数据传输期间，源结点与目的结点之间有一条由中间结点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持</li>\n<li>电路交换的阶段\n<ol>\n<li>建立连接（呼叫 / 电路建立）</li>\n<li>通信（数据传输）</li>\n<li>释放连接（拆除电路）</li>\n</ol>\n</li>\n<li>特点：独占资源，用户始终占用端到端的固定传输带宽。适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。</li>\n<li>电路交换优点：\n<ol>\n<li>传输时延小</li>\n<li>数据顺序传送，无失序问题</li>\n<li>实时性强，双方一旦建立物理通路，便可以实时通信，适用于交互式会话类通信</li>\n<li>全双工通信，没有冲突，通信双方有不同的信道，不会争用物理信道</li>\n<li><strong>适用于模拟信号和数字信号</strong></li>\n<li>控制简单，电路的交换设备及控制较简单</li>\n</ol>\n</li>\n<li>电路交换缺点：\n<ol>\n<li>建立连接时间长</li>\n<li>线路独占，即使通信线路空闲，也不能供其他用户使用，信道使用效率低</li>\n<li>灵活性差，双方连接通路中的任何一点出了故障，必须重新拨号建立新连接，不适应突发性通信</li>\n<li>无数据存储能力，难以平滑通信量</li>\n<li>电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信</li>\n<li>无法发现与纠正传输差错，难以在通信过程中进行差错控制</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>报文交换</strong>（存储转发交换方式）</p>\n<ol>\n<li>报文 (message) 是网络中交换与传输的数据单元，即站点一次性要发送的数据块。报文包含了将要发送的完整的数据信息，其长短很不一致，长度不限且可变，报文包含信息和报头</li>\n<li>报文交换：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用存储转发方式</li>\n<li>过程特点：\n<ol>\n<li>每个节点收下整个报文后，暂存报文并检查有无错误</li>\n<li>当所需要的输出电路空闲时，利用路由信息找到下一个结点地址，传送给下一个结点</li>\n<li>在两个通信用户间的其他线路段，可传输其他用户的报文，不像电路交换那样必须占用端到端的全部信道</li>\n</ol>\n</li>\n<li>报文交换优点：\n<ol>\n<li>无需建立连接，无建立连接时延，用户可随时发送报文</li>\n<li>动态分配线路，动态选择报文通过的最佳路径，可以平滑通信量</li>\n<li>提高线路可靠性，某条传输路径发生故障，可重新选择另一条路径传输</li>\n<li>提高线路利用率，通信双方在不同的时间一段一段地部分占有这条物理通道，多个报文可共享信道</li>\n<li>提供多目标服务：一个报文可同时发往多个目的地址</li>\n<li>在存储转发中容易实现代码转换和速率匹配，甚至收发双方可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信</li>\n</ol>\n</li>\n<li>报文交换缺点：\n<ol>\n<li>实时性差，不适合传送实时或交互式业务的数据。数据进入交换结点后要经历存储转发过程，从而引起转发时延</li>\n<li><strong>只适用于数字信号</strong></li>\n<li>由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>分组交换</strong>（存储转发交换方式）</p>\n<ol>\n<li>\n<p>分组：大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块地发送，这种小块就称作分组（packet）。小数据块 + 控制信息（源和目的地址、编号）= 分组</p>\n</li>\n<li>\n<p>分组交换的原理：分组交换与报文交换的工作方式基本相同，都采用存储转发方式，形式上的主要差别在于，分组交换网中要限制所传输的数据单位的长度，一般选 128B。发送节点首先对从终端设备送来的数据报文进行接收、存储，而后将报文划分成一定长度的分组，并以分组为单位进行传输和交换。接收结点将收到的分组组装成信息或报文</p>\n</li>\n<li>\n<p>分组交换优点：</p>\n<ol>\n<li>无建立时延，无需为通信双方预先建立一条专用通信线路，用户可随时发送分组</li>\n<li>线路利用率高，通信双方在不同的时间一段一段地部分占有这条物理通道，多个分组可共享信道</li>\n<li>简化了存储管理。因为分组的长度固定，相应的缓冲区的大小也固定，在交换结点中存储器的管理通常被简化为对缓冲区的管理，相对比较容易</li>\n<li>加速传输，后一个分组的存储可以和前一个分组的转发并行操作；传输一个分组比一份报文所需缓冲区小，减少等待发送时间</li>\n<li>减少出错几率和重发数据量，提高可靠性，减少传输时延</li>\n<li>分组短小，适用于计算机之间突发式数据通信。</li>\n</ol>\n</li>\n<li>\n<p>分组交换缺点：</p>\n<ol>\n<li>尽管分组交换比报文交换的传输时延少，但仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力</li>\n<li>每个分组都要加控制信息，一定程度上降低了通信效率，增加了处理的时间</li>\n<li>当分组交换采用数据报服务时，可能出现失序、丢失或重复分组，分组到达目的结点时，要对分组按编号进行排序等工作，增加了麻烦。若采用虚电路服务，虽无失序问题，但有呼叫建立、数据传输和虚电路释放三个过程</li>\n</ol>\n</li>\n<li>\n<p>数据报方式</p>\n<ol>\n<li>数据报传输过程\n<ol>\n<li>源主机（A）将报文分成多个分组，依次发送到直接相连的结点（A）</li>\n<li>结点 A 收到分组后，对每个分组差错检测和路由选择，不同分组的下一跳结点可能不同</li>\n<li>结点 C 收到分组 P1 后，对分组 P1 进行差错检测，若正确则向 A 发送确认信息，A 收到 C 确认后则丢弃分组 P1 副本</li>\n<li>所有分组到家辽（主机 B）</li>\n</ol>\n</li>\n<li>数据报传输特点\n<ol>\n<li>数据报方式为网络层提供无连接服务。发送方可随时发送分组，网络中的结点可随时接收分组。无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同</li>\n<li>同一报文的不同分组达到目的结点时可能发生乱序、重复与丢失</li>\n<li>每个分组在传输过程中都必须携带源地址和目的地址，以及分组号</li>\n<li>分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延。当通过交换结点的通信量较大或网络发生拥塞时，这种时延会大大增加，交换结点还可根据情况丢弃部分分组</li>\n<li>网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于突发性通信，不适于长报文、会话式通信</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>虚电路方式</p>\n<ol>\n<li>\n<p>虚电路将数据报方式和电路交换方式结合，发挥两者优点</p>\n</li>\n<li>\n<p>虚电路：一条源主机到目的主机类似于电路的路径 (逻辑连接), 路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项记录了一个打开的虚电路的信息</p>\n</li>\n<li>\n<p>虚电路传输过程</p>\n<ol>\n<li>建立连接（虚电路建立）: 源主机发送 “呼叫请求” 分组并收到 “呼叫应答” 分组后才算建立连接</li>\n<li>数据传输：每个分组携带虚电路号，分组号、检验和等控制信息</li>\n<li>释放连接（虚电路释放）: 源主机发送 “释放请求” 分组以拆除虚电路</li>\n</ol>\n</li>\n<li>\n<p>虚电路传输特点</p>\n<ol>\n<li>虚电路方式为网络层提供连接服务。源节点与目的结点之间建立一条逻辑连接，而非实际物理连接。连接服务：首先为分组的传输确定传输路径（建立连接），然后沿该路径（连接）传输系列分组，系列分组传输路径相同，传输结束后拆除连接</li>\n<li>一次通信的所有分组都通过虚电路顺序传送，分组不需携带源地址、目的地址等信息，包含虚电路号，相对数据报方式开销小，同一报文的不同分组到达目的结点时不会乱序、重复或丢失</li>\n<li>分组通过虚电路上的每个节点时，节点只进行差错检测，不需进行路由选择</li>\n<li>每个节点可能与多个节点之间建立多条虚电路，每条虚电路支持特定的两个端系统之间的数据传输，可以对两个数据端点的流量进行控制，两个端系统之间也可以有多条虚电路为不同的进程服务</li>\n<li>致命弱点：当网络中的某个结点或某条链路出故障而彻底失效时，则所有经过该结点或该链路的虚电路将遭到破坏</li>\n</ol>\n</li>\n<li>\n<p>数据报与虚电路对比</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">数据报服务</th>\n<th style=\"text-align:center\">虚电路服务</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">连接的建立</td>\n<td style=\"text-align:center\">不要</td>\n<td style=\"text-align:center\">必须有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">目的地址</td>\n<td style=\"text-align:center\">每个分组都有完整的目的地址</td>\n<td style=\"text-align:center\">仅在建立连接阶段使用，之后每个分组使用长度较短的虚电路号</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">路由选择</td>\n<td style=\"text-align:center\">每个分组独立地进行路由选择和转发</td>\n<td style=\"text-align:center\">属于同一条虚电路的分组，按照同一路由转发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">分组顺序</td>\n<td style=\"text-align:center\">不保证分组的有序到达</td>\n<td style=\"text-align:center\">保证分组的有序到达</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">可靠性</td>\n<td style=\"text-align:center\">不保证可靠通信，可靠性由用户主机来保证</td>\n<td style=\"text-align:center\">可靠性由网络保证</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对网络故障的适应性</td>\n<td style=\"text-align:center\">出故障的节点丢失分组，其他分组路径选择发生变化，可正常传输</td>\n<td style=\"text-align:center\">所有经过故障节点的虚电路均不能正常工作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">差错处理和流量控制</td>\n<td style=\"text-align:center\">由用户主机进行流量控制，不保证数据报的可靠性</td>\n<td style=\"text-align:center\">可由分组交换网负责，也可由用户主机负责</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>数据交换方式的选择</p>\n<ol>\n<li>传送数据量大，且传送时间远大于呼叫时，<strong>选择电路交换</strong>。<strong>电路交换传输时延最小</strong></li>\n<li>当端到端的通路有很多段的链路组成时，采用<strong>分组交换传送数据</strong>较为合适</li>\n<li>从信道利用率上看，<strong>报文交换和分组交换优于电路交换</strong>，其中分组交换比报文交换的时延小，尤其<strong>适合于计算机之间的突发式的数据通信</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>重要公式</p>\n<ol>\n<li>\n<p>这两个公式使用的单位是 <code>Hz</code></p>\n</li>\n<li>\n<p>奈氏准则（奈奎斯特定理）</p>\n<ol>\n<li>在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为 2WBaud，W 是信道带宽，单位是 Hz</li>\n<li>在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能</li>\n<li>信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输</li>\n<li>奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制</li>\n<li>由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>奈氏准则</mtext><mspace linebreak=\"newline\"></mspace><mtext>理想低通信道下的极限数据传输率</mtext><mo>=</mo><mn>2</mn><mi>W</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>V</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>该式中</mtext><mi>W</mi><mtext>表示带宽</mtext><mo stretchy=\"false\">(</mo><mi>H</mi><mi>z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>V</mi><mtext>表示几种码元</mtext><mi mathvariant=\"normal\">/</mi><mtext>码元的离散电平数目</mtext></mrow><annotation encoding=\"application/x-tex\">奈氏准则\\\\理想低通信道下的极限数据传输率=2Wlog_2V(b/s)\\\\该式中W表示带宽(Hz),V表示几种码元/码元的离散电平数目\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">奈</span><span class=\"mord cjk_fallback\">氏</span><span class=\"mord cjk_fallback\">准</span><span class=\"mord cjk_fallback\">则</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">理</span><span class=\"mord cjk_fallback\">想</span><span class=\"mord cjk_fallback\">低</span><span class=\"mord cjk_fallback\">通</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">下</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">极</span><span class=\"mord cjk_fallback\">限</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">率</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">该</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">宽</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">几</span><span class=\"mord cjk_fallback\">种</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">元</span><span class=\"mord\">/</span><span class=\"mord cjk_fallback\">码</span><span class=\"mord cjk_fallback\">元</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">离</span><span class=\"mord cjk_fallback\">散</span><span class=\"mord cjk_fallback\">电</span><span class=\"mord cjk_fallback\">平</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">目</span></span></span></span></span></p>\n</li>\n<li>\n<p>香农定理</p>\n<ol>\n<li>噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比就很重要</li>\n<li>信噪比 = 信号的平均功率 / 噪声的平均功率，常记为 S/N, 并用分贝 (dB) 作为度量单位，<strong> 信噪比 (dB)=10log<sub>10</sub>(S/N) 数值等价</strong></li>\n<li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高</li>\n<li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了</li>\n<li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输</li>\n<li>香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少</li>\n<li>从香农定理可以看出，若信道带宽 W 或信噪比 S/N 没有上限（不可能），那么信道的极限信息传输速率也就没有上限。</li>\n<li>香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>香农定理</mtext><mspace linebreak=\"newline\"></mspace><mtext>信道的极限数据传输速率</mtext><mo>=</mo><mi>W</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mspace linebreak=\"newline\"></mspace><mtext>该式中</mtext><mi>W</mi><mtext>表示带宽</mtext><mo stretchy=\"false\">(</mo><mi>H</mi><mi>z</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>N</mi><mtext>表示信噪比，</mtext><mi>S</mi><mtext>是信道所穿信号的平均功率，</mtext><mi>N</mi><mtext>是信道内的高斯噪声功率</mtext></mrow><annotation encoding=\"application/x-tex\">香农定理\\\\信道的极限数据传输速率=Wlog_2(1+S/N)(b/s)\\\\该式中W表示带宽(Hz),S/N表示信噪比，S是信道所穿信号的平均功率，N是信道内的高斯噪声功率\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">香</span><span class=\"mord cjk_fallback\">农</span><span class=\"mord cjk_fallback\">定</span><span class=\"mord cjk_fallback\">理</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">极</span><span class=\"mord cjk_fallback\">限</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">据</span><span class=\"mord cjk_fallback\">传</span><span class=\"mord cjk_fallback\">输</span><span class=\"mord cjk_fallback\">速</span><span class=\"mord cjk_fallback\">率</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span></span><span class=\"mspace newline\"></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord cjk_fallback\">该</span><span class=\"mord cjk_fallback\">式</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">宽</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">示</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">噪</span><span class=\"mord cjk_fallback\">比</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">穿</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">平</span><span class=\"mord cjk_fallback\">均</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">率</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">信</span><span class=\"mord cjk_fallback\">道</span><span class=\"mord cjk_fallback\">内</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">高</span><span class=\"mord cjk_fallback\">斯</span><span class=\"mord cjk_fallback\">噪</span><span class=\"mord cjk_fallback\">声</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">率</span></span></span></span></span></p>\n</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"2传输介质\"><a class=\"markdownIt-Anchor\" href=\"#2传输介质\">#</a> 2. 传输介质</h6>\n<ol>\n<li>\n<p>传输介质也称传输媒体 / 传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路，<strong>传输媒体并不是物理层</strong>，传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为 0 层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思。但物理层规定了电气特性，因此能够识别所传送的比特流（<strong>物理层是傻瓜，传输媒体连傻瓜都不如</strong>）</p>\n</li>\n<li>\n<p>导向传输介质：电磁波被导向沿着固体媒介（铜线 / 光纤）传播</p>\n<ol>\n<li>\n<p>双绞线</p>\n<ol>\n<li>由两根采用一定规则并排绞合的、相互绝缘的铜导线组成，绞合可以减少对相邻导线的电磁干扰</li>\n<li>为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由金属丝编织成的屏蔽层，这就是屏蔽双绞线（STP），无屏蔽层的双绞线就称为非屏蔽双绞线（UTP）</li>\n<li>双绞线价格便宜，在局域网和传统电话网中普遍使用，模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里，距离太远时，对于模拟传输，要用放大器放大衰减的信号；对于数字传输，要用中继器将失真的信号整形</li>\n</ol>\n</li>\n<li>\n<p>同轴电缆</p>\n<ol>\n<li>由导体铜质芯线、绝缘层、网状编织屏蔽层和塑料外层构成</li>\n<li>按特性阻抗数值的不同分为两类：50Ω 同轴电缆和 75Ω 同轴电缆，50Ω 同轴电缆主要用于传送基带数字信号，又称为基带同轴电缆，它在局域网中得到广泛应用；75Ω 同轴电缆主要用于传送宽带信号，又称为宽带同轴电缆，它主要用于有线电视系统</li>\n</ol>\n</li>\n<li>\n<p>双绞线 VS 同轴电缆</p>\n<ol>\n<li>由于外导体屏蔽层的作用，<strong>同轴电缆</strong>抗干扰特性比双绞线好，被广泛用于传输较高速率的数据，其传输距离更远，但价格较双绞线贵</li>\n</ol>\n</li>\n<li>\n<p>光纤</p>\n<ol>\n<li>超低损耗，传送超远距离</li>\n<li>光纤通信就是利用光导纤维（简称光纤）传递光脉冲来进行通信，有光脉冲表示 1，无光脉冲表示 0</li>\n<li>可见光的频率大约是 108MHz，因此光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽</li>\n<li>光纤主要由纤芯 (实心的) 和包层构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率，当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角，如果入射角足够大，就会出现全反射，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去</li>\n<li>光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲；在接收端用光电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲</li>\n<li>光纤的特点\n<ol>\n<li>传输损耗小，中继距离长，对远距离传输特别经济</li>\n<li>抗雷电和电磁干扰性能好</li>\n<li>无串音干扰，保密性好，也不易被窃听或截取数据</li>\n<li>体积小，重量轻</li>\n</ol>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>定义</th>\n<th>光源</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单模光纤</td>\n<td>一种在横向模式直接传输光信号的光纤</td>\n<td>定向性很好的激光二极管</td>\n<td>衰耗小，适合远距离传输</td>\n</tr>\n<tr>\n<td>多模光纤</td>\n<td>有多种传输光信号模式的光纤</td>\n<td>发光二极管</td>\n<td>易失真，适合近距离传输</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>非导向传输介质 ：自由空间，介质可以是空气、真空、海水</p>\n<ol>\n<li>\n<p>无线电波</p>\n<ol>\n<li>较强穿透能力，可传远距离，广泛用于通信领域（如手机通信）</li>\n<li>特点：信号向所有方向传播</li>\n</ol>\n</li>\n<li>\n<p>微波</p>\n<ol>\n<li>微波通信频率较高、频段范围宽，因此数据率很高</li>\n<li>特点：信号固定方向传播</li>\n<li>具体应用\n<ol>\n<li>地面微波接力通信</li>\n<li>卫星通信\n<ol>\n<li>优点：通信容量大、距离远、覆盖广、广播通信和多址通信</li>\n<li>缺点：传播时延长（250-270ms）、受气候影响大（强风太阳黑子爆发、日凌）、误码率较高、成本高</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>红外线、激光</p>\n<ol>\n<li>把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空间中传播</li>\n<li>特点：信号固定方向传播</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h6 id=\"3物理层设备\"><a class=\"markdownIt-Anchor\" href=\"#3物理层设备\">#</a> 3. 物理层设备</h6>\n<ol>\n<li>\n<p>中继器：再生数字信号</p>\n<ol>\n<li>诞生原因：对信号进行<strong>再生和还原</strong>，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度</li>\n<li>对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度</li>\n<li>中继器两端：两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同。两端可连相同媒体，也可连不同媒体。中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据。<strong>中继器两端的网段一定要是同一个协议</strong>（中继器不会存储转发，傻）</li>\n<li>5-4-3 规则：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障\n<ol>\n<li>5 个网段、4 个中继器或集线器（网络设备）、3 个计算机</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>集线器：再生，放大信号，多口中继器</p>\n<ol>\n<li>对信号进行再生放大转发，对衰减的信号进行放大，接着转发到其他所有（除输入端口外）处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备</li>\n</ol>\n</li>\n</ol>\n<!-- #### 3.数据链路层\n\n#### 4.网络层\n\n#### 5.传输层\n\n#### 6.应用层 -->",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "http://example.com/2020/03/07/6003_Vue/",
            "url": "http://example.com/2020/03/07/6003_Vue/",
            "title": "Vue",
            "date_published": "2020-03-07T02:36:25.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"插值操作\"><a class=\"markdownIt-Anchor\" href=\"#插值操作\">#</a> 插值操作</h5>\n<ol>\n<li><code>Mustache语法 &#123;&#123;&#125;&#125;</code>  双大括号（胡子 / 胡须）</li>\n<li>Mustache 语法中可以是<strong>变量和简单的表达式</strong></li>\n<li>插值操作–相关指令\n<ol>\n<li>\n<p><code>v-once</code>  表示元素和组件只渲染一次，不会随着数据的改变而改变（无响应）</p>\n</li>\n<li>\n<p><code>v-html</code>  该指令后面跟上一个 string 类型，会将 string 的 html 解析出来并且进行渲染</p>\n</li>\n<li>\n<p><code>v-text</code>   使用较少，因为存在覆盖原有元素</p>\n</li>\n<li>\n<p><code>v-pre</code>     用于跳过这个元素和它的子元素的编译过程，用于显示原本的 Mustache 语法</p>\n</li>\n<li>\n<p><code>v-cloak</code>   在某些情况下，我们浏览器可能会显示出未编译的 Mustache 标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">  <span class=\"hljs-selector-attr\">[cloak]</span>&#123;</span><br><span class=\"language-css\">    <span class=\"hljs-attribute\">display</span>: none;</span><br><span class=\"language-css\">  &#125;</span><br><span class=\"language-css\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-once 无法修改--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-html 解析并加载HTML标签--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-text 作用与双括号相同，但会覆盖标签里原文本值--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;&#123;test&#125;&#125;真好玩哈<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 把标签里面原有的文本进行覆盖只显示&#x27;学习编程&#x27; --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">v-text</span>=<span class=\"hljs-string\">&quot;test&quot;</span>&gt;</span>真好玩哈<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-pre 保持原格式不进行解析--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">v-pre</span>&gt;</span>&#123;&#123;test&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-cloak --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 在Vue解析前h3存在cloak属性,Vue解析后该属性就自动没有 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">v-cloak</span>&gt;</span>简单测试<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>简单测试<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;测试v-once命令&quot;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">url</span>:<span class=\"hljs-string\">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;&#x27;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">test</span>:<span class=\"hljs-string\">&quot;学习编程&quot;</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h5 id=\"v-bind或\"><a class=\"markdownIt-Anchor\" href=\"#v-bind或\">#</a>  <code>v-bind</code>  或 <code>:</code></h5>\n<ol>\n<li>\n<p><code>v-bind</code>  基本使用</p>\n<ol>\n<li>作用：动态绑定属性</li>\n<li>缩写： <code>:</code></li>\n<li>预期：任意参数或对象</li>\n<li>用法:</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">:src</span>=<span class=\"hljs-string\">&quot;imgSrc&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;aHref&quot;</span>&gt;</span>百度一下<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">imgSrc</span>:<span class=\"hljs-string\">&quot;https://imgcps.jd.com/ling4/12842874/5Lqs6YCJ5aW96LSn/5L2g5YC85b6X5oul5pyJ/p-5bd8253082acdd181d02fa42/4e121a9f/cr/s/q.jpg&quot;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">aHref</span>:<span class=\"hljs-string\">&quot;http://www.baidu.com&quot;</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>属性绑定 (数组语法和对象语法的区别？作用？)</p>\n<ol>\n<li>对象语法</li>\n<li>数组语法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 对象语法 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;h3 :class=&quot;&#123;active:IsActive,line:IsLine&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h3&gt; --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">&quot;getClasses()&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 数组语法 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;h3 class=&quot;test&quot; :class=&quot;[active,line]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h3&gt; --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;red&quot;</span>&gt;</span>修改颜色为red<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;bule&quot;</span>&gt;</span>修改颜色为bule<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Hello Vue.js&quot;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-title class_\">IsActive</span>:<span class=\"hljs-literal\">false</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-title class_\">IsLine</span>:<span class=\"hljs-literal\">false</span></span><br><span class=\"language-javascript\">      &#125;,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">red</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsLine</span> = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsActive</span> = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;red&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">bule</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsActive</span> = <span class=\"hljs-literal\">false</span>;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsLine</span> = <span class=\"hljs-literal\">true</span>;</span><br><span class=\"language-javascript\">          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;bule&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">getClasses</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">          <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">active</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsActive</span>,<span class=\"hljs-attr\">line</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">IsLine</span>&#125;;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>style 绑定</p>\n<ol>\n<li>对象语法</li>\n<li>数组语法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 对象语法 --&gt;</span>\t<br>    <span class=\"hljs-comment\">&lt;!-- &lt;h2 :style=&quot;&#123;fontSize:finalSize+&#x27;px&#x27;,backgroundColor:finalColor&#125;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">:style</span>=<span class=\"hljs-string\">getStyle()</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 数组语法 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;h2 :style=&quot;[baseStyle,baseStyle1]&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;您好&quot;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">finalSize</span>:<span class=\"hljs-number\">100</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">finalColor</span>:<span class=\"hljs-string\">&#x27;red&#x27;</span>,</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">// baseStyle:&#123;fontSize:100+&#x27;px&#x27;&#125;,</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">// baseStyle1:&#123;backgroundColor:&#x27;red&#x27;&#125;</span></span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">      , </span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-attr\">getStyle</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">          <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">fontSize</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">finalSize</span>+<span class=\"hljs-string\">&#x27;px&#x27;</span>,<span class=\"hljs-attr\">backgroundColor</span>:<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">finalColor</span>&#125;</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">      &#125;</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\">  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://example.com/2020/03/02/6002_Vue/",
            "url": "http://example.com/2020/03/02/6002_Vue/",
            "title": "Vue",
            "date_published": "2020-03-02T01:02:05.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"1-安装四种安装方式\"><a class=\"markdownIt-Anchor\" href=\"#1-安装四种安装方式\">#</a> 1. 安装（四种安装方式）</h5>\n<ol>\n<li>\n<p>在页面上以 <code>CDN包</code> 的形式导入 (CDN 是什么？？？)</p>\n<ol>\n<li>开发环境版本</li>\n<li>生产环境版本</li>\n</ol>\n</li>\n<li>\n<p>下载和引入 <code>JavaScript文件</code> 自行托管</p>\n<ol>\n<li>开发环境版本</li>\n<li>生产环境版本</li>\n</ol>\n</li>\n<li>\n<p>使用 <code>npm</code>  安装（结合 <code>webpack</code>  和 <code>CLI</code>  的使用）</p>\n</li>\n<li>\n<p>使用 <code>官方的CLI</code>  搭建项目</p>\n<p>** 附加：MVVM 模式（ <code>Model ViewModel View</code>  ）** 维基百科查询</p>\n<ol>\n<li><code>View视图层</code>\n<ol>\n<li>向用户展示的界面</li>\n</ol>\n</li>\n<li><code>Model数据层</code>\n<ol>\n<li>一些死数据或者从服务器请求下来的数据</li>\n</ol>\n</li>\n<li><code>ViewModel视图模型层</code>\n<ol>\n<li>数据绑定：将 Model 的数据改变实时修改展示到 View</li>\n<li>视图监听：将 DOM 发生一些事件实时修改到 Model 层的 Data 中</li>\n</ol>\n</li>\n</ol>\n<p>![截屏 2022-04-08 下午 10.32.41](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-04-08 下午 10.32.41.png)</p>\n</li>\n</ol>\n<h5 id=\"3-vue中options选项\"><a class=\"markdownIt-Anchor\" href=\"#3-vue中options选项\">#</a> 3. Vue 中 options 选项</h5>\n<ol>\n<li>\n<p><code>el</code></p>\n<ol>\n<li>类型： <code>String</code>  或 <code>DOM元素</code></li>\n<li>作用：挂载 Vue 实例管理的 DOM 元素</li>\n</ol>\n</li>\n<li>\n<p><code>data</code></p>\n<ol>\n<li>类型： <code>Object</code>  或 <code>Function(组件当中data必须是一个函数)</code></li>\n<li>作用：Vue 实例对应的数据对象</li>\n</ol>\n</li>\n<li>\n<p><code>methods</code></p>\n<ol>\n<li>类型： <code>&#123;[key:sting]:Function&#125;</code></li>\n<li>作用：定义属于 Vue 的一些方法，可以在其他地方调用，可以在指令中使用</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">1.Vue初体验<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>   <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 开发范式有两种:</span></span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 1.命令式范式</span></span><br><span class=\"language-javascript\">  <span class=\"hljs-comment\">// 2.声明式范式(Vue属于声明式范式开发)</span></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;Hello,Vue.js !&quot;</span>,</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;初学者&quot;</span></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>2.Vue列表<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot;item in message&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">message</span>:[<span class=\"hljs-string\">&quot;test_01&quot;</span>,<span class=\"hljs-string\">&quot;test_02&quot;</span>,<span class=\"hljs-string\">&quot;test_03&quot;</span>,<span class=\"hljs-string\">&quot;test_04&quot;</span>]</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br>3.Vue计数器<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;button v-on:click=&quot;counter++&quot;&gt;+&lt;/button&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- &lt;button v-on:click=&quot;counter--&quot;&gt;-&lt;/button&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- v-on的语法糖为@ --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;add&quot;</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">v-on:click</span>=<span class=\"hljs-string\">&quot;sub&quot;</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"> </span><br><span class=\"language-javascript\">  <span class=\"hljs-keyword\">var</span> app = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>(&#123;</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">el</span>:<span class=\"hljs-string\">&quot;#app&quot;</span>,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">data</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">counter</span>:<span class=\"hljs-number\">0</span></span><br><span class=\"language-javascript\">    &#125;,</span><br><span class=\"language-javascript\">    <span class=\"hljs-attr\">methods</span>:&#123;</span><br><span class=\"language-javascript\">      <span class=\"hljs-attr\">add</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>++;</span><br><span class=\"language-javascript\">        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;自加一次&quot;</span>);</span><br><span class=\"language-javascript\">      &#125;,</span><br><span class=\"language-javascript\">       <span class=\"hljs-attr\">sub</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">         <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">counter</span>--;</span><br><span class=\"language-javascript\">         <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;自减一次&quot;</span>);</span><br><span class=\"language-javascript\">       &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\">  &#125;);</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>附加：方法 (method) 和函数 (Function) 的区别</strong></p>\n<ol>\n<li>\n<p>一般实例对象里面的称为方法</p>\n</li>\n<li>\n<p>Vue 实例属性和方法，都有 <code>$</code>  前缀，便于和用户定义的属性区别开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vue\">//$watch是一个实例方法<br>vm.$watch(&#x27;a&#x27;,function(newValue,oldValue)&#123;<br>\t这个回调将在vm.a改变后调用<br>//观察变量a的变化前后<br>&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://example.com/2020/02/27/6001_Vue/",
            "url": "http://example.com/2020/02/27/6001_Vue/",
            "title": "Vue",
            "date_published": "2020-02-27T07:32:05.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"vue生命周期的理解\"><a class=\"markdownIt-Anchor\" href=\"#vue生命周期的理解\">#</a> Vue 生命周期的理解</h5>\n<p>每个 <code>Vue</code>  实例在创建时都会经过一系列的初始化过程， <code>vue</code>  的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件</p>\n<ul>\n<li><code>create阶段</code> ：vue 实例被创建<br>\n <code>beforeCreate</code> : 最初调用触发，创建前，此时 data 和 methods 中的数据都还没有初始化，data 和 events 都不能用<br>\n <code>created</code> ： 创建完毕，data 中有值，未挂载，data 和 events 已经初始化好，data 已经具有响应式；在这里可以发送请求</li>\n<li><code>mount阶段</code> ： vue 实例被挂载到真实 DOM 节点<br>\n <code>beforeMount</code> ：在模版编译之后，渲染之前触发，可以发起服务端请求，去数据，ssr 中不可用，基本用不上这个 hook<br>\n <code>mounted</code> : 在渲染之后触发，此时可以操作 DOM，并能访问组件中的 DOM 以及 $ref,SSR 中不可用</li>\n<li><code>update阶段</code> ：当 vue 实例里面的 data 数据变化时，触发组件的重新渲染<br>\n <code>beforeUpdate</code>  : 更新前，在数据变化后，模版改变前触发，切勿使用它监听数据变化<br>\n <code>updated</code> ：更新后，在数据改变后，模版改变后触发，常用于重渲染案后的打点，性能检测或触发 vue 组件中非 vue 组件的更新</li>\n<li><code>destroy阶段</code> ：vue 实例被销毁<br>\n <code>beforeDestroy</code> ：实例被销毁前，组件卸载前触发，此时可以手动销毁一些方法，可以在此时清理事件、计时器或者取消订阅操作<br>\n <code>destroyed</code> : 卸载完毕后触发，销毁后，可以做最后的打点或事件触发操作</li>\n</ul>\n<h5 id=\"组件生命周期\"><a class=\"markdownIt-Anchor\" href=\"#组件生命周期\">#</a> 组件生命周期</h5>\n<blockquote>\n<p>生命周期（父子组件） 父组件 beforeCreate --&gt; 父组件 created --&gt; 父组件 beforeMount --&gt; 子组件 beforeCreate --&gt; 子组件 created --&gt; 子组件 beforeMount --&gt; 子组件 mounted --&gt; 父组件 mounted --&gt; 父组件 beforeUpdate --&gt; 子组件 beforeDestroy–&gt; 子组件 destroyed --&gt; 父组件 updated</p>\n</blockquote>\n<p><strong>加载渲染过程</strong> 父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount-&gt; 子 mounted-&gt; 父 mounted</p>\n<p><strong>挂载阶段</strong> 父 created-&gt; 子 created-&gt; 子 mounted-&gt; 父 mounted</p>\n<p><strong>父组件更新阶段</strong> 父 beforeUpdate-&gt; 父 updated</p>\n<p><strong>子组件更新阶段</strong> 父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</p>\n<p><strong>销毁阶段</strong> 父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</p>\n<h5 id=\"vue的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#vue的生命周期\">#</a> Vue 的生命周期</h5>\n<ol>\n<li>\n<p>生命周期：从创建到销毁的过程</p>\n</li>\n<li>\n<p>生命周期函数内不能使用箭头函数，因为箭头函数没有 <code>this</code> , 生命周期中要进行应用</p>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span><span class=\"token string\">\"vue.js\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>object<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function-variable function\">beforeCreate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function-variable function\">created</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"created\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function-variable function\">beforeMount</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeMount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function-variable function\">mounted</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mounted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function-variable function\">beforeUpdate</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beforeUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function-variable function\">updated</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"updated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">\"chagege ......\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://example.com/2019/02/12/1002_Git/",
            "url": "http://example.com/2019/02/12/1002_Git/",
            "title": "Git常用命令",
            "date_published": "2019-02-12T02:14:10.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"11-查看提交历史\"><a class=\"markdownIt-Anchor\" href=\"#11-查看提交历史\">#</a> 11、查看提交历史；</h3>\n<p>git reflog<br>\ngit 仓库组成：<br>\nWorkspace：开发者工作区，也就是你当前写代码的目录，它一般保持的是最新仓库代码。<br>\nIndex / Stage：缓存区，最早叫 Stage，现在新版本已经改成 index，位于.git 目录中，它用来存放临时动作，比如我们做了 git add 或者 git rm，都是把文件提交到缓存区，这是可以撤销的，然后在通过 git commit 将缓存区的内容提交到本地仓库<br>\n Repository：仓库区，是仓库代码，你所有的提交都在这里，git 会保存好每一个历史版本，存放在仓库区，它可以是服务端的也可以是本地的，因为在分布式中，任何人都可以是主仓库。<br>\nRemote：远程仓库，只能是别的电脑上的仓库，即服务器仓库。</p>\n<h3 id=\"12-创建分支\"><a class=\"markdownIt-Anchor\" href=\"#12-创建分支\">#</a> 12、创建分支；</h3>\n<p>git checkout -b 分支名<br>\n等价于<br>\n git branch 分支名<br>\n git checkout 分支名</p>\n<h3 id=\"13-查看当前分支\"><a class=\"markdownIt-Anchor\" href=\"#13-查看当前分支\">#</a> 13、查看当前分支；</h3>\n<p>git branch</p>\n<h3 id=\"14-切换分支\"><a class=\"markdownIt-Anchor\" href=\"#14-切换分支\">#</a> 14、切换分支；</h3>\n<p>git checkout</p>\n<h3 id=\"15-合并分支\"><a class=\"markdownIt-Anchor\" href=\"#15-合并分支\">#</a> 15、合并分支；</h3>\n<p>git merge 分支名</p>\n<h3 id=\"16-查看当前所有分支\"><a class=\"markdownIt-Anchor\" href=\"#16-查看当前所有分支\">#</a> 16、查看当前所有分支；</h3>\n<p>git branch -a</p>\n<h3 id=\"17-删除本地分支\"><a class=\"markdownIt-Anchor\" href=\"#17-删除本地分支\">#</a> 17、删除本地分支；</h3>\n<p>git branch -D 分支名</p>\n<h3 id=\"18-删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#18-删除远程分支\">#</a> 18、删除远程分支；</h3>\n<p>git push origin --delete 分支名</p>\n<h3 id=\"19-本地仓库与远程仓库关联\"><a class=\"markdownIt-Anchor\" href=\"#19-本地仓库与远程仓库关联\">#</a> 19、本地仓库与远程仓库关联；</h3>\n<p>git remote add origin 仓库地址</p>\n<h3 id=\"20-推送到远程\"><a class=\"markdownIt-Anchor\" href=\"#20-推送到远程\">#</a> 20、推送到远程；</h3>\n<p>git push -u origin 分支仓库名</p>\n<h3 id=\"20-查看本地分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地分支\">#</a> 20、查看本地分支；</h3>\n<p>git branch</p>\n<h3 id=\"20-查看本地和远程仓库的所有分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地和远程仓库的所有分支\">#</a> 20、查看本地和远程仓库的所有分支；</h3>\n<p>git branch -a</p>\n<h3 id=\"20-查看远程仓库的分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看远程仓库的分支\">#</a> 20、查看远程仓库的分支</h3>\n<p>git branch -r</p>\n<h3 id=\"20-查看本地库已经关联的远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地库已经关联的远程仓库\">#</a> 20、查看本地库已经关联的远程仓库</h3>\n<p>git remote -v</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://example.com/2019/02/11/1001_Git/",
            "url": "http://example.com/2019/02/11/1001_Git/",
            "title": "Git常用命令",
            "date_published": "2019-02-11T11:52:20.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"1-全局配置git环境\"><a class=\"markdownIt-Anchor\" href=\"#1-全局配置git环境\">#</a> 1、全局配置 git 环境；</h3>\n<p>git config --global <a href=\"http://user.name\">user.name</a> “用户名”<br>\ngit config --global user.email “邮箱”<br>\n 基本命令：<br>\nmkdir 文件夹名；创建文件夹<br>\n cd 文件夹名；进入文件夹<br>\n ls；查看文件目录<br>\n ls -sh；查看全部文件目录包含隐藏目录</p>\n<h3 id=\"2-初始化git仓库\"><a class=\"markdownIt-Anchor\" href=\"#2-初始化git仓库\">#</a> 2、初始化 git 仓库；</h3>\n<p>git init</p>\n<h3 id=\"3-将本地工作区的文件添加到本地版本库的提交缓存中\"><a class=\"markdownIt-Anchor\" href=\"#3-将本地工作区的文件添加到本地版本库的提交缓存中\">#</a> 3、将本地工作区的文件添加到本地版本库的提交缓存中；</h3>\n<p>git add .</p>\n<h3 id=\"4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id\"><a class=\"markdownIt-Anchor\" href=\"#4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id\">#</a> 4、将本地版本库提交缓存 stage 中的文件提交到本地版本库 master 中；生成 40 位哈希值，作为 id，</h3>\n<p>git commit -m “提交信息”</p>\n<!-- 修改提交信息命令 ，编辑后command+x退出编辑界面-->\n<p>git commit -amend</p>\n<h3 id=\"5-查看历史提交日志加上prettyoneline选项简洁输出\"><a class=\"markdownIt-Anchor\" href=\"#5-查看历史提交日志加上prettyoneline选项简洁输出\">#</a> 5、查看历史提交日志，加上–pretty=oneline 选项简洁输出；</h3>\n<p>git log<br>\nHEAD-&gt;master: 指本次提交到 master 仓库</p>\n<h3 id=\"6-回滚代码仓库\"><a class=\"markdownIt-Anchor\" href=\"#6-回滚代码仓库\">#</a> 6、回滚代码仓库；</h3>\n<p>git reset --hard</p>\n<!-- 存在三种模式 -->???\n<p>–soft 、–mixed 以及–hard 是三个恢复等级<br>\n使用–soft 就仅仅将头指针恢复，已经 add 的暂存区以及工作空间的所有东西都不变。<br>\n如果使用–mixed，就将头恢复掉，已经 add 的暂存区也会丢失掉，工作空间的代码什么的是不变的。<br>\n如果使用–hard，那么一切就全都恢复了，头变，aad 的暂存区消失，代码什么的也恢复到以前状态<br>\n git reset --hard HEAD^<br>\ngit reset --hard HEAD~3</p>\n<h3 id=\"7-查看当前仓库状态\"><a class=\"markdownIt-Anchor\" href=\"#7-查看当前仓库状态\">#</a> 7、查看当前仓库状态；</h3>\n<p>git status<br>\n 英文对应：<br>\nA：未修改<br>\n AM：修改<br>\n Untracked：未提交<br>\n modified：新文件，但未提交</p>\n<!-- 工作区与缓存区 -->\n<p>工作区：当前目录<br>\n缓存区：使用 git add 命令提交的文件信息，位于.git 目录下 index 文件中<br>\n git add . 与 git add --all 区别<br>\n这个命令会将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区。<br>\n这个命令还会把删除的文件也提交进去<br>\n如你在本地删除了 min.c 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的 min.c 也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件，如果不想删除文件，可以使用 git add .，注意后面有一个 “.” 点的符号，这个命令跟 git add --all 一样，但是不会记录删除操作</p>\n<h3 id=\"8-将文件撤销回到最近一次修改的状态\"><a class=\"markdownIt-Anchor\" href=\"#8-将文件撤销回到最近一次修改的状态\">#</a> 8、将文件撤销回到最近一次修改的状态；</h3>\n<p>git checkout – file 回到了之前修改的状态</p>\n<h3 id=\"9-查看单个文件可回滚版本\"><a class=\"markdownIt-Anchor\" href=\"#9-查看单个文件可回滚版本\">#</a> 9、查看单个文件可回滚版本；</h3>\n<p>git log filename</p>\n<h3 id=\"10-删除文件\"><a class=\"markdownIt-Anchor\" href=\"#10-删除文件\">#</a> 10、删除文件；</h3>\n<p>git rm 文件名</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "http://example.com/2019/01/13/4000_JavaScript/",
            "url": "http://example.com/2019/01/13/4000_JavaScript/",
            "title": "JavaScript",
            "date_published": "2019-01-13T06:12:03.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h2 id=\"1javascript介绍\"><a class=\"markdownIt-Anchor\" href=\"#1javascript介绍\">#</a> 1.JavaScript 介绍</h2>\n<h3 id=\"1javascript应用\"><a class=\"markdownIt-Anchor\" href=\"#1javascript应用\">#</a> 1.JavaScript 应用</h3>\n<ol>\n<li>web 端开发</li>\n<li>移动端开发</li>\n<li>小程序端开发</li>\n<li>桌面应用开发</li>\n<li>后端开发</li>\n</ol>\n<h2 id=\"2javascript运行环境\"><a class=\"markdownIt-Anchor\" href=\"#2javascript运行环境\">#</a> 2.JavaScript 运行环境</h2>\n<h3 id=\"1浏览器工作原理\"><a class=\"markdownIt-Anchor\" href=\"#1浏览器工作原理\">#</a> 1. 浏览器工作原理</h3>\n<ol>\n<li>\n<p>浏览器内核</p>\n<ol>\n<li>Gecko：早期被 Netscape 和 Mozilla、Firefox 浏览器使用，代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能</li>\n<li>Trident：微软开发的一种排版引擎，被 IE4~IE11 浏览器使用，但是 Edge 浏览器已经转向 Blink</li>\n<li>Webkit：苹果基于 KHTML 开发、开源的，用于 Safari 浏览器，Google Chrome 之前也在使用</li>\n<li>Blink：Google 谷歌基于 webkit 内核开发的，目前应用于 Google Chrome、Edge、Opera 等</li>\n<li>Presto:Opera 浏览器曾经使用过，特点是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性</li>\n<li>内核也称排班引擎、浏览器引擎、页面渲染引擎、样板引擎</li>\n</ol>\n</li>\n<li>\n<p>内核工作原理</p>\n<ol>\n<li>浏览器渲染过程，需要将 JavaScript 代码转换为机器语言后交给 CPU 执行<img src=\"../../all_photo/image-20220602085625470.png\" alt=\"image-20220602085625470\"></li>\n</ol>\n</li>\n<li>\n<p><code>Webkit浏览器</code> 内核，由 WebCore 与 JavaScriptCore 两部分组成</p>\n<ol>\n<li>WebCore：负责 HTML、CSS 解析、布局、渲染等相关工作</li>\n<li>JavaScriptCore：解析、执行 JavaScript 代码</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2v8引擎工作原理\"><a class=\"markdownIt-Anchor\" href=\"#2v8引擎工作原理\">#</a> 2.V8 引擎工作原理</h3>\n<ol>\n<li>\n<p>JavaScript 引擎（V8 引擎是 Google 开发）</p>\n<ol>\n<li>SpiderMonkey：第一款 JavaScript 引擎，由 BrendanEich 开发（也就是 JavaScript 作者）</li>\n<li>Chakra：微软开发，用于 IT 浏览器</li>\n<li>JavaScriptCore：WebKit 中的 JavaScript 引擎，Apple 公司开发</li>\n<li>V8 引擎：Google 开发的强大 JavaScript 引擎，也帮助 Chrome 从众多浏览器中脱颖而出</li>\n</ol>\n</li>\n<li>\n<p>V8 引擎工作原理</p>\n<ol>\n<li>\n<p>V8 定义：C<ins> 编写的 Google 开源高性能 JavaScript 和 webAssembly 引擎，它用于 Chrome 和 Node.js，在很多环境及平台下可以运行，也可以单独运行，也可以嵌入 C</ins> 应用程序中运行</p>\n</li>\n<li>\n<p>Parse：转换器，Parse 模块会将 JavaScript 代码转换成 AST (抽象语法树), 这是因为解释器并不直接认识 JavaScript 代码，如果函数没有被调用，那么是不会被转换成 AST (词法分析: <code>Scanner</code>  转换生成多个 tokens:[{type:‘keyword’,value:‘const’}] 等、语法分析、)</p>\n<blockquote>\n<p>注意:js 代码转换为 AST 抽象语法树网站 (<a href=\"https://astexplorer.net/\">https://astexplorer.net/</a>)</p>\n</blockquote>\n</li>\n<li>\n<p>lgnition：解释器，会将 AST 转换成 ByteCode（字节码）, 因为编写代码运行在具体什么样环境并不清楚，所以需要将该代码转换为字节码，字节码可以运行在各个环境，同时会收集 TurboFan 优化所需要的信息 (比如函数参数的类型信息，有了类型才能进行真实的运算), 如果函数只调用一次，Ignition 会解释执行字节码 ByteCode</p>\n</li>\n<li>\n<p>TurboFan：编译器，可以将字节码编译为 CPU 可以直接执行的机器码；如果一个函数被多次调用，那么就会被标记为 <code>热点函数</code> ，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能；但是机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的经过 <code>Deoptimization</code>  优化转换成字节码，继续进行执行 (从这一点也可以看出 typescript 代码运行效率会好一些，因为在编写时就已经确定参数的类型，减少了逆向转换为字节码再一次进行运行编译为汇编语言然后机器代码，越过这个过程就会快一些)</p>\n</li>\n<li>\n<p>Orinoco：垃圾回收，将程序中不需要的内存回收？？？</p>\n</li>\n<li>\n<p>执行原理过程</p>\n<p><img src=\"../../all_photo/image-20220704154715013.png\" alt=\"image-20220704154715013\"></p>\n</li>\n<li>\n<p>官方执行原理过程</p>\n<p><img src=\"../../all_photo/image-20220704160009294.png\" alt=\"image-20220704160009294\"></p>\n</li>\n<li>\n<p>JavaScript 源码解析过程</p>\n<ol>\n<li>Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换</li>\n<li>Scanner 会进行词法分析（lexical analysis），词法分析会将代码转换成各种 tokens</li>\n<li>接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser\n<ol>\n<li>Parser 就是直接将 tokens 转成 AST 树架构</li>\n<li>PreParser 称之为预解析\n<ol>\n<li>因为并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会影响网页的运行效率</li>\n<li>所以 V8 引擎就实现了 Lazy Parsing（延迟解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对<strong>函数的全量解析</strong>是在<strong>函数被调用时</strong>才会进行</li>\n<li>比如我们在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析，生成 AST 树后，会被 Ignition 转成字节码（bytecode）, 之后的过程就是代码的执行过程（后续会详细分析）</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>JavaScript 源码执行具体操作</p>\n<ol>\n<li>初始化全局对象\n<ol>\n<li>js 引擎会在执行代码之前，会在堆内存中创建一个全局对象：Global Object（GO）</li>\n<li>该对象所有的作用域（scope）都可以访问，里面会包含 Date、Array、String、Number、setTimeout、setInterval 等等，其中有一个 window 属性指向自己</li>\n</ol>\n</li>\n<li>执行上下文栈 (调用栈)\n<ol>\n<li>js 引擎内部有一个执行上下文栈 (Execution Context Stack, 简称 ECS), 它是用于执行代码的调用栈</li>\n<li>该栈执行的是全局代码块，全局的代码块为了执行会构建一个 Global Execution Context (GEC: 全局执行上下文),GEC 会被放入到 ECS 中执行</li>\n<li>GEC 被放入到 ECS 中里面包含两部分内容\n<ol>\n<li>在代码执行前，在 parser 转成 AST 的过程中，会将全局定义的变量、函数等加入到 GlobalObject 中，但是并不会赋值，这个过程也称之为变量的作用域提升（hoisting）</li>\n<li>在代码执行中，对变量赋值，或者执行其他的函数</li>\n</ol>\n</li>\n<li>在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（Functional Execution Context，简称 FEC），并且压入到 EC Stack 中</li>\n<li>FEC 中包含三部分内容\n<ol>\n<li>在解析函数成为 AST 树结构时，会创建一个 Activation Object (AO):AO 中包含形参、arguments、函数定义和指向函数对象、定义的变量（<strong>VO:AO</strong>）</li>\n<li>作用域链：由 VO（在函数中就是 AO 对象）和父级 VO 组成，查找时会一层层查找</li>\n<li>this 绑定的值：根据不同的情况绑定 this</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>变量环境和记录 ( <code>作用域链考点</code> )\n<ol>\n<li>概念\n<ol>\n<li>VO：全局变量对象，创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中</li>\n<li>GO：全局对象，进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问 (全局)</li>\n<li>AO：私有变量对象 (函数即将被执行，还没有还执行)，进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问 (局部)</li>\n<li>GEC (global excution context) 全局执行上下文：执行全局代码，FEC (function excution context) 函数执行上下文：执行函数代码</li>\n<li><strong>函数的作用域与函数定义位置有关，与调用位置无关</strong></li>\n</ol>\n</li>\n<li>早期 ECMA 版本规范：每一个执行上下文被关联到一个变量对象 (variable,VO), 在源代码中的变量和函数声明会被作为属性添加到 VO 中，对于函数来说，参数也会被添加到 VO 中</li>\n<li>在最新的 ECMA 的版本规范中，已经修改不称作 VO、GO、AO 等，而是称为变量环境，每添加的变量、函数叫作环境记录。每一个执行上下文会关联到一个 <code>变量环境</code>  (VariableEnvironment 简称 VE) 中，在执行代码中变量和函数的声明会作为 <code>环境记录</code>  (Environment Record) 添加到变量环境中，对于函数来说，参数也会被作为环境记录添加到变量环境中</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"3javascript内存原理\"><a class=\"markdownIt-Anchor\" href=\"#3javascript内存原理\">#</a> 3.JavaScript 内存原理</h3>\n<ol>\n<li>内存管理\n<ol>\n<li>内存的管理有如下的生命周期\n<ol>\n<li>分配所申请的内存空间</li>\n<li>使用所分配的内存空间</li>\n<li>不使用时进行释放</li>\n</ol>\n</li>\n<li>管理内存的方式\n<ol>\n<li>手动管理内存：C、C++</li>\n<li>自动管理内存：Java、JavaScript、python、Swift、Dart</li>\n</ol>\n</li>\n<li>内存分配\n<ol>\n<li>JS 对于基本数据类型内存的分配会在执行时，直接在栈空间进行分配</li>\n<li>对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用</li>\n</ol>\n</li>\n<li>JS 的垃圾回收，Garbage Collection，简称<strong> GC</strong>\n<ol>\n<li>不再使用的对象，称之为垃圾，需要被回收释放更多的内存空间</li>\n<li>Java 的运行环境 JVM，JavaScript 的运行环境 js 引擎都会有内存垃圾回收器</li>\n<li>GC 算法\n<ol>\n<li>引用计数：内存中存在一个引用计数，retain count：默认为 0，缺点可能会产生循环引用</li>\n<li><strong>标记清除</strong>：设置一个根对象 (root object), 垃圾回收器会定期从这个根开始，找所有从开始有引用的对象，对于没有引用的对象，就认为是不可用对象</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>常见 GC 内存算法\n<ol>\n<li>JavaScript 垃圾回收</li>\n<li>引用计数算法</li>\n<li>标记清除算法</li>\n<li>标记整理算法</li>\n<li>分代回收算法</li>\n</ol>\n</li>\n<li>V8 引擎内存管理\n<ol>\n<li>V8 的分代算法</li>\n<li>V8 的内存分配</li>\n<li>新生代对象回收</li>\n<li>旧生代对象回收</li>\n</ol>\n</li>\n<li>Performmance 调试</li>\n<li>JavaScript 内存泄漏</li>\n<li>严格模式\n<ol>\n<li>概念\n<ol>\n<li>严格模式是一种具有限制性的 JavaScript 模式，从而使代码隐式的脱离了 <code>懒散（sloppy）模式</code></li>\n<li>支持严格模式的浏览器在检测到代码中有严格模式时，会以更加严格的方式对代码进行检测和执行</li>\n<li>严格模式对正常的 JavaScript 语义进行了一些限制\n<ol>\n<li>严格模式通过抛出错误来消除一些原有的静默（silent）错误</li>\n<li>严格模式让 JS 引擎在执行代码时可以进行更多的优化（不需要对一些特殊的语法进行处理）</li>\n<li>严格模式禁用了在 ECMAScript 未来版本中可能会定义的一些语法</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>开启严格模式\n<ol>\n<li>支持在 js 文件中开启严格模式</li>\n<li>支持对某一个函数开启严格模式</li>\n<li>严格模式通过在文件或者函数开头使用 use strict 来开启</li>\n</ol>\n</li>\n<li>严格模式限制\n<ol>\n<li>禁止意外创建全局变量</li>\n<li>不允许函数有相同的参数名称</li>\n<li>出现静默错误</li>\n<li>不允许使用原先的八进制格式</li>\n<li>with 语句不允许使用</li>\n<li>eval 函数不会向上引用变量 (不会再向上层作用域添加变量)</li>\n<li>严格模式下试图删除不可删除的属性</li>\n<li>严格模式下，this 绑定不会默认转成对象</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"4javascript事件循环\"><a class=\"markdownIt-Anchor\" href=\"#4javascript事件循环\">#</a> 4.JavaScript 事件循环</h3>\n<ol>\n<li>浏览器的进程模式\n<ol>\n<li>进程</li>\n<li>线程</li>\n<li>JavaScript 线程</li>\n</ol>\n</li>\n<li>浏览器的事件循环\n<ol>\n<li>宏任务 macrotask</li>\n<li>微任务 microtask</li>\n<li>常见面试题</li>\n</ol>\n</li>\n<li>Node 的事件循环\n<ol>\n<li>libuv</li>\n<li>阻塞 IO</li>\n<li>非阻塞 IO</li>\n<li>宏任务 macrotask</li>\n<li>微任务 microtask</li>\n<li>常见面试题</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"3javascript作用域和函数\"><a class=\"markdownIt-Anchor\" href=\"#3javascript作用域和函数\">#</a> 3.JavaScript 作用域和函数</h2>\n<h3 id=\"1认识作用域\"><a class=\"markdownIt-Anchor\" href=\"#1认识作用域\">#</a> 1. 认识作用域</h3>\n<ol>\n<li>\n<p>认识作用域</p>\n<ol>\n<li>JavaScript 编译、执行</li>\n<li>深入理解作用域</li>\n<li>作用域的嵌套</li>\n</ol>\n</li>\n<li>\n<p>词法作用域</p>\n<ol>\n<li>\n<p>认识词法分析</p>\n</li>\n<li>\n<p>eval 函数</p>\n<ol>\n<li>eval 是一个特殊的函数，可以将传入的字符串当作 JavaScript 代码来运行</li>\n<li>不建议在开发中使用\n<ol>\n<li>eval 代码可读性较差</li>\n<li>eval 是一个字符串，可能在执行过程中被篡改，造成恶意攻击</li>\n<li>eval 的执行必须经过 JS 解释器，不能被 JS 引擎优化</li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> jsString = <span class=\"hljs-string\">&#x27;var message = &quot;Hello World~~&quot;;console.log(message);&#x27;</span>;<br><span class=\"hljs-built_in\">eval</span>(jsString);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>with 关键字</p>\n<ol>\n<li><code>with</code>  的使用，但不推荐使用，在严格模式下会报错</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// &quot;use strict&quot;</span><br><span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">&quot;Hello world!&quot;</span>;<br><span class=\"hljs-keyword\">var</span> object = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tests&quot;</span>,<br>  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">12</span>,<br>  <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;您好&quot;</span><br>&#125;;<br><span class=\"hljs-comment\">// with语句:可以形成自己的作用域</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">with</span> (object) &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(message);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">bar</span>();<br>&#125;<br><span class=\"hljs-title function_\">foo</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>作用域提升</p>\n<ol>\n<li>编译器中变量声明和提升</li>\n<li>函数和变量的提升</li>\n</ol>\n</li>\n<li>\n<p>块级作用域</p>\n<ol>\n<li>with 作用域\n<ol>\n<li><code>with</code>  可以自己形成作用域，先查找传进来的对象，之后再去上层查找</li>\n</ol>\n</li>\n<li><code>try...catch...</code>  作用域</li>\n<li>let 变量声明</li>\n<li>const 变量声明</li>\n</ol>\n</li>\n<li>\n<p>作用域面试题</p>\n</li>\n</ol>\n<h3 id=\"2执行上下文\"><a class=\"markdownIt-Anchor\" href=\"#2执行上下文\">#</a> 2. 执行上下文</h3>\n<ol>\n<li>执行上下文\n<ol>\n<li>Global EC</li>\n<li>Function EC</li>\n<li>Eval EC</li>\n</ol>\n</li>\n<li>变量对象 VO\n<ol>\n<li>VO: 全局变量对象</li>\n<li>AO: 私有变量对象</li>\n<li>GO: 全局对象</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"3深入函数执行\"><a class=\"markdownIt-Anchor\" href=\"#3深入函数执行\">#</a> 3. 深入函数执行</h3>\n<ol>\n<li>\n<p><code>call/apply执行函数</code></p>\n</li>\n<li>\n<p>立即执行函数</p>\n</li>\n<li>\n<p><code>Scopechain</code></p>\n</li>\n<li>\n<p><strong> <code>深入闭包</code> </strong></p>\n<ol>\n<li>\n<p>补充</p>\n<ol>\n<li>高阶函数：一个函数接收另一个函数作为参数或者一个函数会作为另一个函数的返回值返回</li>\n<li><code>filter</code> : 过滤，接收一个<strong>返回布尔类型的函数为参数</strong>，并且该函数具有三个参数分别为数组中的元素、数组中的元素的下标、数组本身</li>\n<li><code>map</code> : 映射，</li>\n<li><code>forEach</code> : 迭代遍历，无返回值</li>\n<li><code>find</code> : 查找的为一个对象</li>\n<li><code>findIndex</code> : 查找的为对象索引值</li>\n<li><code>reduce</code> : 累加计算</li>\n<li>方法：对象里面的函数（特殊位置的函数），函数：独立的 function 称为函数</li>\n</ol>\n</li>\n<li>\n<p><code>闭包:Closure</code></p>\n<ol>\n<li>\n<p>维基百科：闭包又称词法闭包、函数闭包，是在支持头等函数的编程语言中，实现词法绑定的一种技术，闭包在实现上是一个结构体，它存储了一个函数和一个关联的环境，闭包和普通函数的区别在于，<strong>当捕捉闭包的时候，它的自由变量会在捕捉时被确定</strong>，这样即使脱离了捕捉时的上下文，它也能照常运行</p>\n</li>\n<li>\n<p>MDN：<strong>一个函数和对其周围状态 (词法环境) 的引用捆绑</strong>在一起 (说函数被引用包围)，这样的组合就是闭包，闭包让你可以在一个内层函数中访问到其外层函数的作用域，在 JavaScript 中，每当创建一个函数，闭包就会在函数创建时被创建出来</p>\n</li>\n<li>\n<p>个人理解：<strong>一个普通的函数，如果它可以访问到外层作用域的自由变量，那么这个函数就是一个闭包。从广义角度：(可以访问到) JavaScript 中的函数都是闭包；从狭义角度 (有访问到)：JavaScript 中的一个函数，若访问了外层作用域的自由变量，那么它就是一个闭包</strong></p>\n</li>\n<li>\n<p>闭包引起的内存泄漏</p>\n<ol>\n<li>使用完毕后本该销毁的内存而没有销毁继续存在称为内存泄露</li>\n<li>内存释放将其设置为 <code>null</code>  即可</li>\n</ol>\n</li>\n<li>\n<p>闭包中引用的自由变量</p>\n<ol>\n<li>AO 对象不会被销毁时，该对象里面被闭包引用的自由变量不会被销毁，没有引用的自由变量会被 js 引擎销毁</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;GXX&quot;</span>;<br>  <span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">19</span>;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">debugger</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name);<br>    <span class=\"hljs-comment\">// 按照ECAM规范整个foo函数的AO对象不会删除，所以该对象中的age属性也应该存在，但是浏览器的js引擎即V8引擎会进行优化将其删除掉</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(age);<span class=\"hljs-comment\">//bar函数中不访问变量age</span><br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> bar;<br>&#125;<br><span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-title function_\">fn</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"4函数的this绑定\"><a class=\"markdownIt-Anchor\" href=\"#4函数的this绑定\">#</a> 4. 函数的 this 绑定</h3>\n<ol>\n<li>\n<p>全局作用域下</p>\n<ol>\n<li>\n<p>浏览器环境：全局作用域下 <code>this</code>  绑定 window</p>\n</li>\n<li>\n<p>node 环境： <code>空对象&#123;&#125;</code></p>\n<ol>\n<li>执行步骤：首先将要执行的 js 文件作为模块，然后进行加载编译，此时将 js 代码所有文件放入一个函数中，执行该函数，但是该函数调用 <code>call()</code> , 在调用时向 <code>call()</code>  中传入一个空对象绑定为 <code>this</code>  即 <code>执行函数.call(&#123;&#125;)</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><em>函数作用域下</em> <code>this</code>  指向</p>\n<ol>\n<li>\n<p>函数在被调用时，JavaScript 会默认给 this 绑定一个值，this 指向与函数所处位置 (<strong>函数定义位置</strong>) 无关，与<strong>函数被调用的方式</strong>及调用位置有关，<strong>this 是在运行时被绑定</strong></p>\n</li>\n<li>\n<p><strong>默认绑定</strong></p>\n<ol>\n<li>\n<p>独立函数调用 <code>this</code>  指向的是全局对象 <code>window</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj1&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><span class=\"hljs-comment\">// 将obj1的foo赋值给bar</span><br><span class=\"hljs-keyword\">var</span> bar = obj1.<span class=\"hljs-property\">foo</span>;<br><span class=\"hljs-title function_\">bar</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>隐式绑定</strong></p>\n<ol>\n<li>\n<p>通过某个对象进行调用，即调用位置中是<strong>通过某个对象发起的函数调用</strong> (谁发起函数调用 this 就绑定谁)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> test = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;test&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj1&quot;</span>,<br>  <span class=\"hljs-attr\">test</span>: test<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj2 = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;obj2&quot;</span>,<br>  <span class=\"hljs-attr\">obj1</span>: obj1<br>&#125;<br>obj2.<span class=\"hljs-property\">obj1</span>.<span class=\"hljs-property\">test</span>.<span class=\"hljs-title function_\">foo</span>();<span class=\"hljs-comment\">//test对象</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>object.fn()</code> ：object 对象会被 js 引擎绑定到 fn 函数中的 this 上</p>\n</li>\n<li>\n<p>隐式绑定的前提条件</p>\n<ol>\n<li>必须在调用的对象内部有一个对函数的引用（比如一个属性）</li>\n<li>如果没有这样的引用，在进行调用时，会报找不到该函数的错误</li>\n<li>正是通过这个引用，间接的将 this 绑定到了这个对象上</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>显示绑定</strong></p>\n<ol>\n<li>\n<p><code>call()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式)</li>\n</ol>\n</li>\n<li>\n<p><code>apply()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (数组形式)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">num1,num2,num3</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num1+num2+num3,<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>sum.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&quot;call&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>);<span class=\"hljs-comment\">//剩余参数形式</span><br>sum.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-string\">&quot;apply&quot;</span>,[<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>]);<span class=\"hljs-comment\">//数组形式</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>bind()</code></p>\n<ol>\n<li>第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式), <code>bind</code>  返回为一个新的函数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-comment\">// 默认绑定和显示绑定bind冲突：优先级（显示绑定）</span><br><span class=\"hljs-keyword\">var</span> newFoo = foo.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;aaaa&quot;</span>);<br><span class=\"hljs-title function_\">newFoo</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>new 绑定</strong></p>\n<ol>\n<li>使用 new 关键字来调用函数执行如下的操作\n<ol>\n<li>创建一个全新的对象，<strong>并将该对象赋值给 this，函数最后返回该对象</strong></li>\n<li>这个新对象会被执行 prototype 连接</li>\n<li>这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）</li>\n<li>如果函数没有返回其他对象，表达式会返回这个新对象</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>内置函数绑定</strong></p>\n<ol>\n<li>\n<p><code>setTimeout</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 因为setTimeout内部实现函数调用时为独立函数调用，所以打印this时指向window</span><br><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);  <span class=\"hljs-comment\">//window</span><br>&#125;, <span class=\"hljs-number\">2000</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>数组.forEach/map/filter/find等高阶函数</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> names = [<span class=\"hljs-string\">&quot;aaa&quot;</span>,<span class=\"hljs-string\">&quot;bbb&quot;</span>,<span class=\"hljs-string\">&quot;ccc&quot;</span>,<span class=\"hljs-string\">&quot;ddd&quot;</span>];<br><span class=\"hljs-comment\">// 函数直接独立调用指向window</span><br>names.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item,<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br><span class=\"hljs-comment\">// forEach函数接收两个参数，第一个参数为一个函数，第二个参数为this绑定对象</span><br>names.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(item,<span class=\"hljs-variable language_\">this</span>);<br>&#125;,<span class=\"hljs-string\">&quot;forEach&quot;</span>)<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>div的点击</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 2、监听box盒子的点击,内部函数调用实现为：隐式this绑定调用进行打印即boxDiv.onclick()形式调用</span><br><span class=\"hljs-keyword\">const</span> boxDiv = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;.box&quot;</span>);<br><span class=\"hljs-comment\">// 1.方式一：该方式添加监听事件会进行覆盖，也就是后面一个监听事件会覆盖前面一个，只生效一个最后一个事件</span><br>boxDiv.<span class=\"hljs-property\">onclick</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-comment\">// 2.方式二：不会进行事件覆盖，会将函数收集到一个数组里面，执行时进行遍历</span><br><span class=\"hljs-comment\">// 内部函数调用实现为：call()方式，即fn.call(boxDiv)</span><br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br>boxDiv.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>,<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>规则的优先级</strong></p>\n<ol>\n<li>\n<p><strong>new 绑定 &gt; 显示绑定 (bind/call/apply) &gt; 隐式绑定 (object.foo ()) &gt; 默认绑定 (独立函数调用)</strong></p>\n</li>\n<li>\n<p>默认规则 (独立调用) 的优先级最低</p>\n</li>\n<li>\n<p>显示绑定优先级高于隐式绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;object&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br>&#125;<br>object.<span class=\"hljs-title function_\">foo</span>();<br>object.<span class=\"hljs-property\">foo</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&quot;call&quot;</span>);<span class=\"hljs-comment\">//call()绑定</span><br>object.<span class=\"hljs-property\">foo</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-string\">&quot;apply&quot;</span>);<span class=\"hljs-comment\">//apply()绑定</span><br><span class=\"hljs-keyword\">var</span> bar = object.<span class=\"hljs-property\">foo</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;bind&quot;</span>);<br><span class=\"hljs-title function_\">bar</span>();<br><span class=\"hljs-comment\">//bind()绑定优先级比较</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> object = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;object&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>:foo.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;bind&quot;</span>)<br>&#125;<br>object.<span class=\"hljs-title function_\">foo</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>new 绑定优先级高于隐式绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;GXX&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// new的优先级高于隐式绑定</span><br><span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-keyword\">new</span> object.<span class=\"hljs-title function_\">foo</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>new 绑定优先级高于 bind</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 结论：new关键字不能和apply/call一起来使用</span><br><span class=\"hljs-comment\">// new VS bind</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><span class=\"hljs-keyword\">var</span> bar = foo.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-string\">&quot;bind&quot;</span>);<br><span class=\"hljs-keyword\">var</span> object = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">bar</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>特殊情况 —— 忽略显示绑定</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>foo.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&quot;call&quot;</span>);<br>foo.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-string\">&quot;apply&quot;</span>);<br><span class=\"hljs-comment\">// apply/call/bind:当传入null/undefined时，自动将this绑定成全局对象</span><br>foo.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">null</span>);<br>foo.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">undefined</span>); <br><span class=\"hljs-keyword\">var</span> fn = foo.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-literal\">null</span>);<br><span class=\"hljs-comment\">// var fn = foo.bind(undefined);</span><br><span class=\"hljs-title function_\">fn</span>(); <br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>特殊情况 —— 间接函数引用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object1 = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;object1&quot;</span>,<br>  <span class=\"hljs-attr\">foo</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br>&#125;;<br><span class=\"hljs-keyword\">var</span> object2 = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;object2&quot;</span><br>&#125;;<br>object2.<span class=\"hljs-property\">bar</span> = object1.<span class=\"hljs-property\">foo</span>;<br>object2.<span class=\"hljs-title function_\">bar</span>();<span class=\"hljs-comment\">//打印object2对象</span><br><span class=\"hljs-comment\">// 立即执行函数(匿名函数)，当作独立函数调用，打印全局对象window</span><br>(object2.<span class=\"hljs-property\">bar</span> = object1.<span class=\"hljs-property\">foo</span>)();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>特殊情况 ——ES6 箭头函数</p>\n<ol>\n<li>根据外层作用域来决定 <code>this</code>  指向</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object =&#123;<br>  <span class=\"hljs-attr\">data</span>:[],<br>  <span class=\"hljs-attr\">getData</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br><span class=\"hljs-comment\">/*     // 发送网络请求，将结果放到上面data属性中</span><br><span class=\"hljs-comment\">    // 在箭头函数之前的解决方案</span><br><span class=\"hljs-comment\">    // 使用闭包</span><br><span class=\"hljs-comment\">    var _this = this;</span><br><span class=\"hljs-comment\">    setTimeout(() =&gt; &#123;</span><br><span class=\"hljs-comment\">      var result = [&quot;111&quot;,&quot;222&quot;,&quot;333&quot;,&quot;444&quot;];</span><br><span class=\"hljs-comment\">      _this.data = result;</span><br><span class=\"hljs-comment\">    &#125;, 2000); */</span><br>    <br>    <span class=\"hljs-comment\">// 箭头函数出现后</span><br>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">var</span> result = [<span class=\"hljs-string\">&quot;111&quot;</span>,<span class=\"hljs-string\">&quot;222&quot;</span>,<span class=\"hljs-string\">&quot;333&quot;</span>,<span class=\"hljs-string\">&quot;444&quot;</span>];<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span> = result;<br>    &#125;, <span class=\"hljs-number\">2000</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 隐式绑定，将getData方法中的this指向object对象，则_this就为object对象，即可拿到result数据</span><br>object.<span class=\"hljs-title function_\">getData</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>this指向面试题</code></p>\n<ol>\n<li>\n<p>对象花括号不是作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object = &#123;<br>\t<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;test&quot;</span>,<br>\t<span class=\"hljs-attr\">foo</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-comment\">//上层作用域为全局</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>箭头函数不看绑定，向上层作用域查找</p>\n</li>\n<li>\n<p>一定要看：<strong>执行时看是谁发起函数调用</strong></p>\n</li>\n</ol>\n</li>\n<li>\n<p>箭头函数</p>\n<ol>\n<li>介绍及简写语法练习</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><strong> <code>call&amp;apply&amp;bind</code> </strong></p>\n<ol>\n<li>\n<p><code>call实现</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 给所有的函数添加一个hycall方法</span><br><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hycall</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">thisArg,...args</span>) &#123;<span class=\"hljs-comment\">//...args没有传入参数是一个空的数组</span><br>  <span class=\"hljs-comment\">// 第一步：获取哪一个函数调用hycall</span><br>  <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-variable language_\">this</span>;<br>  <span class=\"hljs-comment\">// 第二步：对thisArg转成对象类型(防止传入的是非对象类型),使用thisArg对象时,当thisArg为字符串、数字、布尔等类型时需要进行转换为对应的对象</span><br>  thisArg = (thisArg !== <span class=\"hljs-literal\">null</span> &amp;&amp; thisArg !== <span class=\"hljs-literal\">undefined</span> &amp;&amp; thisArg == <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-title class_\">Object</span>(thisArg) : <span class=\"hljs-variable language_\">window</span>;<br>  <span class=\"hljs-comment\">// 第三步：调用需要被执行的函数</span><br>  <span class=\"hljs-comment\">// 1、使用call实现</span><br>  <span class=\"hljs-comment\">// fn.call(thisArg);</span><br>  <span class=\"hljs-comment\">// 2、使用thisArg对象实现</span><br>  thisArg.<span class=\"hljs-property\">fn</span> = fn;<br>  <span class=\"hljs-keyword\">var</span> result = thisArg.<span class=\"hljs-title function_\">fn</span>(...args);<span class=\"hljs-comment\">//展开时至少是一个空的数组</span><br>  <span class=\"hljs-comment\">// delete thisArg.fn;</span><br>  <span class=\"hljs-comment\">// 第四步：将最终的结果返回出去</span><br>  <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">num1,num2</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;foo函数被执行&quot;</span>,<span class=\"hljs-variable language_\">this</span>,num1,num2);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">num1,num2</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;sum函数被执行&quot;</span>,<span class=\"hljs-variable language_\">this</span>,num1,num2);<br>  <span class=\"hljs-keyword\">return</span> num1 + num2;<br>&#125;<br>foo.<span class=\"hljs-title function_\">hycall</span>(&#123;&#125;);<br>foo.<span class=\"hljs-title function_\">hycall</span>(&#123;&#125;,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>);<br>foo.<span class=\"hljs-title function_\">hycall</span>(<span class=\"hljs-literal\">null</span>);<br>foo.<span class=\"hljs-title function_\">hycall</span>(<span class=\"hljs-literal\">undefined</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">6</span>);<br>sum.<span class=\"hljs-title function_\">hycall</span>(<span class=\"hljs-string\">&quot;hycall&quot;</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">9</span>);<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>apply实现</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hyapply</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">thisArg,argArray</span>) &#123;<span class=\"hljs-comment\">//argArray没有传入参数是undefined</span><br>  <span class=\"hljs-comment\">// 第一步：获取那一个函数调用hyapply方法</span><br>  <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-variable language_\">this</span>;<br>  <span class=\"hljs-comment\">// 第二步：保证传入都是对象类型</span><br>  thisArg = (thisArg !== <span class=\"hljs-literal\">null</span> &amp;&amp; thisArg !== <span class=\"hljs-literal\">undefined</span> &amp;&amp; thisArg == <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-title class_\">Object</span>(thisArg) : <span class=\"hljs-variable language_\">window</span>;<br>  <span class=\"hljs-comment\">// 第三步：调用执行函数</span><br>  thisArg.<span class=\"hljs-property\">fn</span> = fn;<br>  <span class=\"hljs-comment\">// 判断是否传入参数</span><br>  <span class=\"hljs-comment\">// 方式一：!argArray为true没有参数，为false有参数</span><br>  <span class=\"hljs-keyword\">var</span> result = !argArray ? thisArg.<span class=\"hljs-title function_\">fn</span>() : thisArg.<span class=\"hljs-title function_\">fn</span>(...argArray);<br>  <span class=\"hljs-comment\">// 方式二：使用</span><br><br><span class=\"hljs-comment\">/*   // 方式三：使用或运算符</span><br><span class=\"hljs-comment\">  // argArray = argArray ? argArray:[]</span><br><span class=\"hljs-comment\">  argArray = argArray || [];</span><br><span class=\"hljs-comment\">  var result = thisArg.fn(...argArray); */</span><br>  <span class=\"hljs-keyword\">delete</span> thisArg.<span class=\"hljs-property\">fn</span>;<br>  <span class=\"hljs-keyword\">return</span> result;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">num1,num2</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;sum函数被调用了&quot;</span>,<span class=\"hljs-variable language_\">this</span>,num1,num2);<br>  <span class=\"hljs-keyword\">return</span> num1 + num2;<br>&#125;<br><span class=\"hljs-comment\">// 特殊情况一个参数也需要放入数组中</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">num</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;foo函数被调用了&quot;</span>,<span class=\"hljs-variable language_\">this</span>,num);<br>  <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;bar函数被执行了&quot;</span>,<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>sum.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-string\">&quot;test&quot;</span>,[<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>]);<br>sum.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-literal\">null</span>,[<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">11</span>]);<br><span class=\"hljs-keyword\">var</span> res1 = sum.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-string\">&quot;hyapply&quot;</span>,[<span class=\"hljs-number\">12</span>,<span class=\"hljs-number\">12</span>]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res1);<br><span class=\"hljs-keyword\">var</span> res2 = foo.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-string\">&quot;hyapply&quot;</span>,[<span class=\"hljs-number\">12</span>]);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res2);<br><span class=\"hljs-keyword\">var</span> res3 = bar.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-string\">&quot;hyapply&quot;</span>);<br><span class=\"hljs-comment\">// 边界判断(edge case)</span><br>bar.<span class=\"hljs-title function_\">hyapply</span>(<span class=\"hljs-number\">0</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>bind实现</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hybind</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">thisArg, ...argArray</span>) &#123;<br>  <span class=\"hljs-comment\">// 第一步：获取到真实需要调用的函数</span><br>  <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-variable language_\">this</span>;<br>  <span class=\"hljs-comment\">// 第二步：绑定this</span><br>  thisArg = (thisArg !== <span class=\"hljs-literal\">null</span> &amp;&amp; thisArg !== <span class=\"hljs-literal\">undefined</span>) ? <span class=\"hljs-title class_\">Object</span>(thisArg) : <span class=\"hljs-variable language_\">window</span>;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">proxyFn</span>(<span class=\"hljs-params\">...args</span>) &#123;<br>  <span class=\"hljs-comment\">// 第三步：将函数放到thisArg中进行调用</span><br>    thisArg.<span class=\"hljs-property\">fn</span> = fn;<br>    <span class=\"hljs-comment\">// 特殊处理：对两个传入的参数进行合并</span><br>    <span class=\"hljs-keyword\">var</span> finalArgs = [...argArray, ...args]<br>    <span class=\"hljs-keyword\">var</span> result = thisArg.<span class=\"hljs-title function_\">fn</span>(...finalArgs);<br>    <span class=\"hljs-keyword\">delete</span> thisArg.<span class=\"hljs-property\">fn</span>;<br>  <span class=\"hljs-comment\">// 第四步：返回结果</span><br>    <span class=\"hljs-keyword\">return</span> result;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> proxyFn;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;foo函数被调用&quot;</span>, <span class=\"hljs-variable language_\">this</span>);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">20</span>;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">num1, num2, num3, num4</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num1, num2, num3, num4);<br>&#125;<br><span class=\"hljs-comment\">/* // 系统的bind调用</span><br><span class=\"hljs-comment\">var bar = foo.bind(&quot;bind&quot;);</span><br><span class=\"hljs-comment\">bar();</span><br><span class=\"hljs-comment\">// 传入参数的方式</span><br><span class=\"hljs-comment\">// 方式一</span><br><span class=\"hljs-comment\">var newSum = sum.bind(&quot;bind&quot;,11,22,33,44);</span><br><span class=\"hljs-comment\">newSum();</span><br><span class=\"hljs-comment\">// 方式二</span><br><span class=\"hljs-comment\">var newSum = sum.bind(&quot;bind&quot;);</span><br><span class=\"hljs-comment\">newSum(11,22,33,44);</span><br><span class=\"hljs-comment\">// 方式三</span><br><span class=\"hljs-comment\">var newSum = sum.bind(&quot;bind&quot;,11,22);</span><br><span class=\"hljs-comment\">newSum(33,44); */</span><br><span class=\"hljs-comment\">/* var bar = foo.hybind(&quot;hybind&quot;);</span><br><span class=\"hljs-comment\">var res = bar();</span><br><span class=\"hljs-comment\">console.log(res); */</span><br><span class=\"hljs-keyword\">var</span> newSum = sum.<span class=\"hljs-title function_\">hybind</span>(<span class=\"hljs-string\">&quot;hybind&quot;</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);<br><span class=\"hljs-keyword\">var</span> res = <span class=\"hljs-title function_\">newSum</span>(<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>); <br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><strong> <code>arguments</code> </strong></p>\n<ol>\n<li>\n<p>类数组对象 (array-like)，形式像是一个数组，本质上是一个对象，即为对象类型，不能使用数组的方法</p>\n</li>\n<li>\n<p><strong> <code>arguments参数转换数组</code> </strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">num1,num2</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>  <span class=\"hljs-comment\">// arguments转换为数组类型方式</span><br><span class=\"hljs-comment\">/*   // 1、使用for循环遍历</span><br><span class=\"hljs-comment\">  var newArray1 = [];</span><br><span class=\"hljs-comment\">  for (let i = 0; i &lt; arguments.length; i++) &#123;</span><br><span class=\"hljs-comment\">    newArray1.push(arguments[i] * 10);</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  console.log(newArray1); */</span><br><span class=\"hljs-comment\">/*   // 2、将arguments转换为array</span><br><span class=\"hljs-comment\">  var newArray2 = Array.prototype.slice.call(arguments);</span><br><span class=\"hljs-comment\">  console.log(newArray2);</span><br><span class=\"hljs-comment\">  var newArray3 = [].slice.call(arguments);</span><br><span class=\"hljs-comment\">  console.log(newArray3); */</span><br>  <span class=\"hljs-comment\">// 3、使用ES6的语法</span><br>  <span class=\"hljs-keyword\">var</span> newArray4 = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-variable language_\">arguments</span>);<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newArray4);<br>  <span class=\"hljs-keyword\">var</span> newArray5 = [...<span class=\"hljs-variable language_\">arguments</span>];<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(newArray5);<br>&#125;<br><span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">40</span>,<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">60</span>);<br><span class=\"hljs-comment\">/* // Array中slice方法实现     </span><br><span class=\"hljs-comment\">Array.prototype.hyslice = function (start,end) &#123;</span><br><span class=\"hljs-comment\">  var array = this;</span><br><span class=\"hljs-comment\">  start = start || 0;</span><br><span class=\"hljs-comment\">  end = end || array.length;</span><br><span class=\"hljs-comment\">  var newArray = [];</span><br><span class=\"hljs-comment\">  for (let i = start; i &lt; end; i++) &#123;</span><br><span class=\"hljs-comment\">    newArray.push(array[i]);</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  return newArray;</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\">// var newArrayFinal = Array.prototype.hyslice.call([&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;],1,3);</span><br><span class=\"hljs-comment\">var newArrayFinal = Array.prototype.hyslice.call([&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;]);</span><br><span class=\"hljs-comment\">console.log(newArrayFinal); */</span><br><span class=\"hljs-comment\">/* // slice方法的使用</span><br><span class=\"hljs-comment\">var names = [&quot;111&quot;,&quot;222&quot;,&quot;333&quot;,&quot;444&quot;];</span><br><span class=\"hljs-comment\">console.log(names.slice(1,3)); */</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong> <code>箭头函数中没有arguments</code> </strong></p>\n<ol>\n<li>浏览器的全局作用域中没有 arguments</li>\n<li>node 环境下存在全局的 arguments</li>\n<li><strong>箭头函数可以使用剩余参数 <code>(...args)</code>  方式获取参数</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>编程方式</p>\n<ol>\n<li>函数式编程范式</li>\n<li>面向对象式编程范式</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"5函数的柯里化\"><a class=\"markdownIt-Anchor\" href=\"#5函数的柯里化\">#</a> 5. 函数的柯里化</h3>\n<ol>\n<li>\n<p>纯函数</p>\n<ol>\n<li>\n<p>纯函数的条件</p>\n<ol>\n<li>确定的输入，一定会产生确定的输出</li>\n<li>函数在执行过程中，不能产生副作用</li>\n</ol>\n</li>\n<li>\n<p>副作用理解</p>\n<ol>\n<li>表示在执行一个函数时，除了返回函数值之外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// test是一个纯函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">info</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> &#123;<br>    ...info,<span class=\"hljs-comment\">//展开运算符，对原对象进行浅拷贝，并没有修改原对象</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">10</span><br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;111&quot;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span><br>&#125;<br><span class=\"hljs-keyword\">var</span> obj2 = <span class=\"hljs-title function_\">test</span>(obj1);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj1);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>纯函数的优势</p>\n<ol>\n<li>安心的编写和安心的使用</li>\n<li>只是单纯实现自己的业务逻辑即可，不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改</li>\n<li>你在用的时候，你确定你的输入内容不会被任意篡改，并且自己确定的输入，一定会有确定的输出</li>\n</ol>\n</li>\n<li>\n<p>纯函数的案例学习</p>\n<ol>\n<li>展开运算符，对原对象进行浅拷贝，并没有修改原对象</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>柯里化是什么</p>\n<ol>\n<li>柯里化 (英语：Currying) 又译为 <code>卡瑞化</code> 或 <code>加里化</code></li>\n<li>只传递给函数<strong>一部分参数</strong>来调用它，让它返回<strong>一个函数</strong>去处理<strong>剩余的参数</strong></li>\n</ol>\n</li>\n<li>\n<p>实现柯里化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//一般函数</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x,y,z</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> (x+y+z);<br>&#125;<br><span class=\"hljs-comment\">// 使用柯里化技术</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bax</span>(<span class=\"hljs-params\">x</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">y</span>) &#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">z</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> (x+y+z);<br>    &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 一般函数实现</span><br><span class=\"hljs-keyword\">var</span> result1 = <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result1);<br><span class=\"hljs-comment\">// 柯里化实现</span><br><span class=\"hljs-keyword\">var</span> result2 = <span class=\"hljs-title function_\">bax</span>(<span class=\"hljs-number\">11</span>)(<span class=\"hljs-number\">22</span>)(<span class=\"hljs-number\">33</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2);<br><span class=\"hljs-comment\">// 简化柯里化操作</span><br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title function_\">foo</span> = (<span class=\"hljs-params\">x</span>) =&gt; <span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">z</span>) =&gt;</span> &#123;<br> <span class=\"hljs-keyword\">return</span> (x+y+z);<br>&#125;<br><span class=\"hljs-keyword\">var</span> result3 = <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-number\">22</span>)(<span class=\"hljs-number\">33</span>)(<span class=\"hljs-number\">44</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result3);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>柯里化函数的实现 (自动)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x,y,z</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> (x+y+z);<br>&#125;<br><span class=\"hljs-comment\">// 柯里化函数的实现hyCurrying</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hyCurrying</span>(<span class=\"hljs-params\">fn</span>) &#123;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curried1</span>(<span class=\"hljs-params\">...args1</span>) &#123;<br>    <span class=\"hljs-comment\">// 判断接收参数args和函数本身需要接收的参数数量是否一致</span><br>    <span class=\"hljs-comment\">// 当传入的参数大于等于函数需要的参数时，就执行函数</span><br>    <span class=\"hljs-keyword\">if</span> (args1.<span class=\"hljs-property\">length</span> &gt;= fn.<span class=\"hljs-property\">length</span>) &#123;<br>      <span class=\"hljs-comment\">//方式一</span><br>      <span class=\"hljs-comment\">// return fn(...args1);</span><br><span class=\"hljs-comment\">/*       // 方式二</span><br><span class=\"hljs-comment\">      return fn.call(this,...args1); */</span><br>      <span class=\"hljs-comment\">// 方式三</span><br>      <span class=\"hljs-comment\">// 此处this理解:若curryAdd.apply(&quot;test&quot;)即curried1中的this，把this绑定在fn函数中 </span><br>      <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>,args1);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      <span class=\"hljs-comment\">// 没有达到函数所需参数数量时，需要返回一个新的函数，继续来接收参数</span><br>      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curried2</span>(<span class=\"hljs-params\">...args2</span>) &#123;<br>        <span class=\"hljs-comment\">// 接收到参数后，需要递归调用curried1来检查函数的参数个数是否达到所需参数的个数</span><br>        <span class=\"hljs-keyword\">return</span> curried1.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>,[...args1,...args2])<br>        <span class=\"hljs-comment\">// return curried1.apply(this,args.concat(args2))</span><br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> curried2;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> curried1;<br>&#125;<br><span class=\"hljs-keyword\">var</span> curryAdd = <span class=\"hljs-title function_\">hyCurrying</span>(add);<br><span class=\"hljs-keyword\">var</span> result1 = <span class=\"hljs-title function_\">curryAdd</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-keyword\">var</span> result2 = <span class=\"hljs-title function_\">curryAdd</span>(<span class=\"hljs-number\">10</span>)(<span class=\"hljs-number\">20</span>)(<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result1);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result2);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>柯里化的应用</p>\n<ol>\n<li>\n<p><code>函数的职责单一</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 一般函数实现</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y, z</span>) &#123;<br>  <span class=\"hljs-attr\">x</span>: x + <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-attr\">y</span>: y * <span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-attr\">z</span>: z * z;<br>  <span class=\"hljs-keyword\">return</span> (x + y + z)<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">30</span>));<br><span class=\"hljs-comment\">// 柯里化实现</span><br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title function_\">bar</span> = (<span class=\"hljs-params\">x</span>) =&gt; &#123;<br>  x+=<span class=\"hljs-number\">2</span>;<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">y</span>) =&gt;</span> &#123;<br>    y*=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">z</span>) =&gt;</span> &#123;<br>      z*=z;<br>      <span class=\"hljs-keyword\">return</span> (x+y+z);<br>    &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-number\">10</span>)(<span class=\"hljs-number\">20</span>)(<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>逻辑复用</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/* // 23 + x = ？(x = 任意实数)</span><br><span class=\"hljs-comment\">// 一般函数实现</span><br><span class=\"hljs-comment\">function log(date, type, message) &#123;</span><br><span class=\"hljs-comment\">  console.log(`[$&#123;date.getHours()&#125;:$&#123;date.getMinutes()&#125;][$&#123;type&#125;]:[$&#123;message&#125;]`);</span><br><span class=\"hljs-comment\">&#125;</span><br><span class=\"hljs-comment\">log(new Date(), &quot;DEBUG&quot;, &quot;查询数据错误&quot;);</span><br><span class=\"hljs-comment\">log(new Date(), &quot;DEBUG&quot;, &quot;轮播图的错误&quot;);</span><br><span class=\"hljs-comment\">log(new Date(), &quot;DEBUG&quot;, &quot;查询表单错误&quot;); */</span><br><span class=\"hljs-comment\">// 柯里化实现</span><br><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title function_\">log</span> = date =&gt; <span class=\"hljs-function\"><span class=\"hljs-params\">type</span> =&gt;</span> <span class=\"hljs-function\"><span class=\"hljs-params\">message</span> =&gt;</span> &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`[<span class=\"hljs-subst\">$&#123;date.getHours()&#125;</span>:<span class=\"hljs-subst\">$&#123;date.getMinutes()&#125;</span>][<span class=\"hljs-subst\">$&#123;type&#125;</span>]:[<span class=\"hljs-subst\">$&#123;message&#125;</span>]`</span>);<br>&#125;<br><span class=\"hljs-comment\">// 柯里化--复用时间逻辑</span><br><span class=\"hljs-keyword\">var</span> nowLog = <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br><span class=\"hljs-title function_\">nowLog</span>(<span class=\"hljs-string\">&quot;6666&quot;</span>)(<span class=\"hljs-string\">&quot;undefined&quot;</span>);<br><span class=\"hljs-comment\">// 柯里化--复用时间逻辑、错误信息逻辑</span><br><span class=\"hljs-keyword\">var</span> newAndDebug = <span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())(<span class=\"hljs-string\">&quot;同一类型错误信息&quot;</span>);<br><span class=\"hljs-title function_\">newAndDebug</span>(<span class=\"hljs-string\">&quot;undefined&quot;</span>);<br><span class=\"hljs-title function_\">newAndDebug</span>(<span class=\"hljs-string\">&quot;null&quot;</span>);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p><code>组合函数</code></p>\n<ol>\n<li>\n<p>将多个函数组合起来，自动依次调用</p>\n</li>\n<li>\n<p>实现组合函数 (多个函数，多个参数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hyCompose</span>(<span class=\"hljs-params\">...fns</span>) &#123;<br>  <span class=\"hljs-comment\">// var length = fns.length;</span><br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; fns.<span class=\"hljs-property\">length</span>; i++) &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> fns[i] !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) &#123;<br>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&quot;Expected arguments are functions&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">compose</span>(<span class=\"hljs-params\">...args</span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">var</span> result = fns.<span class=\"hljs-property\">length</span> ? fns[index].<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>,args):args;<br>    <span class=\"hljs-keyword\">while</span> (++index &lt; fns.<span class=\"hljs-property\">length</span>) &#123;<br>      result = fns[index].<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>,result);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> result;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> compose;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">double</span>(<span class=\"hljs-params\">num1</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> num1*<span class=\"hljs-number\">2</span>;<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">square</span>(<span class=\"hljs-params\">num2</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> num2**<span class=\"hljs-number\">2</span>;<br>&#125;<br><span class=\"hljs-keyword\">var</span> newFn = <span class=\"hljs-title function_\">hyCompose</span>(double,square);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">newFn</span>(<span class=\"hljs-number\">10</span>));<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"4javascript面向对象\"><a class=\"markdownIt-Anchor\" href=\"#4javascript面向对象\">#</a> 4.JavaScript 面向对象</h2>\n<h3 id=\"1深入理解对象\"><a class=\"markdownIt-Anchor\" href=\"#1深入理解对象\">#</a> 1. 深入理解对象</h3>\n<ol>\n<li>\n<p>补充</p>\n<ol>\n<li>JavaScript 支持多种编程范式，包括函数式编程、面向对象编程</li>\n<li>JavaScript 中的对象被设计成一组属性的无序集合，类似哈希表</li>\n<li>key 是一个标识符名称，value 可以是任意类型，也可以是其他对象或者函数类型</li>\n<li>如果值是一个函数，那么我们可以称之为是对象的方法</li>\n</ol>\n</li>\n<li>\n<p>对象的语法</p>\n<ol>\n<li>创建对象的两种方式\n<ol>\n<li>使用 <code>new</code>  关键字及 <code>Object类</code> 进行创建</li>\n<li>通过字面量进行创建</li>\n</ol>\n</li>\n<li>对象字面量</li>\n<li>对象的类型</li>\n<li>函数对象</li>\n</ol>\n</li>\n<li>\n<p>对象的内容</p>\n<ol>\n<li>\n<p>属性和方法定义</p>\n<ol>\n<li>对象方法补充\n<ol>\n<li><code>preventExtensions</code> : 禁止对象扩展新属性</li>\n<li><code>seal</code> : 密封对象，不允许配置和删除属性，禁止对象配置 / 删除里面的属性即设置 <code>configurable:false</code></li>\n<li><code>freeze</code> : 冻结对象，不允许修改现有的属性，使属性不可以修改即设置 <code>writable:false</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>对象属性描述符</p>\n<ol>\n<li>\n<p>想要对一个属性进行比较精准的操作控制，那么我们就可以使用属性描述符</p>\n</li>\n<li>\n<p>通过属性描述符可以精准的添加或修改对象的属性</p>\n</li>\n<li>\n<p>属性描述符需要使用 ** <code>Object.defineProperty()</code> ** 来对属性进行添加或者修改</p>\n</li>\n<li>\n<p><code>Object.defineProperty(obj,prop,descriptor)</code></p>\n<ol>\n<li><code>obj</code> : 需要定义属性的对象</li>\n<li><code>prop</code> : 将要定义或修改的属性名称或 <code>Symbol</code></li>\n<li><code>descriptor</code> : 将要定义或修改的<strong>属性描述符</strong></li>\n<li>该方式添加的属性默认是不可枚举的</li>\n</ol>\n</li>\n<li>\n<p><strong> <code>Object.defineProperties()</code> </strong>: 在一个对象上定义多个新的属性或修改现有属性，返回该对象</p>\n</li>\n<li>\n<p>属性描述符</p>\n<ol>\n<li>\n<p>数据属性描述符</p>\n<ol>\n<li><code>configurable</code> : 属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符\n<ol>\n<li>当我们直接在一个对象上定义某个属性时，这个属性的 [Configurable] 为 true</li>\n<li>当我们通过属性描述符定义一个属性时，这个属性的 [Configurable] 默认为 false</li>\n</ol>\n</li>\n<li><code>enumerable</code> : 属性是否可以通过 for-in 或者 Object.keys () 返回该属性\n<ol>\n<li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true</li>\n<li>当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false</li>\n</ol>\n</li>\n<li><code>value</code> : 属性的 value 值，读取属性时会返回该值，修改属性时，会对其进行修改\n<ol>\n<li>默认情况下这个值是 undefined</li>\n</ol>\n</li>\n<li><code>writable</code> : 表示是否可以修改属性的值\n<ol>\n<li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Writable]] 为 true</li>\n<li>当我们通过属性描述符定义一个属性时，这个属性的 [[Writable]] 默认为 false</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>存取 (访问器) 属性描述符</p>\n<ol>\n<li><code>configurable</code> : 属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符\n<ol>\n<li>当我们直接在一个对象上定义某个属性时，这个属性的 [Configurable] 为 true</li>\n<li>当我们通过属性描述符定义一个属性时，这个属性的 [Configurable] 默认为 false</li>\n</ol>\n</li>\n<li><code>enumerable</code> : 属性是否可以通过 for-in 或者 Object.keys () 返回该属性\n<ol>\n<li>当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true</li>\n<li>当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false</li>\n</ol>\n</li>\n<li><code>get</code> : 获取属性时会执行的函数，默认值为 <code>undefined</code></li>\n<li><code>set</code> : 设置属性时会执行的函数，默认值为 undefined</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> object = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;德尔蓝卡&quot;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span>,<br>  <span class=\"hljs-attr\">_address</span>:<span class=\"hljs-string\">&quot;北京市&quot;</span><br>&#125;<br><span class=\"hljs-comment\">// 存取属性描述符</span><br><span class=\"hljs-comment\">// 1、隐藏某一个私有属性不希望直接被外界使用和赋值</span><br><span class=\"hljs-comment\">// 2、截获某一个属性它访问和设置值的过程时，会使用存储属性描述符</span><br><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(object,<span class=\"hljs-string\">&quot;address&quot;</span>,&#123;<br>  <span class=\"hljs-attr\">configurable</span>:<span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">enumerable</span>:<span class=\"hljs-literal\">true</span>,<br>  <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-title function_\">foo</span>();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_address</span>;<br>  &#125;,<br>  <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) &#123;<br>    <span class=\"hljs-title function_\">bar</span>();<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_address</span> = value<br>  &#125;<br>&#125;)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(object.<span class=\"hljs-property\">address</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(object);<br>object.<span class=\"hljs-property\">address</span> = <span class=\"hljs-string\">&quot;上海市&quot;</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(object);<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;获取一次属性&quot;</span>);<br>&#125;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bar</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;设置一次属性值&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>configurable</th>\n<th>enumerable</th>\n<th>value</th>\n<th>writable</th>\n<th>get</th>\n<th>set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n</tr>\n<tr>\n<td>存取属性描述符</td>\n<td>可以</td>\n<td>可以</td>\n<td>不可以</td>\n<td>不可以</td>\n<td>可以</td>\n<td>可以</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n</li>\n<li>\n<p>获取对象的属性描述符</p>\n<ol>\n<li><code>getOwnPropertyDescriptor</code> : 获取某一个特定属性的属性描述符</li>\n<li><code>getOwnPropertyDescriptors</code> : 获取所有属性的属性描述符</li>\n</ol>\n</li>\n<li>\n<p>访问器属性使用</p>\n</li>\n<li>\n<p>对象属性判断</p>\n</li>\n</ol>\n</li>\n<li>\n<p>对象的拷贝</p>\n<ol>\n<li>对象的引用赋值</li>\n<li>对象的浅拷贝</li>\n<li>对象的深拷贝</li>\n</ol>\n</li>\n<li>\n<p>ES6 对象增强</p>\n<ol>\n<li><code>Object.is()</code></li>\n<li>简写属性名</li>\n<li>可计算属性名称</li>\n<li>简写方法名</li>\n<li>对象解构\n<ol>\n<li>嵌套解构</li>\n<li>部分解构</li>\n<li>参数上下文匹配</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2面向对象编程\"><a class=\"markdownIt-Anchor\" href=\"#2面向对象编程\">#</a> 2. 面向对象编程</h3>\n<ol>\n<li>\n<p>理解面向对象</p>\n<ol>\n<li>什么是面向对象编程</li>\n<li>面向对象编程的特性\n<ol>\n<li>封装</li>\n<li>继承</li>\n<li>多态</li>\n</ol>\n</li>\n<li>类和对象的关系</li>\n</ol>\n</li>\n<li>\n<p>创建对象方式</p>\n<ol>\n<li>工厂模式创建\n<ol>\n<li>该模式可以减少代码的重复量，缺点是无法获取对象的真实类型，获取对象类型都是 <code>object</code></li>\n</ol>\n</li>\n<li>构造函数创建\n<ol>\n<li>构造函数也称之为构造器 (constructor), 通常是我们在创建对象时会调用的函数</li>\n<li>一个普通的函数被使用 new 操作符来调用了，那么这个函数就称之为是一个构造函数</li>\n<li><code>new</code>\n<ol>\n<li>在函数内存中创建一个新的对象（空对象）</li>\n<li>这个对象内部的 [[prototype]] 属性会被赋值为该构造函数的 prototype 属性</li>\n<li>构造函数内部的 this，会指向创建出来的新对象</li>\n<li>执行函数的内部代码（函数体代码）</li>\n<li>如果构造函数没有返回非空对象，则返回创建出来的新对象</li>\n</ol>\n</li>\n<li>缺点：构造函数的缺点，需要为每一个对象的函数去创建一个函数对象实例，重复的创建对象</li>\n</ol>\n</li>\n<li>原型创建模式\n<ol>\n<li>认识原型</li>\n<li>对象的原型（隐式原型）\n<ol>\n<li>JavaScript 当中每个对象都有一个特殊的内置属性 [[prototype]]，这个特殊的对象可以指向另外一个对象</li>\n<li>原型对象的作用\n<ol>\n<li>当我们通过引用对象的属性 key 来获取一个 value 时，它会触发 [[Get]] 的操作</li>\n<li>这个操作会首先检查该属性是否有对应的属性，如果有的话就使用它</li>\n<li>如果对象中没有该属性，那么会访问对象 [[prototype]] 内置属性指向的对象上的属性</li>\n</ol>\n</li>\n<li>获取原型的方式\n<ol>\n<li>通过对象的__proto__属性可以获取到（但是这个是早期浏览器自己添加的，存在一定的兼容性问题）</li>\n<li>通过 Object.getPrototypeOf 方法可以获取到</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>函数的原型（显示原型）\n<ol>\n<li>所有的函数都有一个 prototype 的属性</li>\n<li></li>\n</ol>\n</li>\n<li><code>prototype属性</code>\n<ol>\n<li>指向对象的显式原型</li>\n</ol>\n</li>\n<li><code>constructor属性</code>\n<ol>\n<li>原型对象的属性：返回构造函数</li>\n</ol>\n</li>\n<li><code>__proto__属性</code>\n<ol>\n<li>指向对象的隐式原型</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>面向对象继承</p>\n<ol>\n<li>\n<p>认识原型链</p>\n<ol>\n<li>深入原型对象\n<ol>\n<li><code>Object</code>  是顶层对象， <code>Object的原型对象上面没有原型对象而是null</code></li>\n<li><code>object</code>  是所有类的父类</li>\n</ol>\n</li>\n<li>简洁的原型语法</li>\n<li>修改原型的属性\n<ol>\n<li>需要在原型上添加过多的属性，通常我们会重新整个原型对象</li>\n<li>每创建一个函数，就会同时创建它的 prototype 对象，这个对象也会自动获取 constructor 属性</li>\n<li>这里给 prototype 重新赋值了一个对象，那么这个新对象的 constructor 属性，会指向 Object 构造函数，而不是 Person 构造函数了</li>\n<li>默认情况下原生的 constructor 属性是不可枚举</li>\n<li>如果希望解决这个问题，就可以使用我们前面介绍的 Object.defineProperty () 函数了</li>\n</ol>\n</li>\n<li>深入理解原型链\n<ol>\n<li>可以使用原型链继承</li>\n<li>原型链最顶层的原型对象就是 <code>Object</code>  的原型对象</li>\n</ol>\n</li>\n<li>原型和实例的关系\n<ol>\n<li>实例的属性 <code>__proto__</code> 指向原型对象</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>继承的实现</p>\n<ol>\n<li>\n<p>原型链实现继承</p>\n<ol>\n<li>实现方式： <code>子类.prototype = new 父类();</code></li>\n<li>原型链实现继承的弊端\n<ol>\n<li>通过直接打印对象是看不到继承的属性</li>\n<li>这个属性会被多个对象共享，如果这个属性是一个引用类型，，其中一个共享对象进行修改时，那么就会造成问题，若是基本数据类型则不会出现该问题</li>\n<li>不能给 Person 传递参数，因为这个对象是一次性创建的</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>借用构造函数实现继承 (经典继承)</p>\n<ol>\n<li>\n<p><code>constructor stealing</code> : 称之为借用构造函数、经典继承、伪造对象</p>\n</li>\n<li>\n<p>因为函数可以在任意的时刻被调用，因此通过 apply () 和 call () 方法也可以在新创建的对象上执行构造函数</p>\n</li>\n<li>\n<p>实现方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 子类:私有属性和方法定义</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name,age,friends,son</span>) &#123;<br>  <span class=\"hljs-comment\">// this指的是通过new绑定创建的stu对象</span><br>  <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>,name,age,friends);<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sno</span> = son;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>借用构造函数继承存在的弊端</p>\n<ol>\n<li>父类 Person 函数至少被调用了两次</li>\n<li>stu 原型对象上多出一些属性，而这些属性出现重复，因为子类本身就已经存在，但是这些属性没有存在的必要</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>组合借用继承方式（<strong>和借用继承没有不同</strong>）</p>\n<ol>\n<li>实现方式</li>\n<li>存在弊端\n<ol>\n<li>一般都会调用两次父类构造函数，一次在创建子类原型的时候，一次在子类构造函数内部 (也就是每次创建子类实例的时候)</li>\n<li>所有的子类实例事实上会拥有两份父类的属性，一份在当前的实例自己里面 (也就是 person 本身的)，另一份在子类对应的原型对象中 (也就是 person.__proto__里面), 无需担心访问出现问题，默认一定是访问实例本身的属性</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>寄生式继承函数</p>\n<ol>\n<li>实现方式</li>\n<li>存在弊端</li>\n</ol>\n</li>\n<li>\n<p>集成式组合继承</p>\n<ol>\n<li>释放方式</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>ES6 类的使用</p>\n<ol>\n<li>class 类的定义\n<ol>\n<li>声明式、表达式两种</li>\n<li>构造方法</li>\n<li>属性定义</li>\n<li>方法定义</li>\n</ol>\n</li>\n<li>类的实例化过程\n<ol>\n<li>类的构建过程解析</li>\n<li>类的类型、function 类型</li>\n</ol>\n</li>\n<li>属性分类解析\n<ol>\n<li>实例属性和方法</li>\n<li>原型属性和访问器</li>\n<li>static 类方法和属性</li>\n</ol>\n</li>\n<li>class 类的继承\n<ol>\n<li>extends 关键字</li>\n<li>super 函数的使用\n<ol>\n<li>构造函数</li>\n<li>普通函数</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Babel 的处理\n<ol>\n<li>Babel 工具对 class 的处理\n<ol>\n<li>阅读 Babel 转换后的代码</li>\n</ol>\n</li>\n<li>Babel 对继承的转换处理\n<ol>\n<li>Babel 继承的源码阅读</li>\n<li>_inherits</li>\n<li>_possibleConstructorReturn</li>\n<li>_classCallCheck</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>面向对象面试题</p>\n</li>\n</ol>\n<h2 id=\"5es6~12新特性\"><a class=\"markdownIt-Anchor\" href=\"#5es6~12新特性\">#</a> 5.ES6~12 新特性</h2>\n<h3 id=\"1es6常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#1es6常见新特性\">#</a> 1.ES6 常见新特性</h3>\n<ol>\n<li>基础补充\n<ol>\n<li>对象增强写法</li>\n<li>数组 / 对象解构</li>\n<li>var 与 let/const 区别</li>\n<li>作用域提升</li>\n<li>不允许重复声明变量</li>\n<li>window 对象的区别，let/const 不会添加到 window 对象上，<strong>保存的位置与之前也会有一定的区别</strong></li>\n<li></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2es7常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#2es7常见新特性\">#</a> 2.ES7 常见新特性</h3>\n<h3 id=\"3es8常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#3es8常见新特性\">#</a> 3.ES8 常见新特性</h3>\n<h3 id=\"4es9常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#4es9常见新特性\">#</a> 4.ES9 常见新特性</h3>\n<h3 id=\"5es10常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#5es10常见新特性\">#</a> 5.ES10 常见新特性</h3>\n<h3 id=\"6es11常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#6es11常见新特性\">#</a> 6.ES11 常见新特性</h3>\n<h3 id=\"7es12常见新特性\"><a class=\"markdownIt-Anchor\" href=\"#7es12常见新特性\">#</a> 7.ES12 常见新特性</h3>\n<h2 id=\"6proxy-reflect\"><a class=\"markdownIt-Anchor\" href=\"#6proxy-reflect\">#</a> 6.Proxy-Reflect</h2>\n<h3 id=\"1proxy\"><a class=\"markdownIt-Anchor\" href=\"#1proxy\">#</a> 1.Proxy</h3>\n<ol>\n<li>在 ES6 中，新增了一个 Proxy 类，这个类从名字就可以看出来，是用于帮助我们创建一个代理</li>\n<li>如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy 对象）</li>\n<li>之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作</li>\n</ol>\n<h3 id=\"2reflect\"><a class=\"markdownIt-Anchor\" href=\"#2reflect\">#</a> 2.Reflect</h3>\n<ol>\n<li>Reflect 也是 ES6 新增的一个 API，它是一个对象，字面的意思是反射</li>\n<li>它主要提供了很多操作 JavaScript 对象的方法，有点像 Object 中操作对象的方法</li>\n<li></li>\n</ol>\n<h2 id=\"7异步处理\"><a class=\"markdownIt-Anchor\" href=\"#7异步处理\">#</a> 7. 异步处理</h2>\n<h3 id=\"1迭代器和生成器\"><a class=\"markdownIt-Anchor\" href=\"#1迭代器和生成器\">#</a> 1. 迭代器和生成器</h3>\n<ol>\n<li>\n<p>迭代器</p>\n<ol>\n<li>本身为一个对象，使用户在容器对象上遍访的对象，使用该接口无需关心对象的内部实现细节，<strong>迭代器是帮助我们对某个数据结构进行遍历的对象</strong></li>\n<li>在 JavaScript 中，<strong>迭代器也是一个具体的对象，这个对象需要符合迭代器协议 (iterator protocol)</strong>, 迭代器协议定义了产生一系列值 (无论是有限还是无限个) 的标准方式，那么在 js 中这个标准就是一个<strong>特定的 next 方法</strong></li>\n<li>next 方法有如下的要求\n<ol>\n<li>一个无参数函数或者含有一个参数的函数，返回一个应当拥有以下两个属性的对象\n<ol>\n<li>done（boolean）\n<ol>\n<li>如果迭代器可以产生序列中的下一个值，则为 false，这等价于没有指定 done 这个属性</li>\n<li>如果迭代器已将序列迭代完毕，则为 true。这种情况下，value 是可选的，如果它依然存在，即为迭代结束之后的默认返回值</li>\n</ol>\n</li>\n<li>value\n<ol>\n<li>迭代器返回的任何 JavaScript 值，done 为 true 时可省略</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>可迭代对象</p>\n<ol>\n<li>\n<p>当一个对象实现了 ** <code>iterable protocol</code> ** 协议时，它就是一个可迭代对象</p>\n</li>\n<li>\n<p>这个对象要求是必须实现 <code>@@iterator方法</code> ，即 ** <code>[Symbol.iterator]属性对应着一个函数</code>  ** 在代码中我们使用 <code>Symbol.iterator</code>  访问该属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//可迭代对象iteratorObj</span><br><span class=\"hljs-keyword\">const</span> iteratorObj = &#123;<br>  <span class=\"hljs-attr\">array</span>: [<span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">222</span>, <span class=\"hljs-number\">333</span>],<br>  [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">return</span> &#123;<br>      <span class=\"hljs-comment\">// 返回一个迭代器</span><br>      <span class=\"hljs-attr\">next</span>:<span class=\"hljs-function\">() =&gt;</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">array</span>.<span class=\"hljs-property\">length</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">array</span>[index++] &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>          <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">undefined</span> &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iteratorObj[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]);<br><span class=\"hljs-comment\">// 调用该方法会生成一个可迭代对象</span><br><span class=\"hljs-keyword\">const</span> iterator = iteratorObj[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-comment\">// 返回一个新的可迭代对象</span><br><span class=\"hljs-keyword\">const</span> iterator2 = iteratorObj[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]();<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator2);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator2.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator2.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator2.<span class=\"hljs-title function_\">next</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iterator2.<span class=\"hljs-title function_\">next</span>());<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>原生迭代器对象，已经实现可迭代协议有： <code>String、Array、Map、Set、arguments对象、NodeList集合</code></p>\n</li>\n<li>\n<p>可迭代对象的应用</p>\n<ol>\n<li>JavaScript 语法： <code>for...of</code> 、 <code>展开语法(spread syntax)</code> 、 <code>yield*</code> 、 <code>解构赋值</code></li>\n<li>创建一些对象时： <code>new Map</code> 、 <code>new WeakMap</code> 、 <code>new Set</code> 、 <code>new WeakSet</code></li>\n<li>一些方法调用： <code>Promise.all(iterator)</code> 、 <code>Promise.race(iterator)</code> 、 <code>Array.from(iterator)</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>生成器</p>\n<ol>\n<li>生成器是 ES6 中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等</li>\n<li>生成器函数也是一个函数，但是和普通的函数有一些区别\n<ol>\n<li>生成器函数需要<strong>在 function 的后面加一个符号 <code>*</code> </strong></li>\n<li>生成器函数可以通过 ** <code>yield关键字</code>  ** 来控制函数的执行流程</li>\n<li>生成器函数的<strong>返回值是一个 Generator</strong>（生成器）</li>\n<li>生成器事实上是一种<strong>特殊的迭代器</strong>，MDN：Instead,they return a special type of iterator,called aGenerator</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"2promise的使用\"><a class=\"markdownIt-Anchor\" href=\"#2promise的使用\">#</a> 2.Promise 的使用</h3>\n<ol>\n<li>\n<p><code>Promise</code>  是一个类，可以翻译为承诺、许诺、期约</p>\n</li>\n<li>\n<p><code>then</code>  是一个 Promise 对象上的一个方法：实际上是 Promise 原型上的 <code>Promise.prototype.then()</code></p>\n</li>\n<li>\n<p>浏览器的循环事件</p>\n<ol>\n<li>\n<p>进程与线程理解</p>\n<ol>\n<li>进程：计算已经运行的程序，是操作系统管理程序的一种方式，启动一个应用程序，就会默认启动一个进程 (也可能是多个进程)</li>\n<li>线程：操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中，启动每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称为主线程</li>\n</ol>\n</li>\n<li>\n<p>浏览器中的 JavaScript 线程</p>\n<ol>\n<li>JavaScript 是单线程，拥有自己的容器进程：浏览器或 node</li>\n<li>浏览器是多进程的，当我们打开一个 tab 页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出</li>\n<li>JavaScript 同一时刻只能做一件事情，如果该事情非常耗时，那么当前的线程就会被阻塞，然而浏览器每一个进程是多线程的，那么其他的线程可以来完成这个耗时的操作，如：网络请求、定时器等，我们只需要在特定的时刻执行回调即可</li>\n</ol>\n</li>\n<li>\n<p>事件循环图解</p>\n<p><img src=\"../../all_photo/image-20220725112224437.png\" alt=\"image-20220725112224437\"></p>\n</li>\n<li>\n<p>微任务和宏任务</p>\n<ol>\n<li>微任务队列 (microtask queue)：一般有 queueMicrotask ()、Promise 的 then 回调、MutationObserver 的 API: 监听 DOM 的调用</li>\n<li>宏任务队列 (macrotask queue)：一般有定时器、ajax、DOM 事件点击、UI Rendering 渲染</li>\n<li>规范：在执行任何的宏任务之前，都需要先保证微任务队列已经被清空</li>\n</ol>\n</li>\n<li>\n<p>事件循环对于两个队列的优先级</p>\n<ol>\n<li><code>main script</code>  代码优先执行</li>\n<li>在执行任何一个宏任务之前 (不是队列，而是一个宏任务)，都会先查看微任务队列中是否有任务需要执行，也就是说宏任务执行之前，必须保证微任务对队列是空的，若果不为空，那么就优先执行微任务队列中的任务 (回调函数)</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>node 的事件循环</p>\n<ol>\n<li>浏览器中 <code>EventLoop即事件循环</code> 是根据 HTML5 定义的规范来实现的，不同的浏览器可能会有不同的实现，而 node 中是由 <code>libuv库</code> 现实的</li>\n<li>微任务和宏任务\n<ol>\n<li>宏任务 (macrotask)：setTimeout、setInterval、IO 事件、setImmediate、close 事件</li>\n<li>微任务 (microtask)：Promise 的 then 回调、process.nextTick、queueMicrotask</li>\n<li>node 队列执行顺序\n<ol>\n<li><code>next tick microtask queue</code></li>\n<li><code>other microtask queue</code></li>\n<li><code>timer queue</code></li>\n<li><code>poll queue</code></li>\n<li><code>check queue</code></li>\n<li><code>close queue</code></li>\n</ol>\n</li>\n<li></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"3async和await\"><a class=\"markdownIt-Anchor\" href=\"#3async和await\">#</a> 3.async 和 await</h3>\n<ol>\n<li><code>async</code>  关键字用于声明一个异步函数</li>\n<li><code>async</code>  是 <code>asynchronous</code>  单词的缩写，意思为异步、非同步</li>\n<li><code>sync</code>  是 <code>synchronous</code>  单词的缩写，意思为同步、同时</li>\n</ol>\n<h2 id=\"8模块化与包管理工具\"><a class=\"markdownIt-Anchor\" href=\"#8模块化与包管理工具\">#</a> 8. 模块化与包管理工具</h2>\n<ol>\n<li>模块化开发\n<ol>\n<li>认识模块化开发\n<ol>\n<li>事实上模块化开发最终的目的是将程序划分成一个个小的结构，这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构，这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用，也可以通过某种方式，导入另外结构中的变量、函数、对象</li>\n</ol>\n</li>\n<li><code>commonJS规范</code>\n<ol>\n<li><code>CommonJS和Node关系</code>\n<ol>\n<li>CommonJS 是一个规范，最初是在浏览器以外的地方使用，当时被命名为<strong> ServerJS</strong>，后来为了体现它的广泛性，修改为<strong> CommonJS</strong>，平时我们也会简称为<strong> CJS</strong></li>\n<li>Node 是 CommonJS 在服务器端一个具有代表性的实现，Browserify 是 CommonJS 在浏览器中的一种实现，webpack 打包工具具备对 CommonJS 的支持和转换，Node 中对 CommonJS 进行了支持和实现，让我们在开发 node 的过程中可以方便的进行模块化开发，在 Node 中每一个 js 文件都是一个单独的模块，这个模块中包括 CommonJS 规范的核心变量：exports、module.exports、require，我们可以使用这些变量来方便的进行模块化开发，前面我们提到过模块化的核心是导出和导入，Node 中对其进行了实现：exports 和 module.exports 可以负责对模块中的内容进行导出，require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><code>AMD和CMD规范</code></li>\n<li><code>ESModule规范化</code></li>\n<li><code>ES Module和CommonJS</code></li>\n</ol>\n</li>\n<li>npm 包管理工具</li>\n</ol>\n",
            "tags": [
                "JavaScript"
            ]
        },
        {
            "id": "http://example.com/2018/11/25/3001_CSS/",
            "url": "http://example.com/2018/11/25/3001_CSS/",
            "title": "CSS基础",
            "date_published": "2018-11-25T13:02:36.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h4 id=\"src与href的区别\"><a class=\"markdownIt-Anchor\" href=\"#src与href的区别\">#</a> src 与 href 的区别</h4>\n<ul>\n<li>src\n<ul>\n<li>引用外部资源 (img、script、video、iframe)</li>\n<li>替换当前元素内容</li>\n<li>暂停其他资源的下载，同步加载执行</li>\n</ul>\n</li>\n<li>href\n<ul>\n<li>连接外部资源 (a、link)</li>\n<li>不会替换当前元素内容</li>\n<li>不会暂停其他资源的加载</li>\n</ul>\n</li>\n<li>src 是指向外部资源的位置，指向的内容会嵌⼊到⽂档中当前标签所在的位置，在请求 src 资源时会将其指向的资源下载并应⽤到⽂档内如 js 脚本、img 图⽚和 iframe 等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，因此⼀般 js 脚本会放在底部⽽不是头部。<br>\nhref 是指向⽹络资源所在位置（的超链接，⽤来建⽴和当前元素或⽂档之间的连接，当浏览器识别到它他指向的⽂件时，就会异步下载资源，不会停⽌对当前⽂档的执行</li>\n</ul>\n",
            "tags": [
                "HTML基础"
            ]
        },
        {
            "id": "http://example.com/2018/11/06/2002_HTML/",
            "url": "http://example.com/2018/11/06/2002_HTML/",
            "title": "语义化标签了解",
            "date_published": "2018-11-06T01:32:12.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"渐进增强与优雅降级的理解及区别\"><a class=\"markdownIt-Anchor\" href=\"#渐进增强与优雅降级的理解及区别\">#</a> 渐进增强与优雅降级的理解及区别</h3>\n<p><strong>渐进增强（Progressive Enhancement）：</strong><br>\n一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。<br>\n<strong>优雅降级（Graceful Degradation）：</strong><br>\n一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。<br>\n<strong>两者区别</strong><br>\n 1、广义：<br>\n其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级<br>\n 2、狭义：<br>\n渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 例子 */</span><br><span class=\"hljs-selector-class\">.transition</span> &#123; <span class=\"hljs-comment\">/*渐进增强写法*/</span><br>  -webkit-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>     -moz-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>       -o-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>          <span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>&#125;<br><span class=\"hljs-selector-class\">.transition</span> &#123; <span class=\"hljs-comment\">/*优雅降级写法*/</span><br>          <span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>       -o-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>     -moz-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>  -webkit-<span class=\"hljs-attribute\">transition</span>: all .<span class=\"hljs-number\">5s</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"常见的兼容性问题\"><a class=\"markdownIt-Anchor\" href=\"#常见的兼容性问题\">#</a> 常见的兼容性问题</h3>\n<ol>\n<li margin:0;padding:0;=\"\">不同浏览器的标签默认的 margin 和 padding 不一样。*</li>\n<li>IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。</li>\n<li>设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。</li>\n<li>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</li>\n<li>超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}</li>\n</ol>\n<h4 id=\"浏览器模式\"><a class=\"markdownIt-Anchor\" href=\"#浏览器模式\">#</a> 浏览器模式</h4>\n<ul>\n<li>怪异模式：页面以一种比较宽松的向后兼容的非标准行为</li>\n<li>接近标准模式：只有少数的怪异模式</li>\n<li>标准模式：由 HTML 和 CSS 的规范描述行为<br>\n <code>&lt;!DOCTYPE html&gt;</code>  唯一的作用是启用标准模式</li>\n</ul>\n<h4 id=\"标签的区别\"><a class=\"markdownIt-Anchor\" href=\"#标签的区别\">#</a> 标签的区别</h4>\n<ul>\n<li>strong：加重语气，b: 简单加粗，浏览器搜索引擎更侧重 strong 标签</li>\n<li>title：无明确意义，只表示标题；h1：层次明确的标题，对页面信息的抓取有很大的影响</li>\n<li>i 内容展示为斜体，em 表示强调文本</li>\n</ul>\n<h4 id=\"导入css文件方式及区别\"><a class=\"markdownIt-Anchor\" href=\"#导入css文件方式及区别\">#</a> 导入 CSS 文件方式及区别</h4>\n<ul>\n<li>内联方式</li>\n<li>嵌入方式</li>\n<li>外链方式 <code>link</code>\n<ul>\n<li><code>link</code>  是 html 标签，而 <code>@import</code>  是 css 的</li>\n<li>页面被加载时， <code>link</code>  会同时被加载，而 <code>@import</code>  引用的 css 会等到页面被加载完再加载</li>\n<li><code>link</code>  的权重高于 <code>@import</code>  的权重</li>\n</ul>\n</li>\n<li><code>import</code>  导入方式\n<ul>\n<li>该方式是 CSS 属性，只能加载 CSS</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"script标签中defer和async的区别\"><a class=\"markdownIt-Anchor\" href=\"#script标签中defer和async的区别\">#</a>  <code>script</code>  标签中 defer 和 async 的区别</h4>\n<ul>\n<li><code>&lt;script&gt;</code> : 浏览器会立即并执行相应的脚本，不会等待后续加载的文档元素，只要读取到就会开始加载、执行，这种情况就阻塞了后续文档的加载</li>\n<li><code>&lt;script defer&gt;</code> ：异步加载外部的 js 脚本文件，不会阻塞页面的解析；多个带 defer 属性的标签，按照加载顺序执行；加载后续文档的过程和 js 脚本的加载是并行进行的即异步的 (此时仅加载不执行)，js 脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded 事件触发执行之前？？？</li>\n<li><code>&lt;script async&gt;</code> ：异步加载外部的 js 脚本文件，不会阻塞页面的解析；多个带 async 属性的标签，不能保证加载的顺序；表示后续文档的加载和执行与 js 脚本的加载和执行是并行进行的即异步执行；</li>\n</ul>\n",
            "tags": [
                "HTML基础"
            ]
        },
        {
            "id": "http://example.com/2018/11/05/2001_HTML/",
            "url": "http://example.com/2018/11/05/2001_HTML/",
            "title": "语义化标签了解",
            "date_published": "2018-11-05T05:32:31.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<ul>\n<li>概念： <code>合理正确的使用语义化标签来创建页面结构</code> ，即正确的标签做正确的事情</li>\n<li>优点：\n<ul>\n<li>无 CSS 样式编写时会呈现很好的内容效果</li>\n<li>代码结构清晰，易于阅读，便于团队协作开发与维护，也有利于屏幕阅读器渲染页面</li>\n<li>有利于搜索引擎优化 SEO，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li>\n<li>提升用户体验，比如 title、alt 可以用于解释名词或者图片信息，label 标签灵活应用</li>\n</ul>\n</li>\n<li>标签 (切片元素)：header、nav、main、article、section、aside、footer\n<ul>\n<li><code>&lt;blockquote&gt;</code>  用来定义摘自另一个源的块引用，在该标签中的内容会被从常规文本中分离出来，默认会表现为左右两侧缩进的群本，缩近距离一般为 40 个像素 (即外边距 40px), 定义块引用，浏览器会在 blockquote 元素前后添加换行，并增加外边距，cite 属性标注引用的信息的来源文档或者相关信息的 URL</li>\n<li><code>&lt;header&gt;</code>  定义页面的介绍展示区域，网站 logo、主导航、搜索框等</li>\n<li><code>&lt;nav&gt;</code>  导航栏</li>\n<li><code>&lt;main&gt;</code>  一个页面只能使用一次</li>\n<li><code>&lt;article&gt;</code>  定义页面独立的内容，可以有自己的 header、footer、sections 等</li>\n<li><code>&lt;section&gt;</code>  用于标记文档的各个部分，例如长表单文章的章节或主要部分</li>\n<li><code>&lt;aside&gt;</code>  定义与主要内容相关的内容块，通常显示为侧边栏</li>\n<li><code>&lt;footer&gt;</code>  定义文档的底部区域，通常包括文档作者、著作权信息等</li>\n<li><code>&lt;figure&gt;</code>  标签规定独立的流内容 (图像、图表、照片、代码等), 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响</li>\n<li><code>&lt;figcaption&gt;</code>  标签定义  <code>&lt;figure&gt;</code>  元素的标题，元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置</li>\n<li><code>&lt;small&gt;</code>  为较不重要的内容定义小字体，如果被包围的字体已经是字体模型所支持的最小字号，那么  <code>&lt;small&gt;</code>  标签将不起任何作用</li>\n<li><code>&lt;h1&gt;</code>  ~  <code>&lt;h6&gt;</code>  定义页面的标题，h1 具有最高等级，h6 最低</li>\n<li><code>&lt;strong&gt;</code>  把文本定义为语气更强的强调的内容，以表示内容的重要性</li>\n<li><code>&lt;em&gt;</code>  标记内容着重点（大量用于提升段落文本语义），通常呈现为斜体文字</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "HTML基础"
            ]
        },
        {
            "id": "http://example.com/2018/11/04/2004_HTML/",
            "url": "http://example.com/2018/11/04/2004_HTML/",
            "title": "HTML基础",
            "date_published": "2018-11-04T14:32:45.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h4 id=\"flex-布局\"><a class=\"markdownIt-Anchor\" href=\"#flex-布局\">#</a> Flex 布局</h4>\n<p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。<br>\nFlex 是 Flexible Box 的缩写，意为 &quot;弹性布局&quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。<br>\n容器的属性：</p>\n<ul>\n<li>flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li>\n<li>flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li>\n<li flex-flow:=\"\" ||=\"\" ;=\"\">flex-flow： .box</li>\n<li>justify-content：对其方式，水平主轴对齐方式</li>\n<li>align-items：对齐方式，竖直轴线方向</li>\n<li>align-content</li>\n</ul>\n<p>项目的属性（元素的属性）：</p>\n<ul>\n<li>order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li>\n<li>flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li>\n<li>flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li>\n<li>flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li>\n<li>flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li>\n<li>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li>\n<li>align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li>\n</ul>\n",
            "tags": [
                "HTML基础"
            ]
        },
        {
            "id": "http://example.com/2018/10/28/2003_HTML/",
            "url": "http://example.com/2018/10/28/2003_HTML/",
            "title": "HTML基础",
            "date_published": "2018-10-28T03:02:36.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"网页笔记\"><a class=\"markdownIt-Anchor\" href=\"#网页笔记\">#</a> 网页笔记</h3>\n<p>[toc]</p>\n<h2 id=\"一-html\"><a class=\"markdownIt-Anchor\" href=\"#一-html\">#</a> 一、HTML</h2>\n<h3 id=\"1-bs和cs\"><a class=\"markdownIt-Anchor\" href=\"#1-bs和cs\">#</a> 1. B/S 和 C/S</h3>\n<p>B/S：浏览器中的网页（无需安装、无需更新、跨平台）</p>\n<p>C/S：移动端的 APP</p>\n<p>补充：</p>\n<p>客户端：用户通过客户端来使用软件</p>\n<p>服务器：服务器负责在远程处理业务逻辑</p>\n<p>服务器开发语言：Java、PHP、C#、Python、Node.js</p>\n<p>客户端形式：文字客户端、图形化界面、网页</p>\n<h3 id=\"2-特点bs\"><a class=\"markdownIt-Anchor\" href=\"#2-特点bs\">#</a> 2. 特点（B/S）</h3>\n<ul>\n<li>无需安装</li>\n<li>无需更新</li>\n<li>跨平台</li>\n</ul>\n<h3 id=\"3-简史\"><a class=\"markdownIt-Anchor\" href=\"#3-简史\">#</a> 3. 简史</h3>\n<p>​\t万维网的发明人：蒂姆伯纳斯李，制作网页的标准规范 W3C（万维网联盟）</p>\n<h3 id=\"4-结构htmlhypertext-markup-language\"><a class=\"markdownIt-Anchor\" href=\"#4-结构htmlhypertext-markup-language\">#</a> 4. 结构–HTML（Hypertext Markup Language）</h3>\n<p>​\tHTML：超文本标记语言</p>\n<h3 id=\"5-属性\"><a class=\"markdownIt-Anchor\" href=\"#5-属性\">#</a> 5. 属性</h3>\n<p>属性在开始标签里面写，属性是一个名值对；</p>\n<p>有些属性有属性值，有些属性没有属性值；</p>\n<p>​\t属性具有属性值，但是有一些属性没有属性值也对</p>\n<h3 id=\"6-文档声明\"><a class=\"markdownIt-Anchor\" href=\"#6-文档声明\">#</a> 6. 文档声明</h3>\n<p>&lt;! doctype html&gt; 放在第一行，告诉浏览器网页版本 HTML5</p>\n<p>注意：注释不能嵌套</p>\n<h3 id=\"7-进制\"><a class=\"markdownIt-Anchor\" href=\"#7-进制\">#</a> 7. 进制</h3>\n<p>所有数据在计算机中底层都是以二进制形式保存</p>\n<p>1 byte = 8 bit<br>\n1 kb（千字节）= 1024 byte<br>\n1 mb （兆字节）= 1024 kb<br>\n1 gb （吉字节）= 1024 mb<br>\n1 tb （特字节）= 1024 gb<br>\n1 pb = 1024 tb</p>\n<h3 id=\"8-编码\"><a class=\"markdownIt-Anchor\" href=\"#8-编码\">#</a> 8. 编码</h3>\n<head></head>网页的头部，标签里面的内容不显示在网页里面，主要帮助浏览器和搜索引擎来解析网页的\n<p>将字符转换为二进制码的过程称为编码</p>\n<p>将二进制码转换为字符的过程称为解码</p>\n<p>字符集（charset）编码和解码所采用的规则称为字符集，编码和解码所采用的字符集的不同会导致乱码现象</p>\n<p>常见的字符集：ASCII（美国标准码）、ISO88591（欧洲）、GBK（中国）、GB2312（中国）、UTF-8（万国码，所有国家均适用）</p>\n<p>设置编码字符格式：charset=“utf-8”</p>\n<meta charset= \"utf-8\"> \n告诉浏览器编码格式  \n</meta>\n<h3 id=\"9-标签文档\"><a class=\"markdownIt-Anchor\" href=\"#9-标签文档\">#</a> 9. 标签文档</h3>\n<p>目的查看标签的作用，网上可以查看</p>\n<p><a href=\"http://xn--www-e82fs70b28vt66a.w3school.com.cn\">建议查看 www.w3school.com.cn</a></p>\n<h3 id=\"10-实体-转义字符\"><a class=\"markdownIt-Anchor\" href=\"#10-实体-转义字符\">#</a> 10. 实体（ 转义字符）</h3>\n<p>实体查询和符号参考手册相关链接：<a href=\"https://www.w3school.com.cn/html/html_entities.asp\">https://www.w3school.com.cn/html/html_entities.asp</a></p>\n<p>在网页中编写多个空格会被浏览器默认为一个空格；若写特殊的字符时，需要使用转义字符</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">//实体的语法<br><span class=\"hljs-symbol\">&amp;nbsp;</span>//空格<br><span class=\"hljs-symbol\">&amp;gt;</span>//大于号<br><span class=\"hljs-symbol\">&amp;lt;</span>//小于号<br><span class=\"hljs-symbol\">&amp;copy;</span>//版权符号<br></code></pre></td></tr></table></figure>\n<h3 id=\"11-meta标签\"><a class=\"markdownIt-Anchor\" href=\"#11-meta标签\">#</a> 11. meta 标签</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">meta：主要用于设置一些网页中的元数据，元数据不是给用户看的<br>charset：指定网页的字符集<br>name：指定的数据名称<br>content：制定的数据内容<br>keywords：网页关键字<br>description：用于网页的描述<br>http-equiv=&quot;X-UA-Compatible&quot;：将网页重定向到另一个网站<br></code></pre></td></tr></table></figure>\n<h3 id=\"12-标签元素\"><a class=\"markdownIt-Anchor\" href=\"#12-标签元素\">#</a> 12. 标签元素</h3>\n<p>块级元素：一般通过块级元素对网页进行布局</p>\n<p>页面中独占一行的元素是块级元素</p>\n<p>行内元素：一般包裹文字</p>\n<p>在页面中不会独占一行的元素为行内元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hgroup</span>&gt;</span>标题组标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">hgroup</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">em</span>&gt;</span>加重标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">em</span>&gt;</span>\t\t//内联元素<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">blockquote</span>&gt;</span>长引用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">blockquote</span>&gt;</span>//引用标签<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">q</span>&gt;</span>短引用<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">q</span>&gt;</span>//使用&quot;&quot;包裹起来<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>换行<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>不能放任何的块级元素<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">header</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">header</span>&gt;</span>网页的头部<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>网页的主体部分<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">footer</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">footer</span>&gt;</span>网页的底部<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aside</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">aside</span>&gt;</span>侧边栏内容<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">nav</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">nav</span>&gt;</span>网页的导航栏<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">article</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">article</span>&gt;</span>表示一个独立的文章<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">section</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">section</span>&gt;</span>表示一个独立的区块 <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>行内元素，一般用于网页中选中文字<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">s</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">s</span>&gt;</span>有误文本<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>无序列表 <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span>有序列表<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>列表项<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dl</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dl</span>&gt;</span>创建一个定义列表<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dt</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dt</span>&gt;</span>定义的内容<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dd</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dd</span>&gt;</span>对内容进行解释说明<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">herf</span>=<span class=\"hljs-string\">&quot;目标地址路径&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;打开的页面的属性&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>行内元素，可以嵌套除自身之外的任何元素超链接，实现网页之间的跳转<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">herf</span>=<span class=\"hljs-string\">&quot;#id的属性值&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>锚点跳转<br>herf:&quot;javascript:;&quot;作为herf的属性，点击超链接什么也不会发生<br>_self:在当前页面打开超链接<br>_blank:在新的页面打开超链接<br>./当前文件所在目录<br>../当前文件所在目录的上一级目录<br>锚链接的用法：<br>1. 本页面锚链接(使用#name跳转到对应锚点)<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#top&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_self&quot;</span>&gt;</span>这是一个超链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>2. 页面间锚链接(跳转到其他页面的指定位置，设置锚点)<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">herf</span>=<span class=\"hljs-string\">&quot;t.html#nav&quot;</span>&gt;</span>跳转到新页面指定部分<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>块级标签与行级标签的特点与区别:<br>块级标签自动换行，前后隔一行；行级标签不会自动换行，从左往右依次显示<br>块级标签的宽度默认是100%；行级标签的宽度由文字内容撑开<br>块级标签可以设置宽度、高度、边距等属性；行级标签不能设置上述属性<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;图片路径&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;图片描述&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;图片标识&quot;</span>&gt;</span>替换元素，基于块级元素与行内元素之间,成比例缩放，单位像素，一般在PC端不建议修改图片大小，在移动端需要修改图片<br>title 属性：设置图片的标题，当鼠标指在图片上后显示的文字<br>alt 属性：设置由于图片无法加载时显示的文字<br>align属性：设置图片周围文字相对于图片的位置<br>src：文件路径<br>1. 相对路径<br>2. 绝对路径<br>绝对路径只在当前计算机生效，若将网站转移服务器，则路径会失效。<br>通过绝对路径打开图片使用的是 file 协议，但网页中使用的是 http 协议，因此会出 现跨域问题，造成图片无法显示<br>3. 网络地址<br><br>图片格式：<br>jpeg（jpg）：支持的颜色比较丰富，不支持透明效果，不支持动图；一般用来显示照片<br>gif：支持的颜色比较少，支持简单透明，支持动图；颜色单一的图片，动图<br>png：支持颜色丰富，支持复杂透明，不支持动图<br>webp：谷歌推出的，专门用来显示网页图片的一种格式，具备其他图片格式的所有优点，文件较小，兼容性不好<br>base64：可以把图片转换为字符，通过字符的形式引入图片<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">iframe</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;内联网页路径&quot;</span> <span class=\"hljs-attr\">frameborder</span>=<span class=\"hljs-string\">&quot;0&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">iframe</span>&gt;</span> //frameborder表示内联网页的框架边框<br>音频文件：<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;视频资源的路径&quot;</span> <span class=\"hljs-attr\">controls</span> <span class=\"hljs-attr\">autoplay</span> <span class=\"hljs-attr\">loop</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span> <br>audio相关属性：<br>controls：是否允许用户控制播放 <br>autoplay：音频文件是否自动播放，该属性用的较少，一般页面无自动播放，用户体验不好<br>loop：音频是否循环播放<br>除了使用src来指定外部文件的路径以外，还可以使用source指定外部文件<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">audio</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;文件路径（MP3）&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>大部分浏览器<br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;文件路径（ogg）&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>小部分浏览器<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">audio</span>&gt;</span><br><br>IE8浏览器，该标签时间较早<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">embed</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;文件路径&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;文件类型（audio/MP3）&quot;</span>&gt;</span><br>视频文件：<br>方式一：<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">video</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">video</span>&gt;</span>    <br>方式二：<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">video</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;…….webm&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">source</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;…….MP4&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">video</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><strong>补充</strong></p>\n<ol>\n<li>\n<p>HTML5 新增结构标签及作用</p>\n<p>![截屏 2022-03-30 上午 9.06.20](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.06.20.png)</p>\n<p>![截屏 2022-03-30 上午 9.07.21](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.07.21.png)</p>\n</li>\n<li>\n<p>表格</p>\n<ol>\n<li>\n<p>​\t\t<tr>行</tr></p>\n</li>\n<li>\n<p>​        <th>表头单元格</th></p>\n</li>\n<li>\n<p>​        <td>普通单元格</td></p>\n</li>\n<li>\n<p>colspan：占有列（合并列）横向合并单元格</p>\n</li>\n<li>\n<p>rowspan：占有行（合并行）纵向合并单元格</p>\n</li>\n<li>\n<p>表格</p>\n<ol>\n<li>表头：thead</li>\n<li>主体：tbody</li>\n<li>底部：tfoot</li>\n</ol>\n</li>\n<li>\n<p><code>border-spacing</code> : 指定边框之间的距离</p>\n</li>\n<li>\n<p><code>border-collapse</code> : 设置边框的合并</p>\n</li>\n<li>\n<p><strong>不同行的样式设置</strong>： <code>tr:nth-child(odd)&#123;&#125;奇数行样式设置</code></p>\n</li>\n<li>\n<p>选择器知识点：如果表格中没有使用 <code>tbody</code>  而是直接使用 <code>tr</code> , 那么浏览器会自动创建一个 <code>tbody</code> , 并且将所有的 <code>tr</code>  放到 <code>tbody</code>  中，因此 <code>tr</code>  不是 <code>table</code>  的子元素</p>\n</li>\n<li>\n<p><code>display:table-cell</code>  设置为单元格进行居中操作</p>\n</li>\n<li>\n<p>表格属性</p>\n<p>![截屏 2022-03-30 上午 9.08.18](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.08.18.png)</p>\n</li>\n<li>\n<p>行和列的属性 (<em>当表格属性与行列属性冲突时，以行列属性为准</em>)</p>\n<p>![截屏 2022-03-30 上午 9.10.13](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.10.13.png)</p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/Rice_w/article/details/123696681?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22123696681%22%2C%22source%22%3A%22Rice_w%22%7D&amp;ctrtid=3BNev\">表格的结构化和直列化</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/Rice_w/article/details/123696681?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22123696681%22%2C%22source%22%3A%22Rice_w%22%7D&amp;ctrtid=3BNev\">HTML5 表单</a></p>\n</li>\n<li>\n<p>表单知识</p>\n<ol>\n<li>\n<p><code>form</code>  的属性 <code>action</code>  表单要提交的服务器地址</p>\n</li>\n<li>\n<p>文本框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">1. 文本框数据要提交到服务器中，必须要为元素指定name属性<br>2. 表单例子<br> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;movies.html&quot;</span>&gt;</span><br>    姓名: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    密码: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 类似选择框，必须要指定一个value属性，value属性最终会作为用户的填写信息发送给服务器，checked默认选中 --&gt;</span><br>   <span class=\"hljs-comment\">&lt;!-- autocapitalize=&quot;off&quot;:关闭自动补全</span><br><span class=\"hljs-comment\">         readonly:将表单项设置为只读，数据会提交</span><br><span class=\"hljs-comment\">         disabled:将表单项设置为禁用，数据不会提交</span><br><span class=\"hljs-comment\">         autofocus:设置表单项自动获取焦点\t--&gt;</span><br>    性别: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sex&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;男&quot;</span>&gt;</span><br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;sex&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;女&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    多选框: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;test&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;11&quot;</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;test&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;22&quot;</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;test&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;33&quot;</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;test&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;44&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    下拉列表: <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;demo&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;111&quot;</span>&gt;</span>111<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>  <br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;222&quot;</span>&gt;</span>222<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>  <br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;333&quot;</span> <span class=\"hljs-attr\">selected</span>&gt;</span>333<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>  <br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;444&quot;</span>&gt;</span>444<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span>  <br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    颜色选择器: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;color&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;color&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    电子邮件: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;email&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    时间: <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;datetime-local&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;time&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;reset&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;重置&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;按钮&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"二-css\"><a class=\"markdownIt-Anchor\" href=\"#二-css\">#</a> 二、CSS</h2>\n<h3 id=\"1-简介\"><a class=\"markdownIt-Anchor\" href=\"#1-简介\">#</a> 1. 简介</h3>\n<p>层叠样式：网页实际上是一个多层的结构，通过 CSS 可以为网页的每一层设置样式，最终我们只看到最上面一层，总之，css 就是设置设置网页中的样式</p>\n<h3 id=\"2-css编写位置\"><a class=\"markdownIt-Anchor\" href=\"#2-css编写位置\">#</a> 2. CSS 编写位置</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">1. 内联样式（开发时不推荐使用）<br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:red;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>2. 内部样式<br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span>相关样式<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br>3. 外部样式（使用浏览器的缓存机制，加快网页的加载速度，提升用户 体验）<br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;外部css文件地址&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"3-选择器\"><a class=\"markdownIt-Anchor\" href=\"#3-选择器\">#</a> 3. 选择器</h3>\n<p>通过选择器可以选中页面中的指定元素进而设置相关样式<br>\n声明块：通过声明块来指定为元素设置样式</p>\n<ol>\n<li>元素选择器\n<ol>\n<li>作用：根据标签名选择元素</li>\n<li>语法： <code>标签名&#123;&#125;</code></li>\n</ol>\n</li>\n<li>id 选择器 (id 属性值不能重复)\n<ol>\n<li>作用：根据元素的 id 属性值选中一个元素</li>\n<li>语法： <code>id属性值&#123;&#125;</code></li>\n</ol>\n</li>\n<li>类选择器（可以为一个元素设置多个 class 属性值，且使用空格隔开）\n<ol>\n<li>作用：根据元素的 class 属性值选中一组元素</li>\n<li>语法： <code>.class属性值</code></li>\n</ol>\n</li>\n<li>通配选择器\n<ol>\n<li>作用：选中页面中所有的元素</li>\n<li>语法： <code>*</code></li>\n</ol>\n</li>\n<li>复合选择器 (交集选择器)\n<ol>\n<li>选择同时符合多个条件的元素 (注意：交集选择器中如果有元素选择器，必须使用元素选择器开头)</li>\n<li>语法： <code>选择器1选择器2选择器n&#123;&#125;</code></li>\n</ol>\n</li>\n<li>选择器分组（并集选择器）\n<ol>\n<li>同时选择多个选择器对应的元素</li>\n<li><code>选择器1,选择器2,选择器n&#123;&#125;</code></li>\n</ol>\n</li>\n<li>子元素选择器\n<ol>\n<li>作用：选中指定父元素的指定子元素</li>\n<li>语法： <code>父元素 &gt; 子元素</code></li>\n</ol>\n</li>\n<li>后代元素选择器\n<ol>\n<li>作用：选中指定元素内的指定后代</li>\n<li>语法： <code>祖先 后代</code></li>\n</ol>\n</li>\n<li>兄弟选择器 1\n<ol>\n<li>作用：选择紧靠后面的兄弟元素</li>\n<li>语法： <code>前一个元素 + 后一个元素</code></li>\n</ol>\n</li>\n<li>兄弟选择器 2\n<ol>\n<li>作用：选择后面所有的兄弟元素</li>\n<li>语法： <code>兄元素~弟元素</code></li>\n</ol>\n</li>\n<li>属性选择器\n<ol>\n<li><code>[属性名]</code>  选择含有指定属性的元素</li>\n<li><code>[属性名 = 属性值]</code>  选择含有指定属性和属性值的元素</li>\n<li><code>[属性名 ^= 属性值]</code>  选择属性值以指定值开头的元素</li>\n<li><code>[属性名 $= 属性值]</code>  选择属性值以指定值结尾的元素</li>\n<li><code>[属性名 *= 属性值]</code>  选择属性值中含有某值的元素</li>\n</ol>\n</li>\n<li>伪类选择器 (伪类不存在的类，特殊的类)\n<ol>\n<li>伪类用来描述一个元素的<strong>特殊状态</strong>，例如：第一个元素，被点击的元素、鼠标移入的元素……</li>\n<li>一般使用 <code>:</code>  开头</li>\n<li><code>:first-child</code>  第一个子元素（参考对象为所有的子元素进行排序）</li>\n<li><code>:last-child</code>  最后一个子元素（参考对象为所有的子元素进行排序）</li>\n<li><code>:nth-child()</code>  选中第 n 个子元素（参考对象为所有的子元素进行排序）\n<ol>\n<li><code>n</code>  第 n 个，n 的范围是 0~+∞</li>\n<li><code>2n+1或even</code>  表示选中偶数位的元素</li>\n<li><code>2n+1或odd</code>  表示选中奇数位的元素</li>\n</ol>\n</li>\n<li><code>:first-of-type</code>  作用同上（同类型元素中进行排序）</li>\n<li><code>:last-of-type</code>  作用同上（同类型元素中进行排序）</li>\n<li><code>:nth-of-type</code>  作用同上（同类型元素中进行排序）</li>\n<li><code>:not()</code>  否定伪类，将符合条件的元素从选择器中去除</li>\n<li>超链接的伪类\n<ol>\n<li><code>a:link</code>  表示未访问过的链接（正常链接）</li>\n<li><code>a:visited</code>  表示访问过的链接（由于隐私的原因，所以 visited 伪类只能修改链接颜色）</li>\n<li><code>:hover</code>  表示鼠标移入的状态</li>\n<li><code>:active</code>  表示鼠标点击、激活的状态</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>伪元素选择器\n<ol>\n<li>伪元素：表示页面中特殊的并不真实存在的元素（<strong>特殊位置</strong>）</li>\n<li>一般使用 <code>::</code>  开头</li>\n<li><code>::first-letter</code>  表示第一个字母</li>\n<li><code>::first-line</code>  表示第一行</li>\n<li><code>::selection</code>  表示选中的内容</li>\n<li><code>::before</code>  元素的开始（必须结合 content 属性使用）</li>\n<li><code>::after</code>  元素的最后（必须结合 content 属性使用）</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"4-样式的继承\"><a class=\"markdownIt-Anchor\" href=\"#4-样式的继承\">#</a> 4. 样式的继承</h3>\n<p>我们为一个元素设置的样式同时也会应用到它的后代元素的上，继承是发生在祖先后代之间</p>\n<p><strong>注意</strong>：不是所有的元素都会被继承，比如背景相关的样式、布局相关的样式均不会被继承</p>\n<h3 id=\"5-选择器的权重\"><a class=\"markdownIt-Anchor\" href=\"#5-选择器的权重\">#</a> 5. 选择器的权重</h3>\n<p>当通过不同的选择器选中相同元素时，并且给相同的样式设置不同的值时，有可能发生样式冲突，这个时候有选择器的权重决定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">内联样式&gt;id选择器&gt;类和伪类选择器&gt;元素选择器&gt;通配选择器&gt;继承的样式（无优先级）<br>比较优先级时，需要将所有的优先级进行相加运算，最后优先级越高则越优先显示（分组选择器是单独计算的）<br>选择器的累加不会超过最大数量级，类选择器再高也不会超过id选择器，若是优先级相同，则优先使用靠下的样式<br>使用!important时，获得最高优先级，超过内联样式的优先级，慎用！<br></code></pre></td></tr></table></figure>\n<h3 id=\"6-单位\"><a class=\"markdownIt-Anchor\" href=\"#6-单位\">#</a> 6. 单位</h3>\n<p>像素：屏幕实际是由许多的小点构成，不同屏幕大小的像素是不同的，像素越小的屏幕显示效果越清晰</p>\n<p>百分比：属性值设置为相对于父元素属性的百分比，设置百分比可以可以使子元素跟随父元素的改变而改变</p>\n<p>em：相对于自身元素的字体大小计算，1em = 1 font-size，em 会根据字体大小的改变而改变（一般默认 font-size = 16 像素）</p>\n<p>rem：相对于根元素的字体大小计算</p>\n<h3 id=\"7-颜色\"><a class=\"markdownIt-Anchor\" href=\"#7-颜色\">#</a> 7. 颜色</h3>\n<ol>\n<li>css 里面可以使用颜色名，但是不是很方便描述</li>\n<li>常见一般使用 RGB 值，通过三种颜色进行调整，每一种颜色值的范围是 0~255;</li>\n<li>rgba：增加了一个值，一共有四个值，最后一个表示不透明度（1 表示完全不透明、0 表示完全透明、.5 表示半透明）</li>\n<li>十六进制颜色值（语法：#aabbcc 简写为 #abc）</li>\n<li>HSL 值：H: 色相、S：饱和度、L：亮度；HSLA 值：不透明度</li>\n</ol>\n<h3 id=\"8-文档流\"><a class=\"markdownIt-Anchor\" href=\"#8-文档流\">#</a> 8. 文档流</h3>\n<ol>\n<li>文档流是一个位置，在最底层，文档流是网页的基础，我们创建的元素默认都在文档流中进行排列，元素分为两个状态在文档流中、不在文档流中</li>\n<li>块级元素\n<ol>\n<li>块级元素会在页面中独占一行（自上向下垂直排列）</li>\n<li>默认宽度是父级元素的全部（把父元素撑满）</li>\n<li>默认高度被内容撑开（子元素撑开）</li>\n</ol>\n</li>\n<li>行内元素\n<ol>\n<li>行内元素不会独占页面的一行，只占自身的大小</li>\n<li>行内元素在页面里面自左向右水平排列，如果一行之中不能排列完，则元素会换到第二行继续自左向右水平排列</li>\n<li>行内元素默认的宽度和高度都是被内容水平撑开的</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"9-盒子模型\"><a class=\"markdownIt-Anchor\" href=\"#9-盒子模型\">#</a> 9. 盒子模型</h3>\n<ol>\n<li>\n<p>盒子是有四个部分组成分别为：content：内容区、padding：内边距、border：边框、margin：外边距</p>\n</li>\n<li>\n<p>weith：内容区的宽度、height：内容区的高度</p>\n</li>\n<li>\n<p>边框属于盒子的边缘，边框的大小会影响盒子的大小，需要设置边框的样式</p>\n</li>\n<li>\n<p>内边距的设置会影响盒子的大小，背景颜色会延伸到内边距上</p>\n</li>\n<li>\n<p>外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置，默认情况下设置左和上会影响该元素，若是设置右和下会影响其他的元素，margin 会影响盒子的实际占用空间</p>\n</li>\n<li>\n<p>水平方向的布局</p>\n</li>\n<li>\n<p>垂直方向的布局</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">border-style</span>:dotted;<br><span class=\"hljs-attribute\">border-bottom-width</span>: <span class=\"hljs-number\">1px</span>;//专门指定某一个边的宽度<br><span class=\"hljs-attribute\">border-color</span>: red;<br><span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">1px</span>;<br><span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;//边框三个属性简写<br><span class=\"hljs-attribute\">padding</span>：<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span>;//内边距三个属性简写<br><span class=\"hljs-attribute\">margin</span>：<span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span> <span class=\"hljs-number\">1px</span>;//外边距三个属性简写<br><br>水平方向的布局<br><span class=\"hljs-attribute\">margin-left</span>+<span class=\"hljs-attribute\">border-left</span>+<span class=\"hljs-attribute\">padding-left</span>+<span class=\"hljs-attribute\">width</span>+<span class=\"hljs-attribute\">margin</span>-rigth+<span class=\"hljs-attribute\">border</span>-rigth+<span class=\"hljs-attribute\">padding</span>-rigth=父元素内容区的宽度<br>//若是不够默认会修改<span class=\"hljs-attribute\">margin</span>-rigth,有auto优先auto<br>//如果两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值，可以利用这个特点是子元素在父元素中居中 <br><span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">10px</span>;<br><span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span> auto;<br><br>垂直方向的布局<br>如果子元素的大小超过了父元素，则子元素会从父元素中溢出，可以使用是<span class=\"hljs-attribute\">overflow</span>属性进行处理<br><span class=\"hljs-attribute\">overflow</span>:hidden;<br>visible:默认值，子元素会从父元素中显示出来<br>hidden:隐藏，溢出内容将会被裁减不会显示出来<br>scroll:生成两个滚动条，通过滚动条进行查看内容<br>auto:根据需要生成滚动条<br><br>overflow-x:<span class=\"hljs-number\">10px</span>;//水平大小<br><span class=\"hljs-attribute\">overflow-y</span>:<span class=\"hljs-number\">10px</span>;//垂直大小<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"10垂直外边距折叠块级0\"><a class=\"markdownIt-Anchor\" href=\"#10垂直外边距折叠块级0\">#</a> 10. 垂直外边距折叠（块级 0）</h3>\n<ol>\n<li>\n<p>相邻的垂直方向外边距会发生重叠现象</p>\n</li>\n<li>\n<p>兄弟元素</p>\n<ol>\n<li>兄弟元素间的相邻垂直外边距会取两者之间较大值（两者都是正值）</li>\n<li>特殊情况\n<ol>\n<li>相邻的外边距一正一负，则取两者之和</li>\n<li>相邻的外边距都是负值，取两者中绝对值较大的</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>父子元素</p>\n<ol>\n<li>父子元素间相邻外边距，子元素会传递父元素（上外边距）</li>\n<li>父子外边距的折叠会影响页面的布局，必须进行处理（设置为兄弟元素即可）</li>\n</ol>\n</li>\n<li>\n<p>行内元素</p>\n<ol>\n<li>\n<p>行内元素不支持设置宽度和高度</p>\n</li>\n<li>\n<p>行内元素可以设置 padding、border、margin，垂直方向的 padding、border、margin 不会影响页面布局</p>\n</li>\n<li>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//display用来设置元素显示的类型</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>可选值为：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>inline 将元素设置为行内元素</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>block 将元素设置为块元素</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>inline-block 将元素设置为行内块元素，行内块既可以设置高度和宽度，也不会独占一行</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>table 将元素设置为一个表格</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>none 元素不在页面中显示</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//visibility 用来设置元素的显示状态</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>可选值：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>visible 元素在页面中正常显示</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>hidden 元素在页面中隐藏不显示，但依然占据页面中的位置</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>//去除项目符号</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span>none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>//去除a链接的下划线</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>//设置居中</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>50px auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>//子元素的行高和父元素高相同，则实现垂直居中效果</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 48px<span class=\"token punctuation\">;</span>//父元素</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 48px<span class=\"token punctuation\">;</span>//子元素</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><br><span class=\"hljs-comment\">### 11.浏览器的默认样式</span><br><br><span class=\"hljs-number\">1</span>. 通常浏览器会为元素设置一些默认样式，有时候默认样式会影响页面布局，通常情况下会去除浏览器的默认样式（PC端）<br><br><span class=\"hljs-comment\">### 12.盒子的大小设置</span><br><br><span class=\"hljs-number\">1</span>. ```css<br>   <span class=\"hljs-regexp\">//</span>默认情况下，盒子的大小是由内容区、内边距、边框共同决定<br>   <span class=\"hljs-regexp\">//</span>box-sizing用来设置盒子尺寸的计算方法（设置width和height的作用）<br>   box-sizing: border-box;<span class=\"hljs-regexp\">//</span>默认值，宽度和高度用来设置内容区的大小<br>   <br>   <span class=\"hljs-regexp\">//</span>宽度和高度用来设置整个盒子可见框的大小<br>   box-sizing: content-box;<br></code></pre></td></tr></table></figure></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"13-轮廓阴影和圆角\"><a class=\"markdownIt-Anchor\" href=\"#13-轮廓阴影和圆角\">#</a> 13. 轮廓阴影和圆角</h3>\n<ol>\n<li>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//用来设置元素的轮廓线，使用方法和border一模一样</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//区别是轮廓不会影响可见框的大小</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">outline</span><span class=\"token punctuation\">:</span>1px solid red<span class=\"token punctuation\">;</span>//轮廓的设置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">outline-offset</span><span class=\"token punctuation\">:</span> //轮廓距离边框的距离</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>//用来设置元素的阴影效果，阴影不会影响页面布局</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>//第一个值，水平偏移量，设置阴影的水平位置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>//第二个值，垂直偏移量，设置阴影的垂直位置</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>//第三个值，阴影的模糊半径</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>//第四个值，阴影的颜色</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 10px 10px 10px red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>//用来设置圆角，圆角设置圆的半径大小（若为两个值可以考虑为椭圆）</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>//该设置为一个圆</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><br><span class=\"hljs-section\">### 14.浮动元素</span><br><br><span class=\"hljs-bullet\">1.</span> 通过浮动使一个元素向其父元素的左侧和右侧移动<br><span class=\"hljs-bullet\">2.</span> 使用<span class=\"hljs-code\">`float`</span>属性设置元素浮动，none：不浮动、left：向左浮动、right：向右浮动<br><span class=\"hljs-bullet\">3.</span> 元素使用浮动之后会脱离文档流，不占用文档流的位置，水平布局的等式不需要成立<br><span class=\"hljs-bullet\">4.</span> 浮动的特点<br><span class=\"hljs-bullet\">   1.</span> 浮动元素不会覆盖文字，文字会自动环绕在浮动元素的周围，利用浮动实现文字环绕效果<br><span class=\"hljs-bullet\">   2.</span> 浮动元素会完全脱离文档流，不再占用文档流的位置<br><span class=\"hljs-bullet\">   3.</span> 设置浮动之后元素就会向父元素左侧或者右侧移动，不会从父元素中移出<br><span class=\"hljs-bullet\">   4.</span> 浮动元素向左或向右移动时，不会超过它前面的其他浮动元素<br><span class=\"hljs-bullet\">   5.</span> 如果浮动元素上边是一个没有浮动的块元素，则浮动元素无法上移<br><span class=\"hljs-bullet\">   6.</span> 浮动元素不会超过上边浮动的兄弟元素，最多和兄弟元素一样高<br><span class=\"hljs-bullet\">5.</span> 作用：让页面中的元素水平排列<br><span class=\"hljs-bullet\">6.</span> 脱离文档流的特点（不需要区分块级和行内元素）<br><span class=\"hljs-bullet\">   1.</span> 块元素<br><span class=\"hljs-bullet\">      1.</span> 块级元素不在独占页面的一行<br><span class=\"hljs-bullet\">      2.</span> 脱离文档流之后块级元素的宽度和高度默认都被内容撑开<br><span class=\"hljs-bullet\">   2.</span> 行内元素<br><span class=\"hljs-bullet\">      1.</span> 行内元素脱离文档流之后变成块级元素，特点和块级元素一样<br><br><span class=\"hljs-section\">### 15. 块级元素水平排列可以使用浮动设置</span><br><br><span class=\"hljs-section\">### 16.高度塌陷和BFC</span><br><br><span class=\"hljs-code\">```css</span><br><span class=\"hljs-code\">// 高度塌陷问题</span><br><span class=\"hljs-code\">在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离，将会无法撑开父元素的高度，导致父元素的高度丢失，父元素高度丢失以后，下面的元素会自动上移，导致页面布局混乱，所以高度塌陷是浮动布局中常见的问题，必须进行处理</span><br><span class=\"hljs-code\">BFC:(Block Formatting Context)\t块级格式化环境</span><br><span class=\"hljs-code\">BFC是一个css中的隐含属性，可以为一个元素开启BFC，开启BFC之后该元素变成一个独立的布局区域</span><br></code></pre></td></tr></table></figure></pre></td></tr></table></figure></li>\n</ol>\n<p>元素开启 BFC 的特点：</p>\n<ol>\n<li>开启 BFC 的元素不会被浮动元素所覆盖</li>\n<li>开启 BFC 的元素子元素和父元素外边距不会重叠</li>\n<li>开启 BFC 的元素可以包含浮动的子元素</li>\n</ol>\n<p>可以通过一些特殊方式开启 BFC</p>\n<ol>\n<li>\n<p>设置元素的浮动（宽度丢失）【不推荐】 <code>例如：float:left;</code></p>\n</li>\n<li>\n<p>将元素设置为行内元素【不推荐】 <code>例如：display:inline-block</code></p>\n</li>\n<li>\n<p>将元素的 <code>overflow</code>  设置为一个非 <code>visible</code>  的值     <code>例如：overflow:hidden</code></p>\n</li>\n<li>\n<p>使用 <code>after伪类解决高度塌陷即 元素名::after</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">::after</span>&#123;<br>  <span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-attribute\">display</span>:bolck;<br>  <span class=\"hljs-attribute\">clear</span>:both;<br>&#125;<br>//after伪元素默认是行内元素，需要设置为块级元素<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解决外边距重叠问题</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span><span class=\"hljs-selector-pseudo\">::before</span>&#123;<br>  <span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-attribute\">display</span>:table;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>clearfix类</code> 可以同时解决高度塌陷和外边距重叠</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.clearfix</span><span class=\"hljs-selector-pseudo\">::before</span>,<span class=\"hljs-selector-class\">.clearfix</span><span class=\"hljs-selector-pseudo\">::after</span>&#123;<br>  <span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>;<br>  <span class=\"hljs-attribute\">display</span>:table;<br>  <span class=\"hljs-attribute\">clear</span>:both;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"17清除浮动\"><a class=\"markdownIt-Anchor\" href=\"#17清除浮动\">#</a> 17. 清除浮动</h3>\n<ol>\n<li>\n<p>作用：清除浮动元素对当前元素所产生的影响</p>\n</li>\n<li>\n<p>可选值：</p>\n<ol>\n<li><code>left</code> ：清除左侧浮动元素对当前元素所产生的影响</li>\n<li><code>right</code> ：清除左侧浮动元素对当前元素所产生的影响</li>\n<li><code>both</code> ：清除两侧浮动元素对当前元素所产生最大影响的那侧</li>\n</ol>\n</li>\n<li>\n<p>原理</p>\n<p>设置清除浮动元素以后，浏览器会自动为元素添加一个上外边距，使其位置不受影响</p>\n</li>\n</ol>\n<h3 id=\"18定位更加高级的布局手段可以摆放到页面的任何位置\"><a class=\"markdownIt-Anchor\" href=\"#18定位更加高级的布局手段可以摆放到页面的任何位置\">#</a> 18. 定位：更加高级的布局手段，可以摆放到页面的任何位置</h3>\n<ol>\n<li>\n<p><code>position属性设置</code></p>\n<ol>\n<li><code>static</code>  默认值，元素是静止的，未开启定位</li>\n<li><code>relative</code> ：开启元素的相对定位</li>\n<li><code>absolute</code> ：开启元素的绝对定位</li>\n<li><code>fixed</code> ：开启元素的固定定位</li>\n<li><code>sticky</code> ：开启元素的粘滞定位</li>\n</ol>\n</li>\n<li>\n<p>静态定位 <code>position:static</code></p>\n<ol>\n<li>取消原有定位，对定位进行覆盖</li>\n<li><strong>设置不设置有什么区别</strong>？？？</li>\n</ol>\n</li>\n<li>\n<p>相对定位 <code>position:relative</code></p>\n<ol>\n<li>开启相对定位后，不设置偏移量不会发生任何变化</li>\n<li>相对定位是参照于元素在文档流中的位置进行定位的</li>\n<li>相对定位会提升元素的层级</li>\n<li>相对定位元素不会脱离文档流</li>\n<li>相对定位不会改变元素的性质，块依然是块，行内依然为行内</li>\n<li>偏移量\n<ol>\n<li>top：定位元素和定位位置上边的距离</li>\n<li>bottom：定位元素和定位位置下边的距离</li>\n<li>left：定位元素和定位位置左侧的距离</li>\n<li>right：定位元素和定位位置右侧的距离</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>绝对定位 <code>position:absolute</code></p>\n<ol>\n<li>\n<p>开启绝对定位后，不设置偏移量不会发生任何变化</p>\n</li>\n<li>\n<p>绝对定位元素会脱离文档流</p>\n</li>\n<li>\n<p>绝对定位改变元素的性质，行内元素变成块级元素，块的宽高被内容撑开</p>\n</li>\n<li>\n<p>绝对定位会提升元素的层级</p>\n</li>\n<li>\n<p>绝对定位元素是相对于其包含块进行定位的</p>\n</li>\n<li>\n<p>包含块</p>\n<ol>\n<li>正常情况下，包含块就是距离当前元素最近的祖先元素</li>\n<li>绝对定位的包含块就是距离当前元素开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是它的包含块（html：根元素、初始包含块）</li>\n</ol>\n</li>\n<li>\n<p><strong>补充：水平方向的公式 和垂直方向的公式</strong></p>\n<ol>\n<li>\n<p><code>margin-left</code> 、 <code>border-left</code> 、 <code>padding-left</code> 、 <code>width</code> 、 <code>margin-right</code> 、 <code>border-right</code> 、 <code>padding-right</code>  之和等于包含块内容区的宽度</p>\n</li>\n<li>\n<p>开启决定定位之后公式左边需要添加 <code>left</code> 、 <code>right</code>  等于包含块内容区的宽度（可设置 auto 的属性 <code>margin</code> 、 <code>width</code> 、 <code>left</code> 、 <code>right</code> ）</p>\n</li>\n<li>\n<p>如果 <code>left</code> 、 <code>right</code>  的默认值是 <code>auto</code> ，等式不满足的时候自动调整这两个值</p>\n</li>\n<li>\n<p>垂直方向和水平方向相同</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">//水平居中<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">margin-left</span>: auto;<br>  <span class=\"hljs-attribute\">margin-right</span>: auto;<br><br>//垂直居中<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>  <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">bottom</span>:<span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">margin-top</span>: auto;<br>  <span class=\"hljs-attribute\">margin-bottom</span>: auto;<br><span class=\"hljs-number\">1</span>. 父元素存在相对定位 <br><span class=\"hljs-selector-class\">.box1</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: aqua;<br>  <span class=\"hljs-attribute\">position</span>: relative;//父元素中要开启相对定位<br>&#125;<br><span class=\"hljs-selector-class\">.box2</span>&#123;<br>  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60px</span>;<br>  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">60px</span>;<br>  <span class=\"hljs-attribute\">background-color</span>: red;<br>  <span class=\"hljs-attribute\">position</span>: absolute;<br>  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">bottom</span>: <span class=\"hljs-number\">0</span>;<br>  <span class=\"hljs-attribute\">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>固定定位 <code>position:fixed</code></p>\n<ol>\n<li>特殊的绝对定位，部分特点和绝对定位一样</li>\n<li>固定定位永远参照与浏览器的视口进行定位</li>\n<li>固定定位的元素不会随着网页的滚动条滚动</li>\n</ol>\n</li>\n<li>\n<p>粘滞定位 <code>position:sticky</code></p>\n<ol>\n<li>兼容性不太好，部分特点和相对定位一样</li>\n<li>粘滞定位可以在元素到达某个位置时将其固定</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"19元素的层级\"><a class=\"markdownIt-Anchor\" href=\"#19元素的层级\">#</a> 19. 元素的层级</h3>\n<ol>\n<li>定位层级都是相同的，不分绝对定位还是相对定位</li>\n<li>设置透明 <code>background-color: rgba(255, 0, 0, .3);</code></li>\n<li>开启定位的元素可以利用 <code>z-index:1;</code>  给元素设置层级（里面是一个整数，值越大元素就越优先显示）</li>\n<li>如果元素的优先级相同，那么就优先显示靠下的元素；祖先元素的层级再高也不会覆盖后代元素</li>\n</ol>\n<h3 id=\"20轮播图练习\"><a class=\"markdownIt-Anchor\" href=\"#20轮播图练习\">#</a> 20. 轮播图练习</h3>\n<ol>\n<li>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;a class=<span class=\"token string\">\"active\"</span> href=<span class=\"token string\">\"#\"</span>>&lt;/a>//active默认激活</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">background-clip</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>//将背景颜色设置到内容区，边框和内边距不在有背景颜色</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid transparent<span class=\"token punctuation\">;</span>//边框为透明色</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><br>### <span class=\"hljs-number\">21</span>.字体族<br><br><span class=\"hljs-number\">1</span>. ```css<br>   问题：<br>   <span class=\"hljs-number\">1</span>. 加载速度<br>   <span class=\"hljs-number\">2</span>. 版权<br>   <span class=\"hljs-number\">3</span>. 字体格式<br>   <span class=\"hljs-keyword\">@font-face</span>&#123;<br>   <span class=\"hljs-comment\">/* 指定字体的名字 */</span><br>   <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Courier New&#x27;</span>, Courier, monospace;<br>   <span class=\"hljs-comment\">/* 服务器中字体的路径 */</span><br>   <span class=\"hljs-attribute\">src</span>:<span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">&quot;字体路径&quot;</span>);<br>   &#125;<br>   字体相关的样式<br>   <span class=\"hljs-number\">1</span>. <span class=\"hljs-attribute\">color</span>\t\t设置字体颜色<br>   <span class=\"hljs-number\">2</span>. <span class=\"hljs-attribute\">font-size</span>\t\t设置字体大小<br>   \t\t单位：<br>   \t\t\t\t<span class=\"hljs-selector-tag\">em</span>：相当于当前元素的一个<span class=\"hljs-attribute\">font-size</span><br>   \t\t\t\trem：相当于根元素的一个<span class=\"hljs-attribute\">font-size</span><br>   <span class=\"hljs-number\">3</span>. <span class=\"hljs-attribute\">font-family</span>\t\t字体族（字体的格式）<br>   \t\t可选值：<br>   \t\t\t\t\tserif\t\t衬线字体<br>   \t\t\t\t\tsans-serif\t\t非衬线字体<br>   \t\t\t\t\tmonospace\t\t等宽字体<br>   指定字体的类型，浏览器会自动使用该类型下的字体<br>   <span class=\"hljs-attribute\">font-family</span>  可以指定多个字体，多个字体间使用，隔开。若第一个无效时依次尝试去<br></code></pre></td></tr></table></figure></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"22图标字体将图标直接设置为字体class类-实体-伪元素三种方式\"><a class=\"markdownIt-Anchor\" href=\"#22图标字体将图标直接设置为字体class类-实体-伪元素三种方式\">#</a> 22. 图标字体：将图标直接设置为字体（ <code>class类</code> 、实体、伪元素三种方式）</h3>\n<ol>\n<li>\n<p>通过伪元素来设置图标字体</p>\n<ol>\n<li>\n<p>找到要设置图标的元素通过 <code>before</code>  和 <code>after</code>  选中</p>\n</li>\n<li>\n<p>在属性 <code>content</code>  中设置字体编码</p>\n</li>\n<li>\n<p>设置字体样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">::before</span>&#123;<br>\t<span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&#x27;\\f1b0&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-family</span>:<span class=\"hljs-string\">&#x27;字体样式&#x27;</span>;//fab、fas等<br>  <span class=\"hljs-attribute\">font-weight</span>:<span class=\"hljs-number\">900px</span>;<br>&#125;<br>或<br>&lt;<span class=\"hljs-selector-tag\">span</span> class=&quot;fas&quot;&gt;&amp;<span class=\"hljs-selector-id\">#x</span>图标的编码&lt;/<span class=\"hljs-selector-tag\">span</span>&gt;//另一种方式<br><br>阿里图标字体库的使用方式<br><span class=\"hljs-number\">1</span>. 直接使用类 class = iconfont<br><span class=\"hljs-number\">2</span>. 使用伪元素的方式 <br><span class=\"hljs-selector-tag\">li</span><span class=\"hljs-selector-pseudo\">::before</span>&#123;<br>\t<span class=\"hljs-attribute\">content</span>:<span class=\"hljs-string\">&#x27;\\f1b0&#x27;</span>;<br>  <span class=\"hljs-attribute\">font-family</span>:<span class=\"hljs-string\">&#x27;字体样式&#x27;</span>;//fab、fas等<br>  <span class=\"hljs-attribute\">font-weight</span>:<span class=\"hljs-number\">900px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"23文本样式的相关设置\"><a class=\"markdownIt-Anchor\" href=\"#23文本样式的相关设置\">#</a> 23. 文本样式的相关设置</h3>\n<ol>\n<li>\n<p>行高的设置</p>\n<ol>\n<li>\n<p>可以将行高和高度设置相同的值，使单行文字在一个元素中垂直居中</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100px</span><br>line-height:<span class=\"hljs-number\">100px</span>;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>行高是指文字占有的实际高度，可以通过 line-height 来设置行高，行高可以指定一个大小 (em、px), 也可以设置一个整数，表示为字体的整数倍</p>\n</li>\n<li>\n<p>行高设置文字的行间距，行间距 = 行高 - 字体大小</p>\n</li>\n<li>\n<p>字体框：字体存在的格子，可以通过 font-size 设置字体框的高度</p>\n</li>\n<li>\n<p>行高会在字体框的上下平均分配</p>\n</li>\n</ol>\n</li>\n<li>\n<p>字体的简写属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">font</span>:字体大小/行高(可省略) 字体族<br>font-weight:字重(字体的加粗)<br>\t可选值<br>\t\t\tnormal\t默认值，不加粗<br>\t\t\tbold\t加粗<br>\t\t\t<span class=\"hljs-number\">100</span>~<span class=\"hljs-number\">900</span>级别<br>font-style:字体的风格<br>\t\t\tnormal\t正常<br>\t\t\titalic\t斜体<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>文本的水平和垂直对齐</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-number\">1</span>. <span class=\"hljs-attribute\">text-align</span>  文本的水平对齐<br>\t可选值<br>\t\t<span class=\"hljs-attribute\">left</span>\t\t左侧对齐<br>\t\t<span class=\"hljs-attribute\">right</span>\t\t右侧对齐<br>\t\tcenter\t居中对齐\t<br>\t\tjustify\t两端对齐<br><span class=\"hljs-number\">2</span>. <span class=\"hljs-attribute\">vertical-align</span>\t设置元素垂直对齐的方式<br>\t可选值<br>\t\tbaseline\t默认值，基线对齐<br>\t\t<span class=\"hljs-attribute\">top</span>\t\t\t\t顶部对齐<br>\t\t<span class=\"hljs-attribute\">bottom</span>\t\t底部对齐<br>\t\tmiddle\t\t居中对齐<br>附加:若是图片和父元素存在缝隙，可以使用vertical-align:bottom;解决<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>文本样式的设置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-number\">1</span>. <span class=\"hljs-attribute\">text-decoration</span>  设置文本修饰<br>\t可选值<br>\t\t<span class=\"hljs-attribute\">none</span>\t无下划线<br>\t\tunderline\t\t下划线<br>\t\tline-through\t删除线<br>\t\toverline\t\t\t上划线<br>\t\t例:text-decoration:underline red dotted;<br><span class=\"hljs-number\">2</span>. <span class=\"hljs-attribute\">white-space</span>\t设置网页如何处理空白<br>\t可选值<br>\t\t<span class=\"hljs-attribute\">normal</span>\t正常<br>\t\tnowrap\t不换行<br>\t\tpre \t\t保留空白<br><span class=\"hljs-number\">3</span>. 显示省略号的效果<br><span class=\"hljs-attribute\">white-space</span>: nowrap;//文本不换行<br><span class=\"hljs-attribute\">overflow</span>: hidden;//多余的文本进行隐藏<br><span class=\"hljs-attribute\">text-overflow</span>: ellipsis;//使用省略号进行替换<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"24京东顶部导航条总结学习\"><a class=\"markdownIt-Anchor\" href=\"#24京东顶部导航条总结学习\">#</a> 24. 京东顶部导航条总结学习</h3>\n<ol>\n<li>\n<p><code>box-shadow</code>  属性详解</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">值</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>h-shadow</em></td>\n<td style=\"text-align:left\">必需。水平阴影的位置。允许负值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>v-shadow</em></td>\n<td style=\"text-align:left\">必需。垂直阴影的位置。允许负值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>blur</em></td>\n<td style=\"text-align:left\">可选。模糊距离。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>spread</em></td>\n<td style=\"text-align:left\">可选。阴影的尺寸。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>color</em></td>\n<td style=\"text-align:left\">可选。阴影的颜色。请参阅 CSS 颜色值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">inset</td>\n<td style=\"text-align:left\">可选。将外部阴影 (outset) 改为内部阴影。</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"25背景\"><a class=\"markdownIt-Anchor\" href=\"#25背景\">#</a> 25. 背景</h3>\n<ol>\n<li>\n<p><code>background-color:</code>  设置背景颜色</p>\n</li>\n<li>\n<p><code>background-image:</code>  设置背景图片</p>\n<ol>\n<li>可以同时设置颜色和图片，背景颜色将会成为图片的背景颜色</li>\n<li>背景的图片小于元素：背景图片将会自动在元素中平铺，X 轴和 Y 轴方向平铺</li>\n<li>背景的图片大于元素：背景图片将会无法完全显示</li>\n<li>背景的图片等于元素：直接正常显示</li>\n</ol>\n</li>\n<li>\n<p><code>background-repeat:</code>  设置背景重复的方式</p>\n<ol>\n<li><code>默认值repeat</code> : 背景将会沿着 x 轴和 y 轴方向重复</li>\n<li><code>repeat-x</code> : 沿着 x 轴方向重复</li>\n<li><code>repeat-y</code> : 沿着 y 轴方向重复</li>\n<li><code>no-repeat</code> : 背景图片不重复</li>\n</ol>\n</li>\n<li>\n<p><code>background-position:</code>  设置背景图片的位置</p>\n<ol>\n<li><code>top</code> 、 <code>left</code> 、 <code>right</code> 、 <code>bottom</code> 、 <code>center</code>  同时指定两个值，若只指定一个值，则第二值会和第一个值相同</li>\n<li>通过偏移量来指定背景图片的位置： <code>水平方向的偏移量</code> 、 <code>垂直方向的偏移量</code></li>\n</ol>\n</li>\n<li>\n<p><code>background-clip</code> : 设置背景范围</p>\n<ol>\n<li><code>border-box</code> : 默认值，背景会出现在边框的下边</li>\n<li><code>padding-box</code> : 背景不会出现在边框下边，只出现在内容区和内边距</li>\n<li><code>content-box</code> : 背景只会出现在内容区</li>\n</ol>\n</li>\n<li>\n<p><code>background-origin</code> : 背景图片的偏移量计算原点</p>\n<ol>\n<li><code>padding-box</code> : 默认值， <code>background-position</code>  从内边距出开始计算</li>\n<li><code>border-box</code> : 背景图片的偏移量从边框处开始计算</li>\n<li><code>content-box</code> : 背景图片的偏移量从内容区处开始计算</li>\n</ol>\n</li>\n<li>\n<p><code>background-size</code> : 设置背景图片的大小，第一个值表示宽度，第二值表示高度，若只写一个，则第二个值默认是 auto</p>\n<ol>\n<li><code>contain</code> : 图片比例不变，将图片在元素中完整显示</li>\n<li><code>cover</code> : 图片比例不变，将元素铺满</li>\n</ol>\n</li>\n<li>\n<p><code>background-attachment</code> : 背景图片是否跟随元素移动</p>\n<ol>\n<li><code>scroll</code> : 默认值，背景图片会跟随元素移动</li>\n<li><code>fixed</code> : 背景图片固定在页面中，不会随元素移动</li>\n</ol>\n</li>\n<li>\n<p><code>background</code> : 属性简写，无顺序要求</p>\n<ol>\n<li>background-size 必须写在 background-position 的后面，并且时候 <code>/</code>  隔开</li>\n<li>background-origin 要写在 background-clip 的前面</li>\n</ol>\n</li>\n<li>\n<p>图片属于网页中的外部资源，外部资源都需要浏览器单独发送请求加载，浏览器家在外部资源是按需加载的，用则加载，不用则不加载。解决多个图片因请求时长而出现的闪烁问题，可以将多个小图片同意保存到一个大图片中，然后通过调整 <code>background-position</code>  来显示特定的图片称为 <code>CSS-Sprite</code> , 这种图称为雪碧图</p>\n</li>\n<li>\n<p>雪碧图特点：一张图片里有包含多个图片，一次性将多个图片加载进页面，降低请求的次数，加快访问速度，提升用户的体验</p>\n</li>\n<li>\n<p>渐变：<strong>渐变是图片，需要通过 background-image 来设置</strong></p>\n<ol>\n<li>\n<p>线性渐变</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-number\">1</span>.线性渐变，需要沿着一条直线发生变化：linear-gradient()<br><span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">linear-gradient</span>(red,yellow)<br>指定渐变的方向：to left,to right,to bottom,to top,deg度数，turn圈<br>可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况<br><span class=\"hljs-number\">2</span>.线性渐变，可以平铺的线性渐变：<span class=\"hljs-built_in\">repeating-linear-gradient</span>()<br>background-image: <span class=\"hljs-built_in\">repeating-linear-gradient</span>(red,yellow <span class=\"hljs-number\">25px</span>)<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>径向渐变</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-number\">1</span>.径向渐变(放射性效果)radial-gradient()<br><span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">radial-gradient</span>(red,yellow <span class=\"hljs-number\">50px</span>)<br>默认情况下径向渐变的形状根据元素的形状来计算的，正方形--圆形，长方形--椭圆形，也可以手动设置径向渐变的大小：circle、ellipse；渐变位置<span class=\"hljs-built_in\">radial-gradient</span>(大小 at 位置，颜色 位置，颜色 位置)<br>大小:circle 圆形、ellipse 椭圆形、farthest-side 远边、farthest-corner 远角、closest-side 近边、closest-corner 近角<br>位置:top、right、left、center、bottom<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "HTML基础"
            ]
        }
    ]
}