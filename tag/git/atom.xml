<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>XGG • Posts by &#34;git&#34; tag</title>
    <link href="http://example.com" />
    <updated>2019-02-12T02:14:10.000Z</updated>
    <category term="uni-app" />
    <category term="Git" />
    <category term="浏览器" />
    <category term="HTML基础" />
    <category term="JavaScript" />
    <category term="React" />
    <category term="Vue" />
    <category term="Webpack" />
    <category term="Node" />
    <category term="TypeScript" />
    <category term="计算机网络" />
    <category term="数据结构" />
    <category term="操作系统" />
    <category term="计算机组成" />
    <category term="Linux" />
    <entry>
        <id>http://example.com/2019/02/12/1002_Git/</id>
        <title>Git常用命令</title>
        <link rel="alternate" href="http://example.com/2019/02/12/1002_Git/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;11-查看提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-查看提交历史&#34;&gt;#&lt;/a&gt; 11、查看提交历史；&lt;/h3&gt;
&lt;p&gt;git reflog&lt;br&gt;
git 仓库组成：&lt;br&gt;
Workspace：开发者工作区，也就是你当前写代码的目录，它一般保持的是最新仓库代码。&lt;br&gt;
Index / Stage：缓存区，最早叫 Stage，现在新版本已经改成 index，位于.git 目录中，它用来存放临时动作，比如我们做了 git add 或者 git rm，都是把文件提交到缓存区，这是可以撤销的，然后在通过 git commit 将缓存区的内容提交到本地仓库&lt;br&gt;
 Repository：仓库区，是仓库代码，你所有的提交都在这里，git 会保存好每一个历史版本，存放在仓库区，它可以是服务端的也可以是本地的，因为在分布式中，任何人都可以是主仓库。&lt;br&gt;
Remote：远程仓库，只能是别的电脑上的仓库，即服务器仓库。&lt;/p&gt;
&lt;h3 id=&#34;12-创建分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-创建分支&#34;&gt;#&lt;/a&gt; 12、创建分支；&lt;/h3&gt;
&lt;p&gt;git checkout -b 分支名&lt;br&gt;
等价于&lt;br&gt;
 git branch 分支名&lt;br&gt;
 git checkout 分支名&lt;/p&gt;
&lt;h3 id=&#34;13-查看当前分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-查看当前分支&#34;&gt;#&lt;/a&gt; 13、查看当前分支；&lt;/h3&gt;
&lt;p&gt;git branch&lt;/p&gt;
&lt;h3 id=&#34;14-切换分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-切换分支&#34;&gt;#&lt;/a&gt; 14、切换分支；&lt;/h3&gt;
&lt;p&gt;git checkout&lt;/p&gt;
&lt;h3 id=&#34;15-合并分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-合并分支&#34;&gt;#&lt;/a&gt; 15、合并分支；&lt;/h3&gt;
&lt;p&gt;git merge 分支名&lt;/p&gt;
&lt;h3 id=&#34;16-查看当前所有分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-查看当前所有分支&#34;&gt;#&lt;/a&gt; 16、查看当前所有分支；&lt;/h3&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;h3 id=&#34;17-删除本地分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17-删除本地分支&#34;&gt;#&lt;/a&gt; 17、删除本地分支；&lt;/h3&gt;
&lt;p&gt;git branch -D 分支名&lt;/p&gt;
&lt;h3 id=&#34;18-删除远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18-删除远程分支&#34;&gt;#&lt;/a&gt; 18、删除远程分支；&lt;/h3&gt;
&lt;p&gt;git push origin --delete 分支名&lt;/p&gt;
&lt;h3 id=&#34;19-本地仓库与远程仓库关联&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#19-本地仓库与远程仓库关联&#34;&gt;#&lt;/a&gt; 19、本地仓库与远程仓库关联；&lt;/h3&gt;
&lt;p&gt;git remote add origin 仓库地址&lt;/p&gt;
&lt;h3 id=&#34;20-推送到远程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-推送到远程&#34;&gt;#&lt;/a&gt; 20、推送到远程；&lt;/h3&gt;
&lt;p&gt;git push -u origin 分支仓库名&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地分支&#34;&gt;#&lt;/a&gt; 20、查看本地分支；&lt;/h3&gt;
&lt;p&gt;git branch&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地和远程仓库的所有分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地和远程仓库的所有分支&#34;&gt;#&lt;/a&gt; 20、查看本地和远程仓库的所有分支；&lt;/h3&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;h3 id=&#34;20-查看远程仓库的分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看远程仓库的分支&#34;&gt;#&lt;/a&gt; 20、查看远程仓库的分支&lt;/h3&gt;
&lt;p&gt;git branch -r&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地库已经关联的远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地库已经关联的远程仓库&#34;&gt;#&lt;/a&gt; 20、查看本地库已经关联的远程仓库&lt;/h3&gt;
&lt;p&gt;git remote -v&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2019-02-12T02:14:10.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/02/11/1001_Git/</id>
        <title>Git常用命令</title>
        <link rel="alternate" href="http://example.com/2019/02/11/1001_Git/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1-全局配置git环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-全局配置git环境&#34;&gt;#&lt;/a&gt; 1、全局配置 git 环境；&lt;/h3&gt;
&lt;p&gt;git config --global &lt;a href=&#34;http://user.name&#34;&gt;user.name&lt;/a&gt; “用户名”&lt;br&gt;
git config --global user.email “邮箱”&lt;br&gt;
 基本命令：&lt;br&gt;
mkdir 文件夹名；创建文件夹&lt;br&gt;
 cd 文件夹名；进入文件夹&lt;br&gt;
 ls；查看文件目录&lt;br&gt;
 ls -sh；查看全部文件目录包含隐藏目录&lt;/p&gt;
&lt;h3 id=&#34;2-初始化git仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-初始化git仓库&#34;&gt;#&lt;/a&gt; 2、初始化 git 仓库；&lt;/h3&gt;
&lt;p&gt;git init&lt;/p&gt;
&lt;h3 id=&#34;3-将本地工作区的文件添加到本地版本库的提交缓存中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-将本地工作区的文件添加到本地版本库的提交缓存中&#34;&gt;#&lt;/a&gt; 3、将本地工作区的文件添加到本地版本库的提交缓存中；&lt;/h3&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;h3 id=&#34;4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id&#34;&gt;#&lt;/a&gt; 4、将本地版本库提交缓存 stage 中的文件提交到本地版本库 master 中；生成 40 位哈希值，作为 id，&lt;/h3&gt;
&lt;p&gt;git commit -m “提交信息”&lt;/p&gt;
&lt;!-- 修改提交信息命令 ，编辑后command+x退出编辑界面--&gt;
&lt;p&gt;git commit -amend&lt;/p&gt;
&lt;h3 id=&#34;5-查看历史提交日志加上prettyoneline选项简洁输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-查看历史提交日志加上prettyoneline选项简洁输出&#34;&gt;#&lt;/a&gt; 5、查看历史提交日志，加上–pretty=oneline 选项简洁输出；&lt;/h3&gt;
&lt;p&gt;git log&lt;br&gt;
HEAD-&amp;gt;master: 指本次提交到 master 仓库&lt;/p&gt;
&lt;h3 id=&#34;6-回滚代码仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-回滚代码仓库&#34;&gt;#&lt;/a&gt; 6、回滚代码仓库；&lt;/h3&gt;
&lt;p&gt;git reset --hard&lt;/p&gt;
&lt;!-- 存在三种模式 --&gt;???
&lt;p&gt;–soft 、–mixed 以及–hard 是三个恢复等级&lt;br&gt;
使用–soft 就仅仅将头指针恢复，已经 add 的暂存区以及工作空间的所有东西都不变。&lt;br&gt;
如果使用–mixed，就将头恢复掉，已经 add 的暂存区也会丢失掉，工作空间的代码什么的是不变的。&lt;br&gt;
如果使用–hard，那么一切就全都恢复了，头变，aad 的暂存区消失，代码什么的也恢复到以前状态&lt;br&gt;
 git reset --hard HEAD^&lt;br&gt;
git reset --hard HEAD~3&lt;/p&gt;
&lt;h3 id=&#34;7-查看当前仓库状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-查看当前仓库状态&#34;&gt;#&lt;/a&gt; 7、查看当前仓库状态；&lt;/h3&gt;
&lt;p&gt;git status&lt;br&gt;
 英文对应：&lt;br&gt;
A：未修改&lt;br&gt;
 AM：修改&lt;br&gt;
 Untracked：未提交&lt;br&gt;
 modified：新文件，但未提交&lt;/p&gt;
&lt;!-- 工作区与缓存区 --&gt;
&lt;p&gt;工作区：当前目录&lt;br&gt;
缓存区：使用 git add 命令提交的文件信息，位于.git 目录下 index 文件中&lt;br&gt;
 git add . 与 git add --all 区别&lt;br&gt;
这个命令会将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区。&lt;br&gt;
这个命令还会把删除的文件也提交进去&lt;br&gt;
如你在本地删除了 min.c 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的 min.c 也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件，如果不想删除文件，可以使用 git add .，注意后面有一个 “.” 点的符号，这个命令跟 git add --all 一样，但是不会记录删除操作&lt;/p&gt;
&lt;h3 id=&#34;8-将文件撤销回到最近一次修改的状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-将文件撤销回到最近一次修改的状态&#34;&gt;#&lt;/a&gt; 8、将文件撤销回到最近一次修改的状态；&lt;/h3&gt;
&lt;p&gt;git checkout – file 回到了之前修改的状态&lt;/p&gt;
&lt;h3 id=&#34;9-查看单个文件可回滚版本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-查看单个文件可回滚版本&#34;&gt;#&lt;/a&gt; 9、查看单个文件可回滚版本；&lt;/h3&gt;
&lt;p&gt;git log filename&lt;/p&gt;
&lt;h3 id=&#34;10-删除文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-删除文件&#34;&gt;#&lt;/a&gt; 10、删除文件；&lt;/h3&gt;
&lt;p&gt;git rm 文件名&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2019-02-11T11:52:20.000Z</updated>
    </entry>
</feed>
