{
    "version": "https://jsonfeed.org/version/1",
    "title": "XGG&Blog • All posts by \"git\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/03/19/Git/",
            "url": "http://example.com/2021/03/19/Git/",
            "title": "Git常用命令",
            "date_published": "2021-03-19T12:42:30.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h3 id=\"1-全局配置git环境\"><a class=\"markdownIt-Anchor\" href=\"#1-全局配置git环境\">#</a> 1、全局配置 git 环境；</h3>\n<p>git config --global <a href=\"http://user.name\">user.name</a> “用户名”<br>\ngit config --global user.email “邮箱”<br>\n 基本命令：<br>\nmkdir 文件夹名；创建文件夹<br>\n cd 文件夹名；进入文件夹<br>\n ls；查看文件目录<br>\n ls -sh；查看全部文件目录包含隐藏目录</p>\n<h3 id=\"2-初始化git仓库\"><a class=\"markdownIt-Anchor\" href=\"#2-初始化git仓库\">#</a> 2、初始化 git 仓库；</h3>\n<p>git init</p>\n<h3 id=\"3-将本地工作区的文件添加到本地版本库的提交缓存中\"><a class=\"markdownIt-Anchor\" href=\"#3-将本地工作区的文件添加到本地版本库的提交缓存中\">#</a> 3、将本地工作区的文件添加到本地版本库的提交缓存中；</h3>\n<p>git add .</p>\n<h3 id=\"4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id\"><a class=\"markdownIt-Anchor\" href=\"#4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id\">#</a> 4、将本地版本库提交缓存 stage 中的文件提交到本地版本库 master 中；生成 40 位哈希值，作为 id，</h3>\n<p>git commit -m “提交信息”</p>\n<!-- 修改提交信息命令 ，编辑后command+x退出编辑界面-->\n<p>git commit -amend</p>\n<h3 id=\"5-查看历史提交日志加上prettyoneline选项简洁输出\"><a class=\"markdownIt-Anchor\" href=\"#5-查看历史提交日志加上prettyoneline选项简洁输出\">#</a> 5、查看历史提交日志，加上–pretty=oneline 选项简洁输出；</h3>\n<p>git log<br>\nHEAD-&gt;master: 指本次提交到 master 仓库</p>\n<h3 id=\"6-回滚代码仓库\"><a class=\"markdownIt-Anchor\" href=\"#6-回滚代码仓库\">#</a> 6、回滚代码仓库；</h3>\n<p>git reset --hard</p>\n<!-- 存在三种模式 -->???\n<p>–soft 、–mixed 以及–hard 是三个恢复等级<br>\n使用–soft 就仅仅将头指针恢复，已经 add 的暂存区以及工作空间的所有东西都不变。<br>\n如果使用–mixed，就将头恢复掉，已经 add 的暂存区也会丢失掉，工作空间的代码什么的是不变的。<br>\n如果使用–hard，那么一切就全都恢复了，头变，aad 的暂存区消失，代码什么的也恢复到以前状态<br>\n git reset --hard HEAD^<br>\ngit reset --hard HEAD~3</p>\n<h3 id=\"7-查看当前仓库状态\"><a class=\"markdownIt-Anchor\" href=\"#7-查看当前仓库状态\">#</a> 7、查看当前仓库状态；</h3>\n<p>git status<br>\n 英文对应：<br>\nA：未修改<br>\n AM：修改<br>\n Untracked：未提交<br>\n modified：新文件，但未提交</p>\n<!-- 工作区与缓存区 -->\n<p>工作区：当前目录<br>\n缓存区：使用 git add 命令提交的文件信息，位于.git 目录下 index 文件中<br>\n git add . 与 git add --all 区别<br>\n这个命令会将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区。<br>\n这个命令还会把删除的文件也提交进去<br>\n如你在本地删除了 min.c 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的 min.c 也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件，如果不想删除文件，可以使用 git add .，注意后面有一个 “.” 点的符号，这个命令跟 git add --all 一样，但是不会记录删除操作</p>\n<h3 id=\"8-将文件撤销回到最近一次修改的状态\"><a class=\"markdownIt-Anchor\" href=\"#8-将文件撤销回到最近一次修改的状态\">#</a> 8、将文件撤销回到最近一次修改的状态；</h3>\n<p>git checkout – file 回到了之前修改的状态</p>\n<h3 id=\"9-查看单个文件可回滚版本\"><a class=\"markdownIt-Anchor\" href=\"#9-查看单个文件可回滚版本\">#</a> 9、查看单个文件可回滚版本；</h3>\n<p>git log filename</p>\n<h3 id=\"10-删除文件\"><a class=\"markdownIt-Anchor\" href=\"#10-删除文件\">#</a> 10、删除文件；</h3>\n<p>git rm 文件名</p>\n<h3 id=\"11-查看提交历史\"><a class=\"markdownIt-Anchor\" href=\"#11-查看提交历史\">#</a> 11、查看提交历史；</h3>\n<p>git reflog<br>\ngit 仓库组成：<br>\nWorkspace：开发者工作区，也就是你当前写代码的目录，它一般保持的是最新仓库代码。<br>\nIndex / Stage：缓存区，最早叫 Stage，现在新版本已经改成 index，位于.git 目录中，它用来存放临时动作，比如我们做了 git add 或者 git rm，都是把文件提交到缓存区，这是可以撤销的，然后在通过 git commit 将缓存区的内容提交到本地仓库<br>\n Repository：仓库区，是仓库代码，你所有的提交都在这里，git 会保存好每一个历史版本，存放在仓库区，它可以是服务端的也可以是本地的，因为在分布式中，任何人都可以是主仓库。<br>\nRemote：远程仓库，只能是别的电脑上的仓库，即服务器仓库。</p>\n<h3 id=\"12-创建分支\"><a class=\"markdownIt-Anchor\" href=\"#12-创建分支\">#</a> 12、创建分支；</h3>\n<p>git checkout -b 分支名<br>\n等价于<br>\n git branch 分支名<br>\n git checkout 分支名</p>\n<h3 id=\"13-查看当前分支\"><a class=\"markdownIt-Anchor\" href=\"#13-查看当前分支\">#</a> 13、查看当前分支；</h3>\n<p>git branch</p>\n<h3 id=\"14-切换分支\"><a class=\"markdownIt-Anchor\" href=\"#14-切换分支\">#</a> 14、切换分支；</h3>\n<p>git checkout</p>\n<h3 id=\"15-合并分支\"><a class=\"markdownIt-Anchor\" href=\"#15-合并分支\">#</a> 15、合并分支；</h3>\n<p>git merge 分支名</p>\n<h3 id=\"16-查看当前所有分支\"><a class=\"markdownIt-Anchor\" href=\"#16-查看当前所有分支\">#</a> 16、查看当前所有分支；</h3>\n<p>git branch -a</p>\n<h3 id=\"17-删除本地分支\"><a class=\"markdownIt-Anchor\" href=\"#17-删除本地分支\">#</a> 17、删除本地分支；</h3>\n<p>git branch -D 分支名</p>\n<h3 id=\"18-删除远程分支\"><a class=\"markdownIt-Anchor\" href=\"#18-删除远程分支\">#</a> 18、删除远程分支；</h3>\n<p>git push origin --delete 分支名</p>\n<h3 id=\"19-本地仓库与远程仓库关联\"><a class=\"markdownIt-Anchor\" href=\"#19-本地仓库与远程仓库关联\">#</a> 19、本地仓库与远程仓库关联；</h3>\n<p>git remote add origin 仓库地址</p>\n<h3 id=\"20-推送到远程\"><a class=\"markdownIt-Anchor\" href=\"#20-推送到远程\">#</a> 20、推送到远程；</h3>\n<p>git push -u origin 分支仓库名</p>\n<h3 id=\"20-查看本地分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地分支\">#</a> 20、查看本地分支；</h3>\n<p>git branch</p>\n<h3 id=\"20-查看本地和远程仓库的所有分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地和远程仓库的所有分支\">#</a> 20、查看本地和远程仓库的所有分支；</h3>\n<p>git branch -a</p>\n<h3 id=\"20-查看远程仓库的分支\"><a class=\"markdownIt-Anchor\" href=\"#20-查看远程仓库的分支\">#</a> 20、查看远程仓库的分支</h3>\n<p>git branch -r</p>\n<h3 id=\"20-查看本地库已经关联的远程仓库\"><a class=\"markdownIt-Anchor\" href=\"#20-查看本地库已经关联的远程仓库\">#</a> 20、查看本地库已经关联的远程仓库</h3>\n<p>git remote -v</p>\n",
            "tags": [
                "Git"
            ]
        }
    ]
}