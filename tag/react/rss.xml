<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>XGG • Posts by &#34;react&#34; tag</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 13 Apr 2023 22:47:06 +0800</pubDate>
        <lastBuildDate>Thu, 13 Apr 2023 22:47:06 +0800</lastBuildDate>
        <category>uni-app</category>
        <category>Git</category>
        <category>浏览器</category>
        <category>HTML基础</category>
        <category>JavaScript</category>
        <category>React</category>
        <category>Vue</category>
        <category>Webpack</category>
        <category>Node</category>
        <category>TypeScript</category>
        <category>计算机网络</category>
        <category>数据结构</category>
        <category>操作系统</category>
        <category>计算机组成</category>
        <category>Linux</category>
        <category>模块化开发</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/04/13/5003_React/</guid>
            <title>React</title>
            <link>http://example.com/2023/04/13/5003_React/</link>
            <category>React</category>
            <pubDate>Thu, 13 Apr 2023 22:47:06 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;使用 Hooks 旨在增加代码的可复用性，逻辑性，弥补无状态组件没有生命周期，没有数据管理状态 state 的缺陷。函数组件也能做类组件的事，有自己的状态，可以处理一些副作用，能获取 ref ，也能做数据缓存。解决逻辑复用难的问题，拥抱函数式编程。&lt;/p&gt;
&lt;h4 id=&#34;数据驱动更新型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据驱动更新型&#34;&gt;#&lt;/a&gt; 数据驱动更新型&lt;/h4&gt;
&lt;h6 id=&#34;数据更新usestate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据更新usestate&#34;&gt;#&lt;/a&gt; 数据更新 &lt;code&gt;useState&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const [ ①state , ②dispatch ] = useState(③initData)&lt;/code&gt; &lt;br&gt;
① state: 数据源。&lt;br&gt;
② dispatchAction: 改变 state 的函数，可以理解为推动函数组件渲染的渲染函数。&lt;br&gt;
③ initData: 有两种情况，第一种情况是非函数，将作为 state 初始化的值。第二种情况是函数，函数的返回值作为 useState 初始化的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意事项：
&lt;ul&gt;
&lt;li&gt;① 在函数组件一次执行上下文中，state 的值是固定不变的。&lt;/li&gt;
&lt;li&gt;② 如果两次 dispatchAction 传入相同的 state 值，那么组件就不会更新。&lt;/li&gt;
&lt;li&gt;③ 当触发 dispatchAction 在当前执行上下文中获取不到最新的 state, 只有再下一次组件 rerender 中才能获取到。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;订阅更新usereducer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#订阅更新usereducer&#34;&gt;#&lt;/a&gt; 订阅更新 &lt;code&gt;useReducer&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const [ ①state , ②dispatch ] = useReducer(③reducer)&lt;/code&gt; &lt;br&gt;
① 更新之后的 state 值。&lt;br&gt;
② 派发更新的 dispatchAction 函数，本质上和 useState 的 dispatchAction 是一样的。&lt;br&gt;
③ 一个函数 reducer ，我们可以认为它就是一个 redux 中的 reducer , reducer 的参数就是常规 reducer 里面的 state 和 action, 返回改变后的 state, 这里有一个需要注意的点就是：如果返回的 state 和之前的 state ，内存指向相同，那么组件将不会更新。&lt;/p&gt;
&lt;h6 id=&#34;过渡更新usetransition&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#过渡更新usetransition&#34;&gt;#&lt;/a&gt; 过渡更新 &lt;code&gt;usetransition&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const  [ isPending , startTransition ] = useTransition ()&lt;/code&gt; &lt;br&gt;
 useTransition 执行返回一个数组。数组有两个状态值：第一个是当处于过渡状态的标志 isPending。第二个是一个方法，可以理解为上述的 startTransition。可以把里面的更新任务变成过渡任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrent 模式下，过渡更新任务&lt;/li&gt;
&lt;li&gt;过渡任务对比立即更新任务而产生的，通常一些影响用户交互直观响应的任务例如按键，点击，输入等，这些任务需要视图上立即响应称之为立即更新的任务，但是有一些更新不是那么急迫，比如页面从一个状态过渡到另外一个状态，这些任务就叫做过渡任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;滞后更新usedeferredvalue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#滞后更新usedeferredvalue&#34;&gt;#&lt;/a&gt; 滞后更新 &lt;code&gt;useDeferredValue&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const deferrredValue = useDeferredValue(value)&lt;/code&gt; &lt;br&gt;
 useDeferredValue 和上述 useTransition 区别&lt;br&gt;
相同点： useDeferredValue 与 useTransition 一样都是标记成了过渡更新任务。&lt;br&gt;
不同点： useTransition 是把 startTransition 内部的更新任务变成了过渡任务 transtion, 而 useDeferredValue 是把原值通过过渡任务得到新的值，这个值作为延时状态。 一个是处理一段逻辑，另一个是生产一个新的状态。useDeferredValue 接受一个参数 value ，一般为可变的 state , 返回一个延时状态 deferrredValue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrent 模式下，更新状态滞后&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;外部数据源更新usesyncexternaistore&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#外部数据源更新usesyncexternaistore&#34;&gt;#&lt;/a&gt; 外部数据源更新 &lt;code&gt;useSyncExternaiStore&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot)&lt;/code&gt; &lt;br&gt;
① subscribe 为订阅函数，当数据改变的时候，会触发 subscribe，在 useSyncExternalStore 会通过带有记忆性的 getSnapshot 来判别数据是否发生变化，如果发生变化，那么会强制更新数据。&lt;br&gt;
② getSnapshot 可以理解成一个带有记忆功能的选择器。当 store 变化的时候，会通过 getSnapshot 生成新的状态值，这个状态值可提供给组件作为数据源使用，getSnapshot 可以检查订阅的值是否改变，改变的话那么会触发更新。&lt;br&gt;
③ getServerSnapshot 用于 hydration 模式下的 getSnapshot。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;concurrent 模式下，订阅外部数据源，触发更新&lt;/li&gt;
&lt;li&gt;React 组件在 concurrent 模式下安全地有效地读取外接数据源，在组件渲染过程中能够检测到变化，并且在数据源发生变化的时候，能够调度更新。当读取到外部状态发生了变化，会触发一个强制更新，来保证结果的一致性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;状态获取与传递型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#状态获取与传递型&#34;&gt;#&lt;/a&gt; 状态获取与传递型&lt;/h4&gt;
&lt;h6 id=&#34;订阅获取上下文usecontext&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#订阅获取上下文usecontext&#34;&gt;#&lt;/a&gt; 订阅获取上下文 &lt;code&gt;useContext&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const contextValue = useContext(context)&lt;/code&gt; &lt;br&gt;
 useContext 接受一个参数，一般都是 context 对象，返回值为 context 对象内部保存的 value 值。可以使用 useContext ，来获取父级组件传递过来的 context 值，这个当前值就是最近的父级组件 Provider 设置的 value 值，useContext 参数一般是由 createContext 方式创建的，也可以父级上下文 context 传递的 (参数为 context)。useContext 可以代替 context.Consumer 来获取 Provider 中保存的 value 值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跨层级状态传递&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;元素组件获取useref&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素组件获取useref&#34;&gt;#&lt;/a&gt; 元素组件获取 &lt;code&gt;useRef&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;const cur = React.useRef(initState)&lt;/code&gt; &lt;br&gt;
 useRef 可以用来获取元素，缓存状态，接受一个状态 initState 作为初始值，返回一个 ref 对象 cur, cur 上有一个 current 属性就是 ref 对象需要获取的内容。&lt;br&gt;
useRef 获取 DOM 元素、useRef 保存状态， 可以利用 useRef 返回的 ref 对象来保存状态，只要当前组件不被销毁，那么状态就会一直存在、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取元素或者组件实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;函数组件兼容refuseimperativehandle&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数组件兼容refuseimperativehandle&#34;&gt;#&lt;/a&gt; 函数组件兼容 ref &lt;code&gt;useImperativeHandle&lt;/code&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;用于函数组件能够被 ref 获取&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;状态派生与保存型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#状态派生与保存型&#34;&gt;#&lt;/a&gt; 状态派生与保存型&lt;/h4&gt;
&lt;h6 id=&#34;派生新状态usememo&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#派生新状态usememo&#34;&gt;#&lt;/a&gt; 派生新状态 &lt;code&gt;useMemo&lt;/code&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;性能优化，缓存新的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;保存状态usecallback&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保存状态usecallback&#34;&gt;#&lt;/a&gt; 保存状态 &lt;code&gt;useCallback&lt;/code&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;性能优化，缓存状态，提供给子代组件的 callback 回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;执行副作用型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行副作用型&#34;&gt;#&lt;/a&gt; 执行副作用型&lt;/h4&gt;
&lt;h6 id=&#34;异步执行副作用useeffect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异步执行副作用useeffect&#34;&gt;#&lt;/a&gt; 异步执行副作用 &lt;code&gt;useEffect&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;useEffect( () =&amp;gt; &amp;#123; return destory &amp;#125;, dep )&lt;/code&gt; &lt;br&gt;
 useEffect 第一个参数 callback, 返回的 destory ， destory 作为下一次 callback 执行之前调用，用于清除上一次 callback 产生的副作用。&lt;br&gt;
第二个参数作为依赖项，是一个数组，可以有多个依赖项，依赖项改变，执行上一次 callback 返回的 destory ，和执行新的 effect 第一个参数 callback 。&lt;br&gt;
对于 useEffect 执行， React 处理逻辑是采用异步调用 ，对于每一个 effect 的 callback， React 会向 setTimeout 回调函数一样，放入任务队列，等到主线程任务完成，DOM 更新，js 执行完成，视图绘制完毕，才执行。所以 effect 回调函数不会阻塞浏览器绘制视图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异步状态下，视图更新后，执行副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;同步执行副作用uselayouteffect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步执行副作用uselayouteffect&#34;&gt;#&lt;/a&gt; 同步执行副作用 &lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;① 首先 useLayoutEffect 是在 DOM 更新之后，浏览器绘制之前，这样可以方便修改 DOM，获取 DOM 信息，这样浏览器只会绘制一次，如果修改 DOM 布局放在 useEffect ，那 useEffect 执行是在浏览器绘制视图之后，接下来又改 DOM ，就可能会导致浏览器再次回流和重绘。而且由于两次绘制，视图上可能会造成闪现突兀的效果。&lt;br&gt;
② useLayoutEffect callback 中代码执行会阻塞浏览器绘制。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步状态下，试图更新前，执行副作用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;css-in-jsuseinetioneffect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css-in-jsuseinetioneffect&#34;&gt;#&lt;/a&gt; css in js &lt;code&gt;useInetionEffect&lt;/code&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;useLayoutEffect 执行的时候 DOM 已经更新了，但是在 useInsertionEffect 的执行的时候，DOM 还没有更新。useInsertionEffect 主要是解决 CSS-in-JS 在渲染中注入样式的性能问题&lt;/li&gt;
&lt;li&gt;用于处理 css in js 缺陷问题&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- #### 工具型
###### 服务端渲染`useID`
- 服务端渲染
###### debug`useDebugValue`
- devtool debug
#### 自定义 hooks：部分逻辑代码封装起来，做到复用，减少代码冗余 --&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2020/04/08/5002_React/</guid>
            <title>React</title>
            <link>http://example.com/2020/04/08/5002_React/</link>
            <category>React</category>
            <pubDate>Wed, 08 Apr 2020 19:47:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;组件通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件通信&#34;&gt;#&lt;/a&gt; 组件通信&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父子组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父组件传递子组件数据通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父组件通过 &lt;code&gt;属性=值&lt;/code&gt; 的形式来传递给子组件数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子组件通过 &lt;code&gt;props&lt;/code&gt;  参数获取父组件传递过来的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类组件之间传参&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;class Children extends Component&amp;#123;&lt;br&gt;  // 构造方法，方式一&lt;br&gt;  // constructor(props)&amp;#123;&lt;br&gt;  //   super();&lt;br&gt;  //   this.props = props;&lt;br&gt;  // &amp;#125;     &lt;br&gt;  &lt;br&gt;  // 构造方法，方式二&lt;br&gt;  // constructor(props)&amp;#123;&lt;br&gt;  //   super(props);&lt;br&gt;  // &amp;#125;&lt;br&gt;  // 构造方法，方式三&lt;br&gt;  // 不写，子类的默认构造方法可以省略&lt;br&gt;  render()&amp;#123;&lt;br&gt;    const &amp;#123; name,age,height &amp;#125; = this.props;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;h2&amp;gt;子组件显示数据:&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;export default class App extends Component &amp;#123;&lt;br&gt;  render() &amp;#123;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;Children name=&amp;quot;why&amp;quot; age=&amp;quot;20&amp;quot; height=&amp;quot;188&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;        &amp;lt;Children name=&amp;quot;GXX&amp;quot; age=&amp;quot;22&amp;quot; height=&amp;quot;172&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数组件之间传参&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;function Children(props) &amp;#123;&lt;br&gt;  const &amp;#123; name,age,height &amp;#125; = props;&lt;br&gt;  return (&lt;br&gt;    &amp;lt;div&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;App_函数组件&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;    &amp;lt;/div&amp;gt;&lt;br&gt;  )&lt;br&gt;&amp;#125;&lt;br&gt;export default class App extends Component &amp;#123;&lt;br&gt;  render() &amp;#123;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;Children name=&amp;quot;why&amp;quot; age=&amp;quot;20&amp;quot; height=&amp;quot;188&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;        &amp;lt;Children name=&amp;quot;GXX&amp;quot; age=&amp;quot;22&amp;quot; height=&amp;quot;172&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件参数类型验证&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;import PropTypes from &amp;#x27;prop-types&amp;#x27;&lt;br&gt;function Children(props) &amp;#123;&lt;br&gt;  const &amp;#123; name,age,height,names&amp;#125; = props;&lt;br&gt;  return (&lt;br&gt;    &amp;lt;div&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;App_函数组件&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;ul&amp;gt;&lt;br&gt;        &amp;#123;&lt;br&gt;          names.map((item,index)=&amp;gt;&amp;#123;&lt;br&gt;            return &amp;lt;li&amp;gt;&amp;#123;item&amp;#125;&amp;lt;/li&amp;gt;&lt;br&gt;          &amp;#125;)&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;lt;/ul&amp;gt;&lt;br&gt;    &amp;lt;/div&amp;gt;&lt;br&gt;  )&lt;br&gt;&amp;#125;&lt;br&gt;// 设置属性类型验证&lt;br&gt;Children.propsTypes = &amp;#123;&lt;br&gt;  name:PropTypes.string.isRequired,&lt;br&gt;  age:PropTypes.number,&lt;br&gt;  height:PropTypes.number,&lt;br&gt;  names:PropTypes.array&lt;br&gt;&amp;#125;&lt;br&gt;// 设置属性默认值&lt;br&gt;Children.defaultProps = &amp;#123;&lt;br&gt;  name:&amp;quot;XGG&amp;quot;,&lt;br&gt;  age:12,//默认类型也会进行类型判断&lt;br&gt;  height:199,&lt;br&gt;  names:[&amp;quot;123&amp;quot;,&amp;quot;456&amp;quot;,&amp;quot;789&amp;quot;]&lt;br&gt;&amp;#125;&lt;br&gt;// 补充：类组件的相关属性编写规范&lt;br&gt;class Children2 extends Component&amp;#123;&lt;br&gt;  //es6中class fields写法，给类上添加属性，而非对象上&lt;br&gt;  static propsTypes =&amp;#123;&lt;br&gt;  &amp;#125;&lt;br&gt;  static defaultProps =&amp;#123;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;Children2.propsTypes = &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子组件传递父组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父组件给子组件传递一个回调函数，在子组件中调用这个函数即可&lt;/li&gt;
&lt;li&gt;子组件可以通过该回调函数向父组件传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟插槽样式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跨组件通信 (数据传递)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照层次依次传递： &lt;code&gt;Spread Attributes&lt;/code&gt; ，可以使用&lt;strong&gt;属性展开符： &lt;code&gt;...&lt;/code&gt; &lt;/strong&gt;，但是此方案对于中间层会存在冗余操作&lt;/li&gt;
&lt;li&gt;使用 ReactAPI: &lt;code&gt;Context&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;React.createContext&lt;/code&gt; : 创建一个需要共享的对象，若某组件订阅 &lt;code&gt;Context&lt;/code&gt;  时该组件会从距离自身最近的匹配 &lt;code&gt;Provider&lt;/code&gt;  中读取到当前 &lt;code&gt;Context&lt;/code&gt;  值， &lt;code&gt;defaultValue&lt;/code&gt;  是组件在顶层查找过程中没有找到对应的 &lt;code&gt;Provider&lt;/code&gt; , 就会使用默认值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.Provider&lt;/code&gt; : 在创建 &lt;code&gt;Context对象&lt;/code&gt;  (context) 时会返回一个 &lt;code&gt;Provider React组件&lt;/code&gt; ，它允许消费组件订阅 &lt;code&gt;Context&lt;/code&gt;  变化， &lt;code&gt;Provider&lt;/code&gt;  接收一个属性 &lt;code&gt;value&lt;/code&gt;  属性传递给消费组件，一个 &lt;code&gt;Provider&lt;/code&gt;  可以和多个消费组件有对应关系，多个 &lt;code&gt;Provider&lt;/code&gt;  可以嵌套使用，里层会覆盖外层数据；当 &lt;code&gt;Provider&lt;/code&gt;  的 &lt;code&gt;value&lt;/code&gt;  值发生变化时，它内部所有的消费组件都会重新渲染&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextType&lt;/code&gt; : 挂载在 &lt;code&gt;class&lt;/code&gt;  上的 &lt;code&gt;contextType&lt;/code&gt;  属性会被重新赋值为一个由 &lt;code&gt;React.createContext&lt;/code&gt;  创建的 &lt;code&gt;Context&lt;/code&gt;  对象，这可以使用 &lt;code&gt;this.context&lt;/code&gt;  来获取最近 &lt;code&gt;Context&lt;/code&gt;  上的值；可以在任何生命周期中访问到，包括 &lt;code&gt;render&lt;/code&gt;  函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer&lt;/code&gt; : React 组件可以订阅到 context 变化，可以在函数式组件中完成订阅 context，需要函数作为子元素，该函数接收当前的 context 值，返回一个 React 节点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;events&lt;/code&gt; （全局事件传递）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install events&lt;/code&gt; : 安装&lt;/li&gt;
&lt;li&gt;常用 API
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;eventBus对象&lt;/code&gt; ：创建 EventEmitter 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.emit(&amp;quot;事件名称&amp;quot;,参数列表)&lt;/code&gt; : 发出事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.addListener(&amp;quot;事件名称&amp;quot;,监听函数)&lt;/code&gt; : 监听事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.removeListener(&amp;quot;事件名称&amp;quot;,监听函数)&lt;/code&gt; : 移除事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2020/04/06/5001_React/</guid>
            <title>React</title>
            <link>http://example.com/2020/04/06/5001_React/</link>
            <category>React</category>
            <pubDate>Mon, 06 Apr 2020 08:20:45 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;react选择jsx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#react选择jsx&#34;&gt;#&lt;/a&gt; React 选择 JSX&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;jsx 是嵌入到 JavaScript 中的一种结构语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jsx 顶层只能有一个根元素，通常在 jsx 的外层包裹着一个小括号 ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是单标签必须以 &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt;  结尾，否则报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释的方式： &lt;code&gt;&amp;#123;/*我是注释*/&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中是否显示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接显示： &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;array&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不显示内容为空： &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;附加：若想让其显示的措施为：布尔类型直接使用 tostring 方法，另外两个使用 totring 包裹或者添加一个空字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** &lt;code&gt;对象类型&lt;/code&gt;  ** 不能作为 jsx 的子类，不能直接放在 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  嵌入表达式：运算表达式、三元运算符、执行一个函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定属性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绑定普通属性&lt;/li&gt;
&lt;li&gt;绑定 class 属性: &lt;code&gt;className&lt;/code&gt; 、 &lt;code&gt;htmlFor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;绑定 style 属性: &lt;code&gt;style=&amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定事件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;关于 &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式1.1：bind绑定this(显示绑定)*/&lt;/span&gt;&amp;#125;&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式1.2：在constructor中统一绑定事件*/&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;   &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;   &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;...&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;...&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式2：定义函数时，使用箭头函数，箭头函数中永远不绑定this，会向上即最近作用域寻找当前对象*/&lt;/span&gt;&amp;#125;&lt;br&gt;...&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;...&lt;br&gt;add = &lt;span class=&#34;hljs-function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;counter&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式3(推荐)：直接传入一个箭头函数，在箭头函数中调用需要执行的函数*/&lt;/span&gt;&amp;#125;&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;()&amp;#125;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;movies&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;天下无敌&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;奇门遁甲&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;十面埋伏&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;您好，李焕英&amp;quot;&lt;/span&gt;]&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;liClick&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;liClick&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;this.liClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;按钮&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            this.state.movies.map((item,index,arr)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;(event)&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;this.liClick(item,index,event)&amp;#125;&amp;#125;&amp;gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;liClick&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;item,index,event&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;点击按钮&amp;quot;&lt;/span&gt;,item,index);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件渲染&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;isLogin&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123;isLogin&amp;#125; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; welcome = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; btnText = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (isLogin) &amp;#123;&lt;br&gt;      welcome = &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;欢迎回来&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      btnText = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;退出&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;      welcome = &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;请先登录&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      btnText = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登录&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &amp;#123;welcome&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;event&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;this.loginClick()&amp;#125;&amp;#125;&amp;gt;&amp;#123;isLogin?&amp;quot;退出&amp;quot;:&amp;quot;登录&amp;quot;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;hr&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;isLogin?&amp;quot;GXX&amp;quot;:null&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &amp;#123;isLogin&amp;amp;&amp;amp;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;GXX&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;loginClick&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;setState&lt;/span&gt;(&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;isLogin&lt;/span&gt;: !&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;isLogin&lt;/span&gt;&lt;br&gt;    &amp;#125;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表渲染&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;names&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cba&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;nba&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;],&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;nums&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;44&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;66&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;33&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;88&amp;quot;&lt;/span&gt;]&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; names,nums &amp;#125; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;列表渲染1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            names.map((item,index,arr)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;数字列表渲染2(过滤)&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            nums.filter((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return item&amp;gt;=30;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;).map((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;数字列表渲染3(截取)&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            nums.slice(0,3).map((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jsx&lt;/code&gt;  的本质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;jsx&lt;/code&gt;  是 &lt;code&gt;React.createElement(component,props,...children)&lt;/code&gt;  函数的语法糖，将会转换成 &lt;code&gt;React.createElement()&lt;/code&gt;  函数调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;React.createElement()&lt;/code&gt;  需要三个参数 ( &lt;code&gt;源码讲解&lt;/code&gt; )
&lt;ol&gt;
&lt;li&gt;参数一：type
&lt;ol&gt;
&lt;li&gt;当前 ReactElement 的类型&lt;/li&gt;
&lt;li&gt;标签元素，字符串表示 &lt;code&gt;&amp;quot;div&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组件元素，组件名称&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;参数二：config
&lt;ol&gt;
&lt;li&gt;所有的 jsx 属性都在 config 中以对象的属性和值的形式存储&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;参数三：children
&lt;ol&gt;
&lt;li&gt;存放在标签中的内容，以 children 数组的方式进行存储&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;遍历 &lt;code&gt;React.createElement函数中的参数&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;../../all_photo/React.createElement%E5%87%BD%E6%95%B0_%E6%BA%90%E7%A0%81.png&#34; alt=&#34;image-20220608201741842&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;jsx-&amp;gt;通过React.createElement函数-&amp;gt;创建ReactElement(对象)-&amp;gt;组成JavaScript的对象树(虚拟DOM)-&amp;gt;通过ReactDOM.render函数-&amp;gt;映射成浏览器中的真实DOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsx-&amp;gt;通过React.createElement函数-&amp;gt;创建ReactElement(对象)-&amp;gt;组成JavaScript的对象树(虚拟DOM)-&amp;gt;通过ReactDOM.render函数-&amp;gt;原生的控件(UIButton/Button)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么使用虚拟 DOM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很难跟踪状态发生的改变&lt;/li&gt;
&lt;li&gt;操作真实 DOM 性能较低
&lt;ol&gt;
&lt;li&gt;创建出来的对象较复杂&lt;/li&gt;
&lt;li&gt;DOM 操作会引起浏览器的回流和重绘，因此在开发中避免频繁 DOM 操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟 DOM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由命令式转换为声明式编程&lt;/li&gt;
&lt;li&gt;UI 以虚拟的方式保存在内存中，并且是 JavaScript 对象&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;ReactDOM.render()&lt;/code&gt;  让虚拟 DOM 和真实 DOM 同步起来，这个过程叫作协调&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
