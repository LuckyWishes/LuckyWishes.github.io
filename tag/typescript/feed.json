{
    "version": "https://jsonfeed.org/version/1",
    "title": "XGG • All posts by \"typescript\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/01/9003_TypeScript/",
            "url": "http://example.com/2020/09/01/9003_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-09-01T11:58:59.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"10属性的封装\"><a class=\"markdownIt-Anchor\" href=\"#10属性的封装\">#</a> 10. 属性的封装</h5>\n<ol>\n<li>\n<p>修饰符</p>\n<ol>\n<li><code>public</code> : 修饰的属性可以在任意位置访问及修改，默认值</li>\n<li><code>private</code> : 私有属性，只能在类内部进行访问及修改，通过类中添加方法使得私有属性可以被外部访问</li>\n<li><code>protected</code> : 只能在当前类和当前类的子类中访问及修改</li>\n</ol>\n</li>\n<li>\n<p>封装属性提升安全性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Personn</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>  &#125;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">    getter方法用来读取属性，</span><br><span class=\"hljs-comment\">    setter方法用来设置属性，这两个方法被称为属性的存取器。</span><br><span class=\"hljs-comment\">  */</span><br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">name_easy</span>() &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">name_easy</span>(<span class=\"hljs-params\">value: <span class=\"hljs-built_in\">string</span></span>) &#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>= value;<br>    &#125;<br>    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">age_easy</span>()&#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">age_easy</span>(<span class=\"hljs-params\">value:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = value;<br>    &#125;<br><span class=\"hljs-comment\">/*   // 定义方法，用来获取name属性</span><br><span class=\"hljs-comment\">  getterName()&#123;</span><br><span class=\"hljs-comment\">    return this.name;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来设置name属性</span><br><span class=\"hljs-comment\">  setterName(value:string)&#123;</span><br><span class=\"hljs-comment\">    this.name = value;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来获取age性</span><br><span class=\"hljs-comment\">  getterAge()&#123;</span><br><span class=\"hljs-comment\">    return this.age;</span><br><span class=\"hljs-comment\">  &#125;</span><br><span class=\"hljs-comment\">  // 定义方法，用来设置age属性</span><br><span class=\"hljs-comment\">  setterAge(value:number)&#123;</span><br><span class=\"hljs-comment\">    // 用来判断数据是否合法</span><br><span class=\"hljs-comment\">    if (value&gt;=0) &#123;    </span><br><span class=\"hljs-comment\">      this.age = value;</span><br><span class=\"hljs-comment\">    &#125;</span><br><span class=\"hljs-comment\">  &#125; */</span><br>&#125;<br><span class=\"hljs-comment\">// 简洁版，直接将属性定义在构造函数中</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> name:<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-keyword\">public</span> age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> personn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Personn</span>(<span class=\"hljs-string\">&#x27;李四&#x27;</span>,<span class=\"hljs-number\">20</span>);<br><span class=\"hljs-comment\">/* personn.setterName(&#x27;王二&#x27;);// 修改name的值</span><br><span class=\"hljs-comment\">personn.setterAge(-12);// 修改age的值 */</span><br>personn.<span class=\"hljs-property\">name_easy</span> = <span class=\"hljs-string\">&#x27;test&#x27;</span>;<br>personn.<span class=\"hljs-property\">age_easy</span> = <span class=\"hljs-number\">23</span>;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn.<span class=\"hljs-property\">name_easy</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn.<span class=\"hljs-property\">age_easy</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(personn);<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"11泛型\"><a class=\"markdownIt-Anchor\" href=\"#11泛型\">#</a> 11. 泛型</h5>\n<ol>\n<li>\n<p>泛型的使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 在定义函数和类时，遇到类型不明确就可以使用泛型</span><br><span class=\"hljs-keyword\">function</span> fn&lt;T&gt;(<span class=\"hljs-attr\">a</span>:T):T&#123;<br>  <span class=\"hljs-keyword\">return</span> a;<br>&#125;<br><span class=\"hljs-comment\">// 1.不指定泛型，直接使用，利用TS的自动类型检测</span><br><span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-number\">12</span>);<br><span class=\"hljs-comment\">// 2. 指定泛型</span><br>fn&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br><span class=\"hljs-comment\">// 泛型可以同时指定多个</span><br><span class=\"hljs-keyword\">function</span> fn2&lt;T,K&gt;(<span class=\"hljs-attr\">a</span>:T,<span class=\"hljs-attr\">b</span>:K):T &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b);<br>  <span class=\"hljs-keyword\">return</span> a;<br>&#125;<br>fn2&lt;<span class=\"hljs-built_in\">number</span>,<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-number\">12</span>,<span class=\"hljs-string\">&#x27;test&#x27;</span>);<br><span class=\"hljs-comment\">//函数可以使用泛型</span><br><span class=\"hljs-comment\">//  T extends Inter 表示泛型T必须是Inter实现类(子类)。</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Inter</span>&#123;<br>  <span class=\"hljs-attr\">demo</span>:<span class=\"hljs-built_in\">number</span><br>&#125;<br><span class=\"hljs-keyword\">function</span> fn3&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Inter</span>&gt;(<span class=\"hljs-attr\">a</span>:T):<span class=\"hljs-built_in\">number</span> &#123;<br>  <span class=\"hljs-keyword\">return</span> a.<span class=\"hljs-property\">demo</span>;<br>&#125;<br><span class=\"hljs-comment\">// 类中也可以使用泛型</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">myClass</span>&lt;T&gt; &#123;<br>  <span class=\"hljs-attr\">name</span>:T;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:T</span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> mc = <span class=\"hljs-keyword\">new</span> myClass&lt;<span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">&#x27;张三&#x27;</span>);<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "http://example.com/2020/08/27/9002_TypeScript/",
            "url": "http://example.com/2020/08/27/9002_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-08-27T10:58:09.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"5使用webpack打包ts代码\"><a class=\"markdownIt-Anchor\" href=\"#5使用webpack打包ts代码\">#</a> 5. 使用 webpack 打包 ts 代码</h5>\n<ol>\n<li>\n<p><code>webpack.config.js</code>  文件配置 webpack</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 引入路径管理的包</span><br><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);<br><br><span class=\"hljs-comment\">//webpack中所有的配置信息都写在module.exports中 </span><br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-comment\">// 指定入口文件路径</span><br>  <span class=\"hljs-attr\">entry</span>:<span class=\"hljs-string\">&#x27;./test.ts&#x27;</span>,<br><br>  <span class=\"hljs-comment\">// 指定打包文件所在目录</span><br>  <span class=\"hljs-attr\">output</span>:&#123;<br>    <span class=\"hljs-comment\">// 指定打包文件的目录</span><br>    <span class=\"hljs-attr\">path</span>:path.<span class=\"hljs-title function_\">resolve</span>(__dirname,<span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>    <span class=\"hljs-comment\">// 打包后文件的名字</span><br>    <span class=\"hljs-attr\">filename</span>:<span class=\"hljs-string\">&quot;bundle.js&quot;</span><br>  &#125;,<br>  <span class=\"hljs-comment\">// 指定webpack打包时要使用的模块</span><br>  <span class=\"hljs-attr\">module</span>:&#123;<br>    <span class=\"hljs-comment\">// 指定要加载的规则</span><br>    <span class=\"hljs-attr\">rules</span>:[<br>      &#123;<br>        <span class=\"hljs-comment\">// 指定规则生效的文件，使用正则语法</span><br>        <span class=\"hljs-attr\">test</span>:<span class=\"hljs-regexp\">/\\.ts$/</span>,<span class=\"hljs-comment\">//ts文件生效</span><br>        <span class=\"hljs-comment\">// 要使用的loader</span><br>        <span class=\"hljs-attr\">use</span>:<span class=\"hljs-string\">&#x27;ts-loader&#x27;</span>,<br>        <span class=\"hljs-comment\">// 要排除的文件</span><br>        <span class=\"hljs-attr\">exclude</span>:<span class=\"hljs-regexp\">/node-modules/</span><br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"6面向对象\"><a class=\"markdownIt-Anchor\" href=\"#6面向对象\">#</a> 6. 面向对象</h5>\n<ol>\n<li>在程序中把一切事物当作对象编写</li>\n</ol>\n<h5 id=\"7类的简介\"><a class=\"markdownIt-Anchor\" href=\"#7类的简介\">#</a> 7. 类的简介</h5>\n<ol>\n<li>\n<p>类的实现</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;hello&#x27;</span><br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">18</span><br>  <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">aa</span>:<span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">12</span><br>  <span class=\"hljs-comment\">// constructor(parameters) &#123;</span><br>    <br>  <span class=\"hljs-comment\">// &#125;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(); <br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(person);<br>person.<span class=\"hljs-property\">aa</span> = <span class=\"hljs-number\">18</span> <span class=\"hljs-comment\">//报错，只读属性，不能修改。</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>属性分为两种</p>\n<ol>\n<li>\n<p>实例属性：直接定义的属性，需要通过对象的实例去访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;hello&#x27;</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> person = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();<br>person.<span class=\"hljs-property\">name</span>;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类属性 | 静态属性：使用 <code>static</code>  关键字修饰的属性，直接通过类去访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;<br>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;test&#x27;</span><br>&#125;<br><span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">name</span>;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>readonly</code> : 只读属性，无法修改</p>\n</li>\n</ol>\n</li>\n<li>\n<p>方法分为两种</p>\n<ol>\n<li>实例方法：需要使用对象的实例去访问。</li>\n<li>类方法 | 静态方法：直接使用类去访问。</li>\n</ol>\n</li>\n<li>\n<p><code>constructor</code> : 称为构造函数，构造函数会在创建对象时调用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Per</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">&#x27;王二&#x27;</span><br>  age = <span class=\"hljs-number\">12</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-comment\">// 在实例方法中，this就表示当前的实例</span><br>    <span class=\"hljs-comment\">// 在构造函数中当前对象就是新建对象</span><br>    <span class=\"hljs-comment\">// 可以通过this向新建对象中添加属性</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">speak</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hahahha&quot;</span>);<br>    <span class=\"hljs-comment\">// 在方法中可以使用this来表示当前调用方法的对象</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> per = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Per</span>(<span class=\"hljs-string\">&#x27;张三&#x27;</span>,<span class=\"hljs-number\">30</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(per);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(per.<span class=\"hljs-property\">name</span>);<br>per.<span class=\"hljs-title function_\">speak</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"8继承\"><a class=\"markdownIt-Anchor\" href=\"#8继承\">#</a> 8. 继承</h5>\n<ol>\n<li>\n<p>简介</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;动物在说话!&quot;</span>);<br>    <br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">//子类继承父类，Animal为父类，Dog为子类，子类将会拥有父类所有的属性和方法</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span>&#123;<br>  <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>在奔跑!`</span>);<br>  &#125;<br>  <span class=\"hljs-comment\">// 子类将会把父类中相同的方法覆盖掉，被称为重写</span><br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`汪汪汪`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animal</span>&#123;<br>  <span class=\"hljs-title function_\">talk</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`喵喵喵`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&#x27;小狗&#x27;</span>,<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-keyword\">const</span> cat = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&#x27;小猫&#x27;</span>,<span class=\"hljs-number\">4</span>);<br>dog.<span class=\"hljs-title function_\">talk</span>();<br>cat.<span class=\"hljs-title function_\">talk</span>();<br>dog.<span class=\"hljs-title function_\">run</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>super</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Ani</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`动物在说话!000`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Doff</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Ani</span> &#123;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>    <span class=\"hljs-comment\">// 若子类中写构造函数，则把父类中构造函数覆盖（重写），在子类构造函数中必须对父类中构造函数进行调用</span><br>    <span class=\"hljs-variable language_\">super</span>(name);<span class=\"hljs-comment\">//调用父类中构造函数</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-comment\">// 在类的方法中super就表示当前类的父类</span><br>      <span class=\"hljs-variable language_\">super</span>.<span class=\"hljs-title function_\">sayHello</span>();<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> doff = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Doff</span>(<span class=\"hljs-string\">&#x27;旺财&#x27;</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(doff);<br>doff.<span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>抽象类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">  以abstract开头的类是抽象类，</span><br><span class=\"hljs-comment\">  抽象类不能用来创建对象，</span><br><span class=\"hljs-comment\">  抽象类就是专门用来被继承的类。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animala</span> &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>  &#125;<br>  <span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">    抽象方法使用abstract开头，没有方法体，</span><br><span class=\"hljs-comment\">    抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-title function_\">sayHello</span>():<span class=\"hljs-built_in\">void</span><br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dogg</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Animala</span>&#123;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>) &#123;<br>    <span class=\"hljs-variable language_\">super</span>(name);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(<span class=\"hljs-params\"></span>)&#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-variable language_\">this</span>.name&#125;</span>说话!`</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-keyword\">const</span> dogg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dogg</span>(<span class=\"hljs-string\">&#x27;旺财1&#x27;</span>,<span class=\"hljs-number\">2</span>);<br>dogg.<span class=\"hljs-title function_\">sayHello</span>();<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"9-接口\"><a class=\"markdownIt-Anchor\" href=\"#9-接口\">#</a> 9. 接口</h5>\n<ol>\n<li>\n<p>接口的使用</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// 类型声明(不能重复声明)，描述一个对象的类型</span><br><span class=\"hljs-keyword\">type</span> myType = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>&#125;;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">obj</span>:myType = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;test&#x27;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span><br>&#125;<br><span class=\"hljs-comment\">// 接口用来定义一个类结构，定义类中应该包含哪些属性和方法</span><br><span class=\"hljs-comment\">// 同时接口也可以当成类型声明使用(可以重复声明)</span><br><span class=\"hljs-keyword\">interface</span> myInterface&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span><br>&#125;<br><span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">object</span>:myInterface = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;demo&#x27;</span>,<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">12</span><br>&#125;<br><span class=\"hljs-comment\">// 接口可以在定义类时限制类的结构，</span><br><span class=\"hljs-comment\">// 接口中所有的属性都不能有实际的值，</span><br><span class=\"hljs-comment\">// 接口只定义对象的结构，而不考虑实际值，在接口中所有的方法都是抽象方法</span><br><span class=\"hljs-keyword\">interface</span> myInter&#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">sayHello</span>():<span class=\"hljs-built_in\">void</span>;<br>&#125;<br><span class=\"hljs-comment\">// 定义类时可以使类去实现一个接口,实现接口就是使类满足接口的要求</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span> <span class=\"hljs-keyword\">implements</span> myInter&#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;<br>  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-built_in\">number</span>;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name:<span class=\"hljs-built_in\">string</span>,age:<span class=\"hljs-built_in\">number</span></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age<br>  &#125;<br>  <span class=\"hljs-title function_\">sayHello</span>(): <span class=\"hljs-built_in\">void</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`hello !`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        },
        {
            "id": "http://example.com/2020/08/21/9001_TypeScript/",
            "url": "http://example.com/2020/08/21/9001_TypeScript/",
            "title": "TypeScript",
            "date_published": "2020-08-21T08:38:49.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">您好，欢迎您的阅读，等君久矣，愿与君畅谈.</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">§ 始于颜值 § 陷于才华 § 忠于人品 §</span><br>\n📫  <span style=\"font-size:initial;color:purple\">希望我们可以进一步交流，共同学习，共同探索未知的技术世界 <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> OR <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"1简介\"><a class=\"markdownIt-Anchor\" href=\"#1简介\">#</a> 1. 简介</h5>\n<ol>\n<li>以 JavaScript 为基础构建的语言；一个 JavaScript 的超集；可以在任何支持 JavaScript 的平台中执行，TS 不能被 JS 解析器直接执行，需要编译转换为 JavaScript；typescript 扩展了 JavaScript，并且添加了类型。</li>\n<li>typescript 增加了类型、支持 ES6 新特性、强大的开发工具、添加 ES 不具备的新特性、丰富的配置选项</li>\n</ol>\n<h5 id=\"2-搭建ts开发环境\"><a class=\"markdownIt-Anchor\" href=\"#2-搭建ts开发环境\">#</a> 2. 搭建 TS 开发环境</h5>\n<ol>\n<li>下载 node</li>\n<li>安装 node <code>node -v</code></li>\n<li>npm 全局安装 ts <code>npm i typescript -g</code></li>\n<li>检查 typescript 版本 <code>tsc --version</code></li>\n</ol>\n<h5 id=\"3类型声明\"><a class=\"markdownIt-Anchor\" href=\"#3类型声明\">#</a> 3. 类型声明</h5>\n<ol>\n<li>\n<p>基本类型 (小写)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>number、string、boolean三种类型<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">bb</span>:number;<br><span class=\"hljs-comment\">//TS具有自动类型判断机制，当变量和赋值同时进行时可以省略类型声明</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">aa</span>:string = <span class=\"hljs-string\">&#x27;hello&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">cc</span>:boolean = <span class=\"hljs-literal\">true</span>;<br><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">参数<span class=\"hljs-number\">1</span>:类型,参数<span class=\"hljs-number\">2</span>:类型</span>):类型&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>字面量类型 (联合类型)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:<span class=\"hljs-string\">&#x27;test&#x27;</span> | <span class=\"hljs-string\">&#x27;demo&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>: boolean | number;<br>b = <span class=\"hljs-literal\">true</span>;<br>b = <span class=\"hljs-number\">12</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>any (任意类型): 相当于关闭 TS 的类型检测</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> a;（隐式）<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:any;（显式）<br>以上两种类型均是any类型<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>unknown (未知类型)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>any赋值问题<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:any;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:string;<br>b = a;<span class=\"hljs-comment\">//a是any类型，它可以赋值给任意变量（谁碰any谁变）</span><br><span class=\"hljs-number\">2.</span>unknown赋值问题<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:unknown;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:string;<br>b = a;<span class=\"hljs-comment\">//报错，unknown实际上是类型安全的any，unknown类型的变量，不能直接赋值给其他变量</span><br>可以使用类型断言处理报错[<span class=\"hljs-number\">1.</span>添加条件 <span class=\"hljs-number\">2.</span>类型断言]<br><span class=\"hljs-number\">3.</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>void (用来表示空，以函数为例，表示没有返回值的函数)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>):<span class=\"hljs-keyword\">void</span>&#123;<br>  <span class=\"hljs-keyword\">return</span> unll/underfined<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>never (表示永远不会返回结果)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>):never&#123;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>object</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:object;<br>\ta = &#123;&#125;<br><span class=\"hljs-number\">2.</span>&#123;&#125;用来指定对象中可以包含哪些属性<br>\t语法:&#123;属性名:属性值,属性名:属性值&#125;<br>\t在属性名后边加上?，表示属性为可选的<br>\t<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:&#123;<span class=\"hljs-attr\">name</span>:string,age?:number&#125;<br>\tb = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;测试&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;<br><span class=\"hljs-number\">3.</span>定义对象:[属性名:类型(一般为string)]:类型(一般为any)<br>\tt <span class=\"hljs-attr\">c</span>:&#123;<span class=\"hljs-attr\">name</span>:string,[<span class=\"hljs-attr\">propName</span>:string]:any&#125;;<br>\tc = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;测试&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>&#125;;<br><span class=\"hljs-number\">3.</span>定义函数:设置函数结构的类型声明<br>\t语法:<span class=\"hljs-function\">(<span class=\"hljs-params\">形参:类型,形参:类型...</span>) =&gt;</span> 返回值<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">d</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">a:number,b:number</span>) =&gt;</span>number<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>array</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">数组的类型声明<br><span class=\"hljs-number\">1.</span>类型[]<br>\t<span class=\"hljs-number\">1.1</span> string[] 表示字符串数组<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">a</span>:string[];<br>\ta = [<span class=\"hljs-string\">&#x27;a&#x27;</span>,<span class=\"hljs-string\">&#x27;b&#x27;</span>,<span class=\"hljs-string\">&#x27;c&#x27;</span>];<br>\t<span class=\"hljs-number\">1.2</span> number[] 表示数值数组<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">b</span>:number[];<br>\tb = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br><span class=\"hljs-number\">2.</span><span class=\"hljs-title class_\">Array</span>&lt;&gt;<br>  <span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">aa</span>:<span class=\"hljs-title class_\">Array</span>&lt;number&gt;;<br>  aa = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>];<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>tuple (元组): 固定长度的数组</p>\n<ol>\n<li>语法：[类型，类型，类型]</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">test</span>:[string,string];<br>test = [<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-string\">&#x27;hello&#x27;</span>];<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>enum (枚举)[常用于选择项]</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Gender</span>&#123;<br>  <span class=\"hljs-title class_\">Male</span> = <span class=\"hljs-number\">1</span>,<br>  <span class=\"hljs-title class_\">Female</span> =<span class=\"hljs-number\">0</span><br>&#125;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">obj</span>:&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>,<span class=\"hljs-attr\">gender</span>:<span class=\"hljs-title class_\">Gender</span>&#125;<br>obj = &#123;<br>  <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;悟空&#x27;</span>,<br>  <span class=\"hljs-attr\">gender</span>:<span class=\"hljs-title class_\">Gender</span>.<span class=\"hljs-property\">Male</span><br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">gender</span>===<span class=\"hljs-title class_\">Gender</span>.<span class=\"hljs-property\">Male</span>);<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>类型断言</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1.</span>语法<span class=\"hljs-number\">1</span>:变量 <span class=\"hljs-keyword\">as</span> 类型 <br><span class=\"hljs-number\">2.</span>语法<span class=\"hljs-number\">2</span>:&lt;类型&gt; 变量<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>补充</p>\n<ol>\n<li><code>&amp;</code>  同时</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">j</span>:&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-built_in\">string</span>&#125; &amp; &#123;<span class=\"hljs-attr\">age</span>:<span class=\"hljs-built_in\">number</span>&#125;<br>j = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;悟空&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span>&#125;<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>类型的别名</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">type</span> myType = <span class=\"hljs-number\">1</span>|<span class=\"hljs-number\">2</span>|<span class=\"hljs-number\">3</span>|<span class=\"hljs-number\">4</span>|<span class=\"hljs-number\">5</span>;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">k</span>:myType;<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">l</span>:myType;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n<h5 id=\"4编译选项\"><a class=\"markdownIt-Anchor\" href=\"#4编译选项\">#</a> 4. 编译选项</h5>\n<ol>\n<li>\n<p><code>tsc 文件名.ts -w</code> ：自动监视文件变化</p>\n</li>\n<li>\n<p><code>tsconfig.json</code>  文件配置</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\">&#123;<br>  <span class=\"hljs-comment\">// tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译</span><br>  <span class=\"hljs-comment\">// 用来指定需要编译的ts目录及文件</span><br>  <span class=\"hljs-comment\">// 路径：** 表示任意目录，* 表示任意文件</span><br>  <span class=\"hljs-string\">&quot;include&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./test.ts&quot;</span><br>  ],<br>  <span class=\"hljs-comment\">// 用来指定不需要编译的ts文件</span><br>  <span class=\"hljs-comment\">// 默认值：[&#x27;node_modules&#x27;,&#x27;bower_components&#x27;,&#x27;jspm_packages&#x27;]</span><br>  <span class=\"hljs-string\">&quot;exclude&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./demo.ts&quot;</span><br>  ],<br><br>  <span class=\"hljs-comment\">// 用来继承其他的配置文件 </span><br>  <span class=\"hljs-string\">&quot;extends&quot;</span>: <span class=\"hljs-string\">&quot;./tsconfig.json&quot;</span>,<br><br>  <span class=\"hljs-comment\">// 用来指定需要编译的ts文件</span><br>  <span class=\"hljs-string\">&quot;files&quot;</span>: [<br>    <span class=\"hljs-string\">&quot;./test.ts&quot;</span><br>  ],<br><br>  <span class=\"hljs-comment\">// 编译选项，对编译器的配置</span><br>  <span class=\"hljs-string\">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class=\"hljs-comment\">// 项目选项</span><br>    <span class=\"hljs-comment\">// 设置ts代码编译的目标版本</span><br>    <span class=\"hljs-string\">&quot;target&quot;</span>: <span class=\"hljs-string\">&quot;ES6&quot;</span>,<br>    <span class=\"hljs-comment\">// 指定要使用的模块化规范</span><br>    <span class=\"hljs-string\">&quot;module&quot;</span>: <span class=\"hljs-string\">&quot;ES6&quot;</span>,<br>    <span class=\"hljs-comment\">// 用来指定项目中要使用的库</span><br>    <span class=\"hljs-string\">&quot;lib&quot;</span>: [<br>      <span class=\"hljs-string\">&quot;ES2015&quot;</span>,<br>      <span class=\"hljs-string\">&quot;DOM&quot;</span><br>    ],<br>    <span class=\"hljs-comment\">// 用来指定编译后文件所在的目录</span><br>    <span class=\"hljs-string\">&quot;outDir&quot;</span>: <span class=\"hljs-string\">&quot;./dist&quot;</span>,<br>    <span class=\"hljs-comment\">// 将代码合并为一个文件，所有全局作用域中的代码会合并到同一个文件里</span><br>    <span class=\"hljs-comment\">// &quot;outFile&quot;: &quot;./dist/test.js&quot;</span><br><br>    <span class=\"hljs-comment\">// 是否对js文件进行编译，默认值为false</span><br>    <span class=\"hljs-string\">&quot;allowJs&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否检查js代码符合语法规范，默认值为false</span><br>    <span class=\"hljs-string\">&quot;checkJs&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否在文件编译后移除注释</span><br>    <span class=\"hljs-string\">&quot;removeComments&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 是否生成编译后的文件</span><br>    <span class=\"hljs-string\">&quot;noEmit&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 代码存在错误时不生成编译后的文件</span><br>    <span class=\"hljs-string\">&quot;noEmitOnError&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 所有严格检查的总开关</span><br>    <span class=\"hljs-string\">&quot;strict&quot;</span>: <span class=\"hljs-literal\">false</span>,<br>    <span class=\"hljs-comment\">// 用来设置编译后的文件是否使用严格模式，默认为false</span><br>    <span class=\"hljs-string\">&quot;alwaysStrict&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 不允许隐式的any类型</span><br>    <span class=\"hljs-string\">&quot;noImplicitAny&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 不允许类型不明确的this</span><br>    <span class=\"hljs-string\">&quot;noImplicitThis&quot;</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-comment\">// 严格检查空值</span><br>    <span class=\"hljs-string\">&quot;strictNullChecks&quot;</span>: <span class=\"hljs-literal\">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n",
            "tags": [
                "TypeScript"
            ]
        }
    ]
}