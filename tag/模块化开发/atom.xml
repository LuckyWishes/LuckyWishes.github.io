<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>XGG • Posts by &#34;模块化开发&#34; tag</title>
    <link href="http://example.com" />
    <updated>2023-03-05T07:09:43.000Z</updated>
    <category term="uni-app" />
    <category term="Git" />
    <category term="浏览器" />
    <category term="HTML基础" />
    <category term="JavaScript" />
    <category term="React" />
    <category term="Vue" />
    <category term="Webpack" />
    <category term="Node" />
    <category term="TypeScript" />
    <category term="计算机网络" />
    <category term="数据结构" />
    <category term="操作系统" />
    <category term="计算机组成" />
    <category term="Linux" />
    <category term="模块化开发" />
    <entry>
        <id>http://example.com/2023/03/05/12001_%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
        <title>模块化开发</title>
        <link rel="alternate" href="http://example.com/2023/03/05/12001_%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈.&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;前期出现全局污染和依赖管理混乱等问题，可以使用匿名函数自执行方式形成独立块级作用域解决，目前可以使用模块化方案解决此类问题&lt;/p&gt;
&lt;h4 id=&#34;commonjs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commonjs&#34;&gt;#&lt;/a&gt; Common.js&lt;/h4&gt;
&lt;h6 id=&#34;场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#场景&#34;&gt;#&lt;/a&gt; 场景&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Node 使用 Common.js 在服务器端实现模块化&lt;/li&gt;
&lt;li&gt;Browserify 使用 Common.js 在浏览器实现&lt;/li&gt;
&lt;li&gt;webpack 打包工具对 Common.js 的支持和转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;使用和原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用和原理&#34;&gt;#&lt;/a&gt; 使用和原理&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;规范：
&lt;ul&gt;
&lt;li&gt;每一个 js 文件是单独的模块 (module)&lt;/li&gt;
&lt;li&gt;包含 exports、module.exports、require&lt;/li&gt;
&lt;li&gt;exports 和 module.exports 对模块内容进行导出，require 函数导入其他模块 (自定义模块、系统模块、第三方库模块)&lt;/li&gt;
&lt;li&gt;module：记录当前模块信息、require：引入模块的方法、exports：当前模块导出的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在编译过程中，common.js 对 js 代码进行包装，形成一个包装函数，我们编写的代码作为包装函数的执行上下文，使用的 require、exports、module 本质上是通过形参的方式传递到包装函数中&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;exports&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;,__filename,__dirname&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; sayName = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./hello.js&amp;#x27;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;say&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-title function_&#34;&gt;sayName&lt;/span&gt;(),&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;author&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;我不是外星人&amp;#x27;&lt;/span&gt;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在模块加载过程中，通过 &lt;code&gt;runInThisContext(可以理解为eval)&lt;/code&gt;  执行 &lt;code&gt;modulefunction&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;require文件加载流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#require文件加载流程&#34;&gt;#&lt;/a&gt; require 文件加载流程&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;接收的唯一参数作为一个标识符，Commonjs 下对不同的标识符处理流程不同，但都是找到对应的模块&lt;/li&gt;
&lt;li&gt;加载文件原则 (nodejs)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs&lt;/code&gt; 、 &lt;code&gt;http&lt;/code&gt; 、 &lt;code&gt;path&lt;/code&gt;  等标识符，会被作为 nodejs 的 &lt;code&gt;核心模块&lt;/code&gt; ，核心模块的优先级仅次于缓存加载，在 Node 源码编译中，已被编译成二进制代码，所以加载核心模块速度最快&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./&lt;/code&gt;  和 &lt;code&gt;../&lt;/code&gt;  作为相对路径的 &lt;code&gt;文件模块&lt;/code&gt; ， &lt;code&gt;/&lt;/code&gt;  作为绝对路径的 &lt;code&gt;文件模块&lt;/code&gt; ， &lt;code&gt;require()&lt;/code&gt;  方法会将路径转换成真实路径，并以真实路径作为索引，将编译后的结果缓存起来，第二次加载的时候会更快&lt;/li&gt;
&lt;li&gt;非路径形式也非核心模块的模块，将作为 &lt;code&gt;自定义模块&lt;/code&gt; ，查找会遵循原则：首先在当前目录下的 &lt;code&gt;node_modules&lt;/code&gt;  目录查找，若没有在父级目录的 &lt;code&gt;node_modules&lt;/code&gt;  查找，若没有在父级目录的父级目录的 &lt;code&gt;node_modules&lt;/code&gt;  中查找，沿着路径向上递归，直到根目录下的 &lt;code&gt;node_modules&lt;/code&gt;  目录，在查找过程中，会找 &lt;code&gt;package.json&lt;/code&gt;  中 &lt;code&gt;main&lt;/code&gt;  属性指向的文件，若没有 &lt;code&gt;package.json&lt;/code&gt; , 在 node 环境下会依次查找 &lt;code&gt;index.js&lt;/code&gt; 、 &lt;code&gt;index.json&lt;/code&gt; 、 &lt;code&gt;index.node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;require模块引入与处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#require模块引入与处理&#34;&gt;#&lt;/a&gt; require 模块引入与处理&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;CommonJS 模块同步加载并执行模块文件，在执行阶段分析模块依赖，采用 &lt;code&gt;深度优先遍历&lt;/code&gt; ，执行顺序是父 -&amp;gt; 子 -&amp;gt; 父&lt;/li&gt;
&lt;li&gt;require 加载原理
&lt;ul&gt;
&lt;li&gt;module：在 Node 中每一个 js 文件都是一个 &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;module&lt;/code&gt;  上保存了 &lt;code&gt;exports&lt;/code&gt;  等信息之外，还有一个 &lt;code&gt;loaded&lt;/code&gt;  表示该模块是否被加载，值为 &lt;code&gt;false&lt;/code&gt;  表示还没有加载，值为 &lt;code&gt;true&lt;/code&gt;  表示已经加载&lt;/li&gt;
&lt;li&gt;Module：如 nodejs，整个系统运行之后，会用 &lt;code&gt; Module&lt;/code&gt;  缓存每一个模块加载的信息&lt;/li&gt;
&lt;li&gt;源码理解：1. &lt;code&gt;require&lt;/code&gt;  会接收一个参数 —— 文件标识符，然后分析查找定位文件，分析过程我们上述已经讲到了，加下来会从 &lt;code&gt;Module&lt;/code&gt;  上查找有没有缓存，如果有缓存，那么直接返回缓存的内容。如果没有缓存，会创建一个 &lt;code&gt;module&lt;/code&gt;  对象，缓存到 &lt;code&gt;Module&lt;/code&gt;  上，然后执行文件，加载完文件，将 &lt;code&gt;loaded&lt;/code&gt;  属性设置为 &lt;code&gt;true &lt;/code&gt; , 然后返回 &lt;code&gt;module.exports&lt;/code&gt;  对象，完成模块加载流程。模块导出就是 &lt;code&gt;return&lt;/code&gt;  这个变量的其实跟 a = b 赋值一样， 基本类型导出的是值， 引用类型导出的是引用地址。 &lt;code&gt;exports&lt;/code&gt;  和 &lt;code&gt;module.exports&lt;/code&gt;  持有相同引用，因为最后导出的是 &lt;code&gt;module.exports&lt;/code&gt; , 所以对 &lt;code&gt;exports&lt;/code&gt;  进行赋值会导致 &lt;code&gt;exports&lt;/code&gt;  操作的不再是 &lt;code&gt;module.exports&lt;/code&gt;  的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// id 为路径标识符&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;id&lt;/span&gt;) &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 查找  Module 上有没有已经加载的 js  对象*/&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt;  cachedModule = &lt;span class=&#34;hljs-title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;_cache&lt;/span&gt;[id]&lt;br&gt; &lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 如果已经加载了那么直接取走缓存的 exports 对象  */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(cachedModule)&amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; cachedModule.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt;&lt;br&gt; &amp;#125;&lt;br&gt; &lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 创建当前模块的 module  */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt; = &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;exports&lt;/span&gt;: &amp;#123;&amp;#125; ,&lt;span class=&#34;hljs-attr&#34;&gt;loaded&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt; , ...&amp;#125;&lt;br&gt;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */&lt;/span&gt;  &lt;br&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;_cache&lt;/span&gt;[id] = &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 加载文件 */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runInThisContext&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;wrapper&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module.exports = &amp;quot;123&amp;quot;&amp;#x27;&lt;/span&gt;))(&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt;, &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;, &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;, __filename, __dirname)&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 加载完成 */&lt;/span&gt;/&lt;br&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;loaded&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt; &lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/* 返回值 */&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt;&lt;br&gt; &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;require 解决重复加载：首先加载之后的文件的 module 会被缓存到 Module 上，比如一个模块已经 require 引入了 a 模块，如果另外一个模块再次引用 a ，那么会直接读取缓存值 module ，所以无需再次执行模块&lt;/li&gt;
&lt;li&gt;require 动态加载：require 可以在任意的上下文，动态加载模块。require 本质上就是一个函数，那么函数可以在任意上下文中执行，来自由地加载其他模块的属性方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;exports和moduleexports&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#exports和moduleexports&#34;&gt;#&lt;/a&gt; exports 和 module.exports&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;exports 就是传入到当前模块内的一个对象，本质上就是 module.exports&lt;/li&gt;
&lt;li&gt;为什么 exports={} 直接赋值一个对象就不可以呢？解释如下所示：假设 wrap 就是 Commonjs 规范下的包装函数，我们的 js 代码就是包装函数内部的内容。当我们把  myExports 对象传进去，但是直接赋值  myExports = { name:‘我不是外星人’} 没有任何作用，相等于内部重新声明一份 myExports 而和外界的 myExports 断绝了关系。所以解释了为什么不能 exports={…}  直接赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wrap&lt;/span&gt; (myExports)&amp;#123;&lt;br&gt;    myExports=&amp;#123;&lt;br&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;我不是外星人&amp;#x27;&lt;/span&gt;&lt;br&gt;   &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; myExports = &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;alien&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;wrap&lt;/span&gt;(myExports)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(myExports)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;module.exports：可以单独导出一个对象、函数、类。 exports 和 module.exports 持有相同引用，在一个文件中，我们最好选择 exports 和 module.exports 两者之一，如果两者同时存在，很可能会造成覆盖的情况发生。&lt;/li&gt;
&lt;li&gt;如果我们不想在 &lt;code&gt;common.js&lt;/code&gt;  中导出对象，而是只导出一个类或者函数或者其他属性的情况，那么 module.exports 就更方便了，如上我们知道 exports 会被初始化成一个对象，也就是我们只能在对象上绑定属性，但是我们可以通过 module.exports 自定义导出对象外的其他类型元素。module.exports 当导出一些函数等非对象属性的时候，也有一些风险，就比如循环引用的情况下。对象会保留相同的内存地址，就算一些属性是后绑定的，也能间接通过异步形式访问到。但是如果 module.exports 为一个非对象其他属性类型，在循环引用的时候，就容易造成属性丢失的情况发生了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;es-module&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es-module&#34;&gt;#&lt;/a&gt; ES Module&lt;/h4&gt;
&lt;h6 id=&#34;导出和导入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导出和导入&#34;&gt;#&lt;/a&gt; 导出和导入&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;所有通过 export 导出的属性，在 import 中可以通过结构的方式，解构出来&lt;/li&gt;
&lt;li&gt;export 正常导出，import 导入，这种情况下 import {} 内部的变量名称，要与 export {} 完全匹配。&lt;/li&gt;
&lt;li&gt;默认导出 &lt;code&gt;export default&lt;/code&gt; , 默认导出内容可以是函数、属性方法、对象。对于引入默认导出的模块，import anyName from ‘module’， anyName 可以是自定义名称。&lt;/li&gt;
&lt;li&gt;混合导入｜导出&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// a.js   2中导出方式： export default 和 export &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; name = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;《React进阶实践指南》&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; author = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;我不是外星人&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;say&lt;/span&gt; ()&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello , world&amp;#x27;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// main.js   导入方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第一种&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; theSay , &amp;#123; name, author &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt;  bookAuthor &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./a.js&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;br&gt;    theSay,     &lt;span class=&#34;hljs-comment&#34;&gt;// ƒ say() &amp;#123;console.log(&amp;#x27;hello , world&amp;#x27;) &amp;#125;&lt;/span&gt;&lt;br&gt;    name,       &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;《React进阶实践指南》&amp;quot;&lt;/span&gt;&lt;br&gt;    bookAuthor  &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;我不是外星人&amp;quot;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第二种&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 导出的属性被合并到 mes 属性上， export 被导入到对应的属性上，export default 导出内容被绑定到 default 属性上。 theSay 也可以作为被 export default 导出属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; theSay, * &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; mes &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./a&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;br&gt;    theSay, &lt;span class=&#34;hljs-comment&#34;&gt;// ƒ say() &amp;#123; console.log(&amp;#x27;hello , world&amp;#x27;) &amp;#125;&lt;/span&gt;&lt;br&gt;    mes &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123; name:&amp;#x27;《React进阶实践指南》&amp;#x27; , author: &amp;quot;我不是外星人&amp;quot; ，default:  ƒ say() &amp;#123; console.log(&amp;#x27;hello , world&amp;#x27;) &amp;#125; &amp;#125;&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;重命名导入： &lt;code&gt;import &amp;#123;  name as bookName , say,  author as bookAuthor  &amp;#125; from &#39;module&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重定向导出&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第一种方式：重定向导出 module 中的所有导出属性， 但是不包括 module 内的 default 属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第二种方式：从 module 中导入 name ，author ，say 再以相同的属性名，导出。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 第三种方式：从 module 中导入 name ，重属名为 bookName 导出，从 module 中导入author ，重属名为 bookAuthor 导出，正常导出 say 。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; * &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 第一种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &amp;#123; name, author, ..., say &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 第二种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;export&lt;/span&gt; &amp;#123; name &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; bookName ,  author &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; bookAuthor , ..., say &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module&amp;#x27;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//第三种方式&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;无需导入模块，只运行模块。执行 module 不导出值 多次调用 module 只运行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module&amp;#x27;&lt;/span&gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;动态导入。import (‘module’) ，动态导入返回一个 Promise。为了支持这种方式，需要在 webpack 中做相应的配置处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; promise = &lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;module&amp;#x27;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#特性&#34;&gt;#&lt;/a&gt; 特性&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;静态导入导出的优势，实现了 &lt;code&gt;tree shaking&lt;/code&gt; , 可以实现 &lt;code&gt;import()&lt;/code&gt;  懒加载的方式实现代码分割。&lt;/li&gt;
&lt;li&gt;静态语法。引入和导出是静态的，import 会自动提升到代码的顶层。import、export 不能放在块级作用域或条件语句中。import 的导入名不能为字符串或在判断语句。&lt;/li&gt;
&lt;li&gt;执行特性。与 Common.js 不同的是 ，CommonJS 模块同步加载并执行模块文件，ES6 模块提前加载并执行模块文件，ES6 模块在预处理阶段分析模块依赖，在执行阶段执行模块，两个阶段都采用深度优先遍历，执行顺序是子 -&amp;gt; 父。&lt;/li&gt;
&lt;li&gt;导出绑定
&lt;ul&gt;
&lt;li&gt;不能修改 import 导入的属性，若直接修改会报错。&lt;/li&gt;
&lt;li&gt;属性绑定。对于 import 属性如下总结
&lt;ul&gt;
&lt;li&gt;使用 import 被导入的模块运行在严格模式下。&lt;/li&gt;
&lt;li&gt;使用 import 被导入的变量是只读的，可以理解默认为 const 装饰，无法被赋值&lt;/li&gt;
&lt;li&gt;使用 import 被导入的变量是与原变量绑定 / 引用的，可以理解为 import 导入的变量无论是否为基本类型都是引用传递。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;import动态引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#import动态引入&#34;&gt;#&lt;/a&gt; import () 动态引入&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;import () 返回一个 Promise 对象，返回的 Promise 的 then 成功回调中，可以获取模块的加载成功信息。import () 这种加载效果，可以很轻松的实现代码分割。避免一次性加载大量 js 文件，造成首次加载白屏时间过长的情况。&lt;/li&gt;
&lt;li&gt;动态加载。import () 动态加载一些内容，可以放在条件语句或者函数执行上下文中。&lt;/li&gt;
&lt;li&gt;懒加载。import () 可以实现懒加载。如路由懒加载等&lt;/li&gt;
&lt;li&gt;tree shaking 的实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;commonjs与es-module总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#commonjs与es-module总结&#34;&gt;#&lt;/a&gt; Commonjs 与 es module 总结&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Commonjs 的特性如下：
&lt;ul&gt;
&lt;li&gt;CommonJS 模块由 JS 运行时实现。&lt;/li&gt;
&lt;li&gt;CommonJs 是单个值导出，本质上导出的就是 exports 属性。&lt;/li&gt;
&lt;li&gt;CommonJS 是可以动态加载的，对每一个加载都存在缓存，可以有效的解决循环引用问题。&lt;/li&gt;
&lt;li&gt;CommonJS 模块同步加载并执行模块文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Es module 的特性如下：
&lt;ul&gt;
&lt;li&gt;ES6 Module 静态的，不能放在块级作用域内，代码发生在编译时。&lt;/li&gt;
&lt;li&gt;ES6 Module 的值是动态绑定的，可以通过导出方法修改，可以直接访问修改结果。&lt;/li&gt;
&lt;li&gt;ES6 Module 可以导出多个属性和方法，可以单个导入导出，混合导入导出。&lt;/li&gt;
&lt;li&gt;ES6 模块提前加载并执行模块文件，&lt;/li&gt;
&lt;li&gt;ES6 Module 导入模块在严格模式下。&lt;/li&gt;
&lt;li&gt;ES6 Module 的特性可以很容易实现 Tree Shaking 和 Code Splitting。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="模块化开发" />
        <updated>2023-03-05T07:09:43.000Z</updated>
    </entry>
</feed>
