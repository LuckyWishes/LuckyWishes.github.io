<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript执行上下文</title>
    <link href="/2022/11/23/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <url>/2022/11/23/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr /><h4 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念">#</a> 1. 概念</h4><ol><li>在函数执行的时，会创建一个内部对象，即称为执行上下文，同时定义了一个函数执行时的环境</li><li>在一个函数被调用的时，会创建一个活动记录，被称为执行上下文，在这个里面会包含函数调用栈、函数调用方式、传入参数等信息</li><li>每一个函数在被定义的时，会存在一个 <code>[scope]</code>  属性，该属性保存着作用域链</li></ol><h4 id="2-类型"><a class="markdownIt-Anchor" href="#2-类型">#</a> 2. 类型</h4><ol><li><h5 id="全局执行上下文"><a class="markdownIt-Anchor" href="#全局执行上下文">#</a> 全局执行上下文</h5><ol><li><p>只有一个，浏览器的全局对象就是 window 对象，this 指向这个全局对象，在执行全局代码前将 window 确定为全局执行上下文</p></li><li><p>对其全局数据进行处理</p></li><li><p>开始执行全局代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例子</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a2)<br><span class="hljs-title function_">a2</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br><span class="hljs-keyword">var</span> a1 = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a2</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a2&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><h5 id="函数执行上下文"><a class="markdownIt-Anchor" href="#函数执行上下文">#</a> 函数执行上下文</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a1</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a2)<br>  <span class="hljs-title function_">a3</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>)<br>  <span class="hljs-keyword">var</span> a2 = <span class="hljs-number">3</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">a3</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a3&quot;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-title function_">fn</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><ol><li>只有函数被调用时创建，每次调用都会创建一个新的对应的函数执行上下文对象</li><li>对局部数据进行预处理</li><li>开始执行函数体代码</li></ol></li><li><h5 id="eval函数执行上下文"><a class="markdownIt-Anchor" href="#eval函数执行上下文">#</a>  <code>Eval函数</code> 执行上下文</h5><ol><li>运行在该函数中的代码</li></ol></li></ol><p>概念：EC : 执行上下文、ECS : 执行上下文栈、VO ： 变量对象、AO ： 活动对象、scope chain : 作用域链</p><p><code>VO变量对象</code> ：创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中</p><p><code>AO活动对象</code> ：进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活</p><h3 id="2-执行上下文的具体过程"><a class="markdownIt-Anchor" href="#2-执行上下文的具体过程">#</a> 2. 执行上下文的具体过程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">i</span>) &#123;  <br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;hello&#x27;</span>;  <br>  <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">function</span> <span class="hljs-title function_">privateB</span>(<span class="hljs-params"></span>) &#123;&#125;;  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>) &#123;&#125;  <br>&#125;  <br><span class="hljs-title function_">foo</span>(<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><h4 id="1-创建阶段函数被调用但是还未执行函数中的代码"><a class="markdownIt-Anchor" href="#1-创建阶段函数被调用但是还未执行函数中的代码">#</a> 1. 创建阶段（函数被调用，但是还未执行函数中的代码）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建时函数体中相关代码（代码1）</span><br>fooExecutionContext = &#123;  <br>  <span class="hljs-attr">variableObject</span>: &#123;  <br>  <span class="hljs-attr">arguments</span>: &#123;  <br>      <span class="hljs-number">0</span>: <span class="hljs-number">22</span>,  <br>      <span class="hljs-attr">length</span>: <span class="hljs-number">1</span>  <br>    &#125;,  <br>    <span class="hljs-attr">i</span>: <span class="hljs-number">22</span>,  <br>    <span class="hljs-attr">c</span>: pointer to <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>),  <br>  <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>,  <br>  <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>  <br>&#125;,  <br>  <span class="hljs-attr">scopeChain</span>: &#123; ... &#125;,  <br>    <span class="hljs-attr">this</span>: &#123; ... &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><ol><li>创建变量对象 (VO)<ol><li>创建 arguments，检查当前上下文的参数，建立该对象下的属性和属性值</li><li>扫描上下文的函数申明<ol><li>每扫描到一个函数，就会在 VO 里面用函数名创建一个属性，为一个指针，指向该函数在内存中的地址</li><li>如果函数名在 VO 中已经存在，对应的属性值会被新的引用覆盖</li><li>即为 var（undefined）定义的全局变量为 window 属性、function（fun）声明全局函数为 window 方法、this 赋值为 widow</li></ol></li><li>扫描上下文的变量申明：<ol><li>每扫描到一个变量就会用变量名作为属性名，其值初始化为 undefined</li><li>如果该变量名在 VO 中已经存在，则直接跳过继续扫描</li></ol></li></ol></li><li>初始化作用域链</li><li>确定上下文中 this 的指向</li></ol><h4 id="2-代码执行阶段"><a class="markdownIt-Anchor" href="#2-代码执行阶段">#</a> 2. 代码执行阶段</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//执行时函数体中相关代码（代码2）</span><br>fooExecutionContext = &#123;  <br>  <span class="hljs-attr">variableObject</span>: &#123;  <br>    <span class="hljs-attr">arguments</span>: &#123;  <br>      <span class="hljs-number">0</span>: <span class="hljs-number">22</span>,  <br>      <span class="hljs-attr">length</span>: <span class="hljs-number">1</span>  <br>    &#125;,  <br>    <span class="hljs-attr">i</span>: <span class="hljs-number">22</span>,  <br>    <span class="hljs-attr">c</span>: pointer to <span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params"></span>),  <br>  <span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,  <br>  <span class="hljs-attr">b</span>: pointer to <span class="hljs-keyword">function</span> <span class="hljs-title function_">privateB</span>(<span class="hljs-params"></span>)  <br>&#125;,  <br>  <span class="hljs-attr">scopeChain</span>: &#123; ... &#125;,  <br>    <span class="hljs-attr">this</span>: &#123; ... &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><ol><li>执行函数体中的代码，给 VO 中的变量赋值</li></ol><h3 id="3-执行上下文栈execution-context-stack"><a class="markdownIt-Anchor" href="#3-执行上下文栈execution-context-stack">#</a> 3. 执行上下文栈 <code>Execution context stack</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//知识小练</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">5</span><br>  <span class="hljs-title function_">foo</span>(x + b)<br>&#125;<br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params">y</span>)&#123;<br>  <span class="hljs-keyword">var</span> c = <span class="hljs-number">5</span><br>  <span class="hljs-title function_">foo1</span>(a + c + y)<br>&#125;<br><span class="hljs-title function_">bar</span>(<span class="hljs-number">10</span>) <br><br></code></pre></td></tr></table></figure><h4 id="1-执行栈调用栈"><a class="markdownIt-Anchor" href="#1-执行栈调用栈">#</a> 1. 执行栈（调用栈）</h4><ol><li>具有 LIFO 结构（后进先出），用于存储在代码执行期间创建的上下文（函数的执行顺序和定义顺序没有关系，可以通过执行栈理解）</li><li></li></ol><h4 id="2-原理"><a class="markdownIt-Anchor" href="#2-原理">#</a> 2. 原理</h4><ol><li>每当执行 js 代码时，创建一个全局执行上下文并且 push 当前的执行上下文栈顶，此后每发生一次函数调用，搜索引擎会创建一个新的函数执行上下文，并且将其 push 当前执行栈的栈顶，当栈顶的函数执行完毕，执行栈中对应的执行上下文就会 pop，同时变量对象 <code>VO</code>  也会销毁，栈指针将会指向下一个执行上下文，直至应用关闭时将会销毁全局上下文</li></ol><p><img src="https://img-blog.csdnimg.cn/2020061514072717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2piajY1Njg4Mzl6,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//课前小练</span><br><span class="hljs-comment">//问题一</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">f</span>();<br>&#125;<br><span class="hljs-title function_">checkscope</span>();<br><br><span class="hljs-comment">//问题二</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;global scope&quot;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> scope = <span class="hljs-string">&quot;local scope&quot;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> scope;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><span class="hljs-title function_">checkscope</span>()();<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//经典面试题1</span><br>问题<span class="hljs-number">1</span>：依次输出？<br>问题<span class="hljs-number">2</span>：一共产生多少执行山下文对象？<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;gb:&#x27;</span>+i)<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span><br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">i</span>)&#123;<br>  <span class="hljs-keyword">if</span>(i == <span class="hljs-number">4</span>)&#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fb:&#x27;</span>+i)<br>  <span class="hljs-title function_">foo</span>(i + <span class="hljs-number">1</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fe:&#x27;</span>+i)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ge:&#x27;</span>+i)<br><br>输出：<br><span class="hljs-literal">undefined</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型 原型链 继承</title>
    <link href="/2022/11/19/JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <url>/2022/11/19/JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr /><h3 id="prototype"><a class="markdownIt-Anchor" href="#prototype">#</a> prototype</h3><blockquote><p><strong>原型的概念</strong></p><p>每一个 JavaScript 对象 (除了 <code>null</code>  外) 创建的时候，就会与之关联另一个对象，这个<strong>对象</strong>就是我们所说的<strong>原型</strong>，每一个对象都会从原型中 &quot;继承&quot; 属性。</p></blockquote><p>在 JavaScript 中，<strong>每个函数</strong>都有一个 <code>prototype</code>  属性，该属性指向函数的原型对象。</p><h3 id="__-proto-__"><a class="markdownIt-Anchor" href="#__-proto-__">#</a> __ proto __</h3><p><strong>每个对象</strong> (除了 <code>null</code>  外) 都会有的属性，叫做 <code>__proto__</code> ，这个属性会指向该对象的原型。</p><blockquote><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于  <code>Person.prototype</code>  中，实际上，它是来自于  <code>Object.prototype</code>  ，与其说是一个属性，不如说是一个  <code>getter/setter</code> ，当使用  <code>obj.__proto__</code>  时，可以理解成返回了  <code>Object.getPrototypeOf(obj)</code></p></blockquote><h3 id="constructor"><a class="markdownIt-Anchor" href="#constructor">#</a> constructor</h3><p>每个原型都有一个 <code>constructor</code> ，指向该关联的构造函数</p><blockquote><p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性，当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取</p></blockquote><h3 id="实例与原型"><a class="markdownIt-Anchor" href="#实例与原型">#</a> 实例与原型</h3><p>当读取实例的属性时，如果找不到，就通过隐式原型 ( <code>__proto__</code> ) 向上查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层，若最顶层也找不到，则返回 undefined。</p><h3 id="原型的原型"><a class="markdownIt-Anchor" href="#原型的原型">#</a> 原型的原型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Kevin&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>原型对象就是通过 Object 构造函数生成的。又因为实例的 <code>__proto__</code> 指向构造函数的 <code>prototype</code>  所以得到总的关系图：</p><p><img src="%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708152327825-11086376.png" alt="img"></p><h3 id="原型链"><a class="markdownIt-Anchor" href="#原型链">#</a> 原型链</h3><blockquote><p>每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。</p><p>​—— 摘自《javascript 高级程序设计》</p></blockquote><p>最后，由于 Object 的原型对象是 null，所以得出最终的图</p><p><img src="%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708153139577-2105652554.png" alt="img"></p><p><img src="%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/1691fc878b9beefa~tplv-t2oaga2asx-watermark.awebp" alt="img"></p><h3 id="继承"><a class="markdownIt-Anchor" href="#继承">#</a> 继承</h3><h5 id="原型链继承"><a class="markdownIt-Anchor" href="#原型链继承">#</a> 原型链继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-number">0</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">subProperty</span> = <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subProperty</span><br>&#125;<br><span class="hljs-comment">// 关键，创建SuperType的实例，让SubType.prototype指向这个实例</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(<span class="hljs-title class_">SuperType</span>)<br><span class="hljs-keyword">let</span> inst1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-keyword">let</span> inst2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inst2.<span class="hljs-title function_">getSuperValue</span>()) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h6 id="优点"><a class="markdownIt-Anchor" href="#优点">#</a> 优点：</h6><ul><li>父类方法可以复用</li></ul><h6 id="缺点"><a class="markdownIt-Anchor" href="#缺点">#</a> 缺点：</h6><ul><li>父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改</li><li>子类构建实例时不能向父类传递参数</li></ul><h5 id="构造函数继承"><a class="markdownIt-Anchor" href="#构造函数继承">#</a> 构造函数继承</h5><p>使用父类构造函数来增强子类<strong>实例</strong>，等同于复制父类的实例给子类 (不使用原型)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class="hljs-comment">// 构造函数继承</span><br><span class="hljs-comment">// 使得每个实例都会复制得到自己独有的一份属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 将父对象的构造函数绑定在子对象上</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> inst1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inst1)<br><br><span class="hljs-comment">// SubType &#123;color: Array(2)&#125;</span><br></code></pre></td></tr></table></figure><p>创建子类实例时调用 <code>SuperType</code>  构造函数，于是 <code>SubType</code>  的每个实例都会将 SuperType 中的属性复制一份，<strong>解决了原型链继承中多实例相互影响的问题</strong>。</p><h6 id="优点-2"><a class="markdownIt-Anchor" href="#优点-2">#</a> 优点：</h6><ul><li>父类的引用属性不会被共享</li><li>子类构建实例时可以向父类传递参数</li></ul><h6 id="缺点-2"><a class="markdownIt-Anchor" href="#缺点-2">#</a> 缺点：</h6><ul><li>只能继承父类的<strong>实例</strong>属性和方法，不能继承原型属性 / 方法</li><li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li></ul><h5 id="组合继承上面两种结合起来"><a class="markdownIt-Anchor" href="#组合继承上面两种结合起来">#</a> 组合继承（上面两种结合起来）</h5><p>组合上述两种方法，用原型链实现对<strong>原型</strong>属性的继承，用构造函数来实现<strong>实例</strong>属性的继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-comment">// 1、构造函数来复制父类的属性给SubType实例</span><br>  <span class="hljs-comment">// *** 第二次调用SuperType()</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-comment">// call() 允许为不同的对象分配和调用属于一个对象的函数/方法。</span><br>  <span class="hljs-comment">// call() 提供新的 this 值给当前调用的函数/方法。你可以使用 call 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span><br>&#125;<br><br><span class="hljs-comment">// 2、原型继承</span><br><span class="hljs-comment">// *** 第一次调用SuperType()</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-comment">// 手动挂上构造器，指向自己的构造函数 SubType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">SubType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span><br>&#125;<br><br><span class="hljs-keyword">let</span> inst1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&#x27;Asuna&#x27;</span>, <span class="hljs-number">20</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inst1&#x27;</span>, inst1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inst1.<span class="hljs-title function_">getName</span>(), inst1.<span class="hljs-title function_">getAge</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(inst1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">SubType</span>, inst1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">SuperType</span>)<br><br><br><span class="hljs-comment">// inst1 SubType &#123;name: &quot;Asuna&quot;, colors: Array(3), age: 20&#125;</span><br><span class="hljs-comment">// Asuna 20</span><br><span class="hljs-comment">// true true</span><br></code></pre></td></tr></table></figure><h6 id="优点-3"><a class="markdownIt-Anchor" href="#优点-3">#</a> 优点：</h6><ul><li>父类的方法可以被复用</li><li>父类的引用属性不会被共享</li><li>子类构建实例时可以向父类传递参数</li></ul><h6 id="缺点对照注释"><a class="markdownIt-Anchor" href="#缺点对照注释">#</a> 缺点（对照注释）：</h6><ul><li>第一次调用 <code>SuperType()</code> ：给 <code>SubType.prototype</code>  写入两个属性 name，color。</li><li>第二次调用 <code>SuperType()</code> ：给 <code>instance1</code>  写入两个属性 name，color。</li></ul><p>实例对象 <code>inst1</code>  上的两个属性就屏蔽了其原型对象 SubType.prototype 的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的父类实例的属性 / 方法。这种被覆盖的情况造成了性能上的浪费。</p><h5 id="原型式继承浅拷贝"><a class="markdownIt-Anchor" href="#原型式继承浅拷贝">#</a> 原型式继承 (浅拷贝)</h5><p><code>Object.create()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Nicholas&quot;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&quot;Shelby&quot;</span>, <span class="hljs-string">&quot;Court&quot;</span>, <span class="hljs-string">&quot;Van&quot;</span>]<br>&#125;;<br><br><span class="hljs-keyword">let</span> anotherPerson = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person);<br>anotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Greg&quot;</span>;<br>anotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Rob&quot;</span>);<br><br><span class="hljs-keyword">let</span> yetAnotherPerson = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person);<br>yetAnotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Linda&quot;</span>;<br>yetAnotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Barbie&quot;</span>);<br><br><span class="hljs-title function_">alert</span>(person.<span class="hljs-property">friends</span>);   <span class="hljs-comment">//&quot;Shelby,Court,Van,Rob,Barbie&quot;</span><br></code></pre></td></tr></table></figure><h6 id="优点-4"><a class="markdownIt-Anchor" href="#优点-4">#</a> 优点：</h6><ul><li>父类方法可以复用</li></ul><h6 id="缺点-3"><a class="markdownIt-Anchor" href="#缺点-3">#</a> 缺点：</h6><ul><li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能</li><li>子类构建实例时不能向父类传递参数</li></ul><h5 id="寄生式继承能附加一些方法"><a class="markdownIt-Anchor" href="#寄生式继承能附加一些方法">#</a> 寄生式继承（能附加一些方法）</h5><p>使用原型式继承获得一份目标对象的<strong>浅拷贝</strong>，然后增强了这个浅拷贝的能力。</p><p><strong>优缺点其实和原型式继承一样</strong>，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123; &#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = obj<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">original</span>) &#123;<br>  <span class="hljs-comment">// 通过调用函数创建一个新对象</span><br>  <span class="hljs-keyword">let</span> clone = <span class="hljs-title function_">object</span>(original)<br>  <span class="hljs-comment">//以某种方式来增强这个对象</span><br>  clone.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我有了getName方法: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> clone<br>&#125;<br><br><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Asuna&#x27;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;Kirito&#x27;</span>, <span class="hljs-string">&#x27;Yuuki&#x27;</span>, <span class="hljs-string">&#x27;Sinon&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">let</span> inst1 = <span class="hljs-title function_">createAnother</span>(person)<br><span class="hljs-keyword">let</span> inst2 = <span class="hljs-title function_">createAnother</span>(person)<br></code></pre></td></tr></table></figure><h6 id="优点-5"><a class="markdownIt-Anchor" href="#优点-5">#</a> 优点：</h6><ul><li>父类方法可以复用</li></ul><h6 id="缺点-4"><a class="markdownIt-Anchor" href="#缺点-4">#</a> 缺点：</h6><ul><li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能</li><li>子类构建实例时不能向父类传递参数</li></ul><h5 id="寄生组合继承最优方案"><a class="markdownIt-Anchor" href="#寄生组合继承最优方案">#</a> 寄生组合继承（最优方案）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) &#123;<br>  <span class="hljs-comment">// 修正子类原型对象指针，指向父类原型的一个副本 (用object()也可以) </span><br>  subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(superType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br>  <span class="hljs-comment">// 增强对象，弥补因重写原型而失去的默认的constructor属性</span><br>  subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = subType<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getColors</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>)<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getAge</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> inst1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;Asuna&quot;</span>, <span class="hljs-number">20</span>)<br><span class="hljs-keyword">let</span> inst2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&quot;Krito&quot;</span>, <span class="hljs-number">21</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inst1&#x27;</span>, inst1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inst2&#x27;</span>, inst2)<br></code></pre></td></tr></table></figure><h5 id="多继承"><a class="markdownIt-Anchor" href="#多继承">#</a> 多继承</h5><p>如果你希望能继承到多个对象，则可以使用混入的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyClass</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-title class_">SuperClass</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>     <span class="hljs-title class_">OtherSuperClass</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><br><span class="hljs-comment">// 继承一个类（就是寄生组合继承的套路）</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">SuperClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// 混合其它类，关键是这里的 assign() 方法</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-title class_">OtherSuperClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br><span class="hljs-comment">// 重新指定constructor</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">MyClass</span>;<br><br><span class="hljs-comment">// 在之类上附加方法</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myMethod</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// do a thing</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>Object.assign 会把  <code>OtherSuperClass</code>  原型上的函数拷贝到  <code>MyClass</code>  原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。Object.assign 是在 ES2015 引入的，且可用 polyfilled。要支持旧浏览器的话，可用使用 jQuery.extend () 或者_.assign ()。 ——[MDN] Object.create ()</p></blockquote><h5 id="es6-extends"><a class="markdownIt-Anchor" href="#es6-extends">#</a> ES6 extends</h5><blockquote><p>虽然 ES6 引入了关键字 class，但是底层仍然是基于原型的实现。class 只是语法糖，使得在 JavaScript 模拟类的代码更为简洁。</p><p>​——《JavaScript 忍者秘籍》</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  &#125;<br><br>  <span class="hljs-comment">// 原型方法</span><br>  <span class="hljs-comment">// 即 Person.prototype.getName = function() &#123; &#125;</span><br>  <span class="hljs-comment">// 下面可以简写为 getName() &#123;...&#125;</span><br>  getName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Person:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Gamer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Person</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span><br>    <span class="hljs-variable language_">super</span>(name)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> asuna = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gamer</span>(<span class="hljs-string">&#x27;Asuna&#x27;</span>, <span class="hljs-number">20</span>)<br>asuna.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// 成功访问到父类的方法</span><br></code></pre></td></tr></table></figure><p><strong> <code>super</code>  实现的原理</strong></p><p>就是将继承的那个父类对象在子类中调用，比如  <code>super.call(this)</code>  实现将父类中的属性 (父类的方法是通过原型链来继承，实例都可以共享这些方法) 在子类中声明。</p><h3 id="作用域和作用域链"><a class="markdownIt-Anchor" href="#作用域和作用域链">#</a> 作用域和作用域链</h3><h3 id="作用域的概念"><a class="markdownIt-Anchor" href="#作用域的概念">#</a> 作用域的概念</h3><p>字面意思就是起作用的范围。</p><h3 id="全局作用域"><a class="markdownIt-Anchor" href="#全局作用域">#</a> 全局作用域</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域</p><p>常见情况</p><ul><li>最外层函数 和在最外层函数外面定义的变量拥有全局作用域</li><li>所有末定义直接赋值的变量自动声明为拥有全局作用域</li><li>所有 window 对象的属性拥有全局作用域<ul><li>此处的 window 对象意味顶层对象，不同环境下有可能顶层对象不同</li></ul></li></ul><h3 id="局部作用域"><a class="markdownIt-Anchor" href="#局部作用域">#</a> 局部作用域</h3><p>块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：</p><ol><li>在一个函数内部</li><li>在一个代码块（由一对花括号包裹）内部</li></ol><h5 id="暂时性死区"><a class="markdownIt-Anchor" href="#暂时性死区">#</a> 暂时性死区</h5><ul><li><strong>var 的创建和初始化被提升，赋值不会被提升。</strong></li><li><strong>let 的创建被提升，初始化和赋值不会被提升。</strong></li><li><strong>function 的创建、初始化和赋值均会被提升。</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">7</span>;<br>&#125;<br><span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure><h5 id="函数作用域"><a class="markdownIt-Anchor" href="#函数作用域">#</a> 函数作用域</h5><p>指在函数内部生效。</p><h5 id="作用域链"><a class="markdownIt-Anchor" href="#作用域链">#</a> 作用域链</h5><p>当前作用域内找不到的变量会根据作用域链向上寻找，直到顶层对象 window 也没有就返回 undefined。</p><h3 id="作用域与执行上下文"><a class="markdownIt-Anchor" href="#作用域与执行上下文">#</a> 作用域与执行上下文</h3><p>JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样：</p><h5 id="解释阶段"><a class="markdownIt-Anchor" href="#解释阶段">#</a> 解释阶段：</h5><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><h5 id="执行阶段"><a class="markdownIt-Anchor" href="#执行阶段">#</a> 执行阶段：</h5><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><p>JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。</p><p>一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。<strong>同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值</strong></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量提升与函数提升</title>
    <link href="/2022/11/17/JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
    <url>/2022/11/17/JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr /><h3 id="1-提升"><a class="markdownIt-Anchor" href="#1-提升">#</a> 1 提升</h3><p>在 j s 代码执行前引擎会先进行预编译，预编 译期间会将变量声明与函数声明提升至其对应作用域的最顶端。</p><h3 id="2-变量提升"><a class="markdownIt-Anchor" href="#2-变量提升">#</a> 2 变量提升</h3><p>在 ES 6 出来之前，J S 并没有块级作用域这一说，只有全局作用域和局部作用域。变量提升指的是<strong>使用 var 声明的变量提升到他所在的作用域的最顶端</strong>。创建阶段，初始化阶段变量提升，赋值阶段没有提升，值为 undefined。</p><pre><code class="hljs">* 赋值逻辑不提升* 全局变量会被局部作用域中的同名变量覆盖</code></pre><p>let，con st 变量，在创建阶段被提升了，但初始化和赋值阶段都没有被提升，没法使用变量，都存在一个暂时性死区。</p><h3 id="3-函数提升"><a class="markdownIt-Anchor" href="#3-函数提升">#</a> 3 函数提升</h3><p>函数声明提升：是将函数名及函数体全部提升到其所在作用域的顶部。</p><p>函数创建有两个方式：</p><p>1，函数声明形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 声明式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> () &#123;<br>    <span class="hljs-comment">// to do...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2，函数字面量形式（即函数表达式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 函数字面量</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// to do...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种是方式：函数构造法：var a = new Fun ()，技术角度来讲也是一个字面量形式。</p><p>函数提升只针对具名函数，而对于赋值的匿名函数，并不会存在函数提升。</p><h3 id="4-变量提升与函数提升的优先级"><a class="markdownIt-Anchor" href="#4-变量提升与函数提升的优先级">#</a> 4 变量提升与函数提升的优先级</h3><p>函数提升优先级高于变量提升，且不会被同名变量声明覆盖，但是会被变量赋值后覆盖。</p><h3 id="5-为什么有变量提升"><a class="markdownIt-Anchor" href="#5-为什么有变量提升">#</a> 5 为什么有变量提升</h3><p>JavaScript 作为脚本语言，不同于编程语言的一点是没有编译过程，但是它需要脚本解释器边解析边执行，而脚本解释器在解释执行代码前会先扫描一遍，这个过程就是 “预解析” 过程。</p><p>J S 运行阶段包括预解析阶段和运行阶段。</p><p>预解析阶段：</p><p>​变量提升</p><p>​函数提升</p><p>执行阶段：</p><p>​创建一个执行上下文 (execution context)，函数压栈，生成 active object (活动对象)</p><p>​执行 / 解释上下文中的 function，为变量赋值</p><p>预解析需要<strong>注意</strong>如下几个问题：</p><ol><li>预编译首先是全局预编译，函数体未调用时是不进行预编译的。</li><li>只有 var 和 function 声明会被提升。</li><li>在所在的作用域会被提升，不会扩展到其他的作用域。</li><li>预编译后会顺序执行代码。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JavaScript进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Hooks</title>
    <link href="/2021/06/23/React/"/>
    <url>/2021/06/23/React/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr />]]></content>
    
    
    <categories>
      
      <category>React基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2021/05/11/Vue/"/>
    <url>/2021/05/11/Vue/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr />]]></content>
    
    
    <categories>
      
      <category>Vue基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2021/03/22/JavaScript/"/>
    <url>/2021/03/22/JavaScript/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr />]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2021/03/19/Git/"/>
    <url>/2021/03/19/Git/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr /><h3 id="1-全局配置git环境"><a class="markdownIt-Anchor" href="#1-全局配置git环境">#</a> 1、全局配置 git 环境；</h3><p>git config --global <a href="http://user.name">user.name</a> “用户名”<br>git config --global user.email “邮箱”<br> 基本命令：<br>mkdir 文件夹名；创建文件夹<br> cd 文件夹名；进入文件夹<br> ls；查看文件目录<br> ls -sh；查看全部文件目录包含隐藏目录</p><h3 id="2-初始化git仓库"><a class="markdownIt-Anchor" href="#2-初始化git仓库">#</a> 2、初始化 git 仓库；</h3><p>git init</p><h3 id="3-将本地工作区的文件添加到本地版本库的提交缓存中"><a class="markdownIt-Anchor" href="#3-将本地工作区的文件添加到本地版本库的提交缓存中">#</a> 3、将本地工作区的文件添加到本地版本库的提交缓存中；</h3><p>git add .</p><h3 id="4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id"><a class="markdownIt-Anchor" href="#4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id">#</a> 4、将本地版本库提交缓存 stage 中的文件提交到本地版本库 master 中；生成 40 位哈希值，作为 id，</h3><p>git commit -m “提交信息”</p><!-- 修改提交信息命令 ，编辑后command+x退出编辑界面--><p>git commit -amend</p><h3 id="5-查看历史提交日志加上prettyoneline选项简洁输出"><a class="markdownIt-Anchor" href="#5-查看历史提交日志加上prettyoneline选项简洁输出">#</a> 5、查看历史提交日志，加上–pretty=oneline 选项简洁输出；</h3><p>git log<br>HEAD-&gt;master: 指本次提交到 master 仓库</p><h3 id="6-回滚代码仓库"><a class="markdownIt-Anchor" href="#6-回滚代码仓库">#</a> 6、回滚代码仓库；</h3><p>git reset --hard</p><!-- 存在三种模式 -->???<p>–soft 、–mixed 以及–hard 是三个恢复等级<br>使用–soft 就仅仅将头指针恢复，已经 add 的暂存区以及工作空间的所有东西都不变。<br>如果使用–mixed，就将头恢复掉，已经 add 的暂存区也会丢失掉，工作空间的代码什么的是不变的。<br>如果使用–hard，那么一切就全都恢复了，头变，aad 的暂存区消失，代码什么的也恢复到以前状态<br> git reset --hard HEAD^<br>git reset --hard HEAD~3</p><h3 id="7-查看当前仓库状态"><a class="markdownIt-Anchor" href="#7-查看当前仓库状态">#</a> 7、查看当前仓库状态；</h3><p>git status<br> 英文对应：<br>A：未修改<br> AM：修改<br> Untracked：未提交<br> modified：新文件，但未提交</p><!-- 工作区与缓存区 --><p>工作区：当前目录<br>缓存区：使用 git add 命令提交的文件信息，位于.git 目录下 index 文件中<br> git add . 与 git add --all 区别<br>这个命令会将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区。<br>这个命令还会把删除的文件也提交进去<br>如你在本地删除了 min.c 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的 min.c 也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件，如果不想删除文件，可以使用 git add .，注意后面有一个 “.” 点的符号，这个命令跟 git add --all 一样，但是不会记录删除操作</p><h3 id="8-将文件撤销回到最近一次修改的状态"><a class="markdownIt-Anchor" href="#8-将文件撤销回到最近一次修改的状态">#</a> 8、将文件撤销回到最近一次修改的状态；</h3><p>git checkout – file 回到了之前修改的状态</p><h3 id="9-查看单个文件可回滚版本"><a class="markdownIt-Anchor" href="#9-查看单个文件可回滚版本">#</a> 9、查看单个文件可回滚版本；</h3><p>git log filename</p><h3 id="10-删除文件"><a class="markdownIt-Anchor" href="#10-删除文件">#</a> 10、删除文件；</h3><p>git rm 文件名</p><h3 id="11-查看提交历史"><a class="markdownIt-Anchor" href="#11-查看提交历史">#</a> 11、查看提交历史；</h3><p>git reflog<br>git 仓库组成：<br>Workspace：开发者工作区，也就是你当前写代码的目录，它一般保持的是最新仓库代码。<br>Index / Stage：缓存区，最早叫 Stage，现在新版本已经改成 index，位于.git 目录中，它用来存放临时动作，比如我们做了 git add 或者 git rm，都是把文件提交到缓存区，这是可以撤销的，然后在通过 git commit 将缓存区的内容提交到本地仓库<br> Repository：仓库区，是仓库代码，你所有的提交都在这里，git 会保存好每一个历史版本，存放在仓库区，它可以是服务端的也可以是本地的，因为在分布式中，任何人都可以是主仓库。<br>Remote：远程仓库，只能是别的电脑上的仓库，即服务器仓库。</p><h3 id="12-创建分支"><a class="markdownIt-Anchor" href="#12-创建分支">#</a> 12、创建分支；</h3><p>git checkout -b 分支名<br>等价于<br> git branch 分支名<br> git checkout 分支名</p><h3 id="13-查看当前分支"><a class="markdownIt-Anchor" href="#13-查看当前分支">#</a> 13、查看当前分支；</h3><p>git branch</p><h3 id="14-切换分支"><a class="markdownIt-Anchor" href="#14-切换分支">#</a> 14、切换分支；</h3><p>git checkout</p><h3 id="15-合并分支"><a class="markdownIt-Anchor" href="#15-合并分支">#</a> 15、合并分支；</h3><p>git merge 分支名</p><h3 id="16-查看当前所有分支"><a class="markdownIt-Anchor" href="#16-查看当前所有分支">#</a> 16、查看当前所有分支；</h3><p>git branch -a</p><h3 id="17-删除本地分支"><a class="markdownIt-Anchor" href="#17-删除本地分支">#</a> 17、删除本地分支；</h3><p>git branch -D 分支名</p><h3 id="18-删除远程分支"><a class="markdownIt-Anchor" href="#18-删除远程分支">#</a> 18、删除远程分支；</h3><p>git push origin --delete 分支名</p><h3 id="19-本地仓库与远程仓库关联"><a class="markdownIt-Anchor" href="#19-本地仓库与远程仓库关联">#</a> 19、本地仓库与远程仓库关联；</h3><p>git remote add origin 仓库地址</p><h3 id="20-推送到远程"><a class="markdownIt-Anchor" href="#20-推送到远程">#</a> 20、推送到远程；</h3><p>git push -u origin 分支仓库名</p><h3 id="20-查看本地分支"><a class="markdownIt-Anchor" href="#20-查看本地分支">#</a> 20、查看本地分支；</h3><p>git branch</p><h3 id="20-查看本地和远程仓库的所有分支"><a class="markdownIt-Anchor" href="#20-查看本地和远程仓库的所有分支">#</a> 20、查看本地和远程仓库的所有分支；</h3><p>git branch -a</p><h3 id="20-查看远程仓库的分支"><a class="markdownIt-Anchor" href="#20-查看远程仓库的分支">#</a> 20、查看远程仓库的分支</h3><p>git branch -r</p><h3 id="20-查看本地库已经关联的远程仓库"><a class="markdownIt-Anchor" href="#20-查看本地库已经关联的远程仓库">#</a> 20、查看本地库已经关联的远程仓库</h3><p>git remote -v</p>]]></content>
    
    
    <categories>
      
      <category>Git基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语义化标签了解</title>
    <link href="/2019/08/05/HTML/"/>
    <url>/2019/08/05/HTML/</url>
    
    <content type="html"><![CDATA[<p>🌸  <span style="font-size:bold;color:purple">Welcome to XGG &amp; blog!</span><br>🔭  <span style="font-size:bold;color:purple">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>📫  <span style="font-size:initial;color:purple">If you get any problems when looking blog,you can find the answer in <a href="https://juejin.cn/user/2784392994882045">稀土掘金</a> or you can ask me on <a href="https://github.com/LuckyWishes">GitHub</a>.</span></p><hr /><ul><li>概念： <code>合理正确的使用语义化标签来创建页面结构</code> ，即正确的标签做正确的事情</li><li>优点：<ul><li>无 CSS 样式编写时会呈现很好的内容效果</li><li>代码结构清晰，易于阅读，便于团队协作开发与维护，也有利于屏幕阅读器渲染页面</li><li>有利于搜索引擎优化 SEO，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li><li>提升用户体验，比如 title、alt 可以用于解释名词或者图片信息，label 标签灵活应用</li></ul></li><li>标签 (切片元素)：header、nav、main、article、section、aside、footer<ul><li><code>&lt;blockquote&gt;</code>  用来定义摘自另一个源的块引用，在该标签中的内容会被从常规文本中分离出来，默认会表现为左右两侧缩进的群本，缩近距离一般为 40 个像素 (即外边距 40px), 定义块引用，浏览器会在 blockquote 元素前后添加换行，并增加外边距，cite 属性标注引用的信息的来源文档或者相关信息的 URL</li><li><code>&lt;header&gt;</code>  定义页面的介绍展示区域，网站 logo、主导航、搜索框等</li><li><code>&lt;nav&gt;</code>  导航栏</li><li><code>&lt;main&gt;</code>  一个页面只能使用一次</li><li><code>&lt;article&gt;</code>  定义页面独立的内容，可以有自己的 header、footer、sections 等</li><li><code>&lt;section&gt;</code>  用于标记文档的各个部分，例如长表单文章的章节或主要部分</li><li><code>&lt;aside&gt;</code>  定义与主要内容相关的内容块，通常显示为侧边栏</li><li><code>&lt;footer&gt;</code>  定义文档的底部区域，通常包括文档作者、著作权信息等</li><li><code>&lt;figure&gt;</code>  标签规定独立的流内容 (图像、图表、照片、代码等), 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响</li><li><code>&lt;figcaption&gt;</code>  标签定义  <code>&lt;figure&gt;</code>  元素的标题，元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置</li><li><code>&lt;small&gt;</code>  为较不重要的内容定义小字体，如果被包围的字体已经是字体模型所支持的最小字号，那么  <code>&lt;small&gt;</code>  标签将不起任何作用</li><li><code>&lt;h1&gt;</code>  ~  <code>&lt;h6&gt;</code>  定义页面的标题，h1 具有最高等级，h6 最低</li><li><code>&lt;strong&gt;</code>  把文本定义为语气更强的强调的内容，以表示内容的重要性</li><li><code>&lt;em&gt;</code>  标记内容着重点（大量用于提升段落文本语义），通常呈现为斜体文字</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>ONE A DAY</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
