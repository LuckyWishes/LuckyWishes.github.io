{
    "version": "https://jsonfeed.org/version/1",
    "title": "XGG • All posts by \"react基础\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/04/08/5002_React/",
            "url": "http://example.com/2020/04/08/5002_React/",
            "title": "React",
            "date_published": "2020-04-08T11:47:56.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"组件通信\"><a class=\"markdownIt-Anchor\" href=\"#组件通信\">#</a> 组件通信</h5>\n<ol>\n<li>\n<p>父子组件通信</p>\n<ol>\n<li>\n<p>父组件传递子组件数据通信</p>\n<ol>\n<li>\n<p>父组件通过 <code>属性=值</code> 的形式来传递给子组件数据</p>\n</li>\n<li>\n<p>子组件通过 <code>props</code>  参数获取父组件传递过来的数据</p>\n</li>\n<li>\n<p>类组件之间传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">class Children extends Component&#123;<br>  // 构造方法，方式一<br>  // constructor(props)&#123;<br>  //   super();<br>  //   this.props = props;<br>  // &#125;     <br>  <br>  // 构造方法，方式二<br>  // constructor(props)&#123;<br>  //   super(props);<br>  // &#125;<br>  // 构造方法，方式三<br>  // 不写，子类的默认构造方法可以省略<br>  render()&#123;<br>    const &#123; name,age,height &#125; = this.props;<br>    return (<br>      &lt;div&gt;<br>        &lt;h2&gt;子组件显示数据:&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br>export default class App extends Component &#123;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;Children name=&quot;why&quot; age=&quot;20&quot; height=&quot;188&quot;&gt;&lt;/Children&gt; <br>        &lt;Children name=&quot;GXX&quot; age=&quot;22&quot; height=&quot;172&quot;&gt;&lt;/Children&gt; <br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>函数组件之间传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">function Children(props) &#123;<br>  const &#123; name,age,height &#125; = props;<br>  return (<br>    &lt;div&gt;<br>      &lt;h2&gt;App_函数组件&lt;/h2&gt;<br>      &lt;h2&gt;&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br>export default class App extends Component &#123;<br>  render() &#123;<br>    return (<br>      &lt;div&gt;<br>        &lt;Children name=&quot;why&quot; age=&quot;20&quot; height=&quot;188&quot;&gt;&lt;/Children&gt; <br>        &lt;Children name=&quot;GXX&quot; age=&quot;22&quot; height=&quot;172&quot;&gt;&lt;/Children&gt; <br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>组件参数类型验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs react\">import PropTypes from &#x27;prop-types&#x27;<br>function Children(props) &#123;<br>  const &#123; name,age,height,names&#125; = props;<br>  return (<br>    &lt;div&gt;<br>      &lt;h2&gt;App_函数组件&lt;/h2&gt;<br>      &lt;h2&gt;&#123;name+&quot; &quot;+age+&quot; &quot;+height&#125;&lt;/h2&gt;<br>      &lt;ul&gt;<br>        &#123;<br>          names.map((item,index)=&gt;&#123;<br>            return &lt;li&gt;&#123;item&#125;&lt;/li&gt;<br>          &#125;)<br>        &#125;<br>      &lt;/ul&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br>// 设置属性类型验证<br>Children.propsTypes = &#123;<br>  name:PropTypes.string.isRequired,<br>  age:PropTypes.number,<br>  height:PropTypes.number,<br>  names:PropTypes.array<br>&#125;<br>// 设置属性默认值<br>Children.defaultProps = &#123;<br>  name:&quot;XGG&quot;,<br>  age:12,//默认类型也会进行类型判断<br>  height:199,<br>  names:[&quot;123&quot;,&quot;456&quot;,&quot;789&quot;]<br>&#125;<br>// 补充：类组件的相关属性编写规范<br>class Children2 extends Component&#123;<br>  //es6中class fields写法，给类上添加属性，而非对象上<br>  static propsTypes =&#123;<br>  &#125;<br>  static defaultProps =&#123;<br>  &#125;<br>&#125;<br>Children2.propsTypes = &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>子组件传递父组件通信</p>\n<ol>\n<li>父组件给子组件传递一个回调函数，在子组件中调用这个函数即可</li>\n<li>子组件可以通过该回调函数向父组件传递参数</li>\n</ol>\n</li>\n<li>\n<p>模拟插槽样式</p>\n</li>\n</ol>\n</li>\n<li>\n<p>跨组件通信 (数据传递)</p>\n<ol>\n<li>按照层次依次传递： <code>Spread Attributes</code> ，可以使用<strong>属性展开符： <code>...</code> </strong>，但是此方案对于中间层会存在冗余操作</li>\n<li>使用 ReactAPI: <code>Context</code>\n<ol>\n<li><code>React.createContext</code> : 创建一个需要共享的对象，若某组件订阅 <code>Context</code>  时该组件会从距离自身最近的匹配 <code>Provider</code>  中读取到当前 <code>Context</code>  值， <code>defaultValue</code>  是组件在顶层查找过程中没有找到对应的 <code>Provider</code> , 就会使用默认值。</li>\n<li><code>context.Provider</code> : 在创建 <code>Context对象</code>  (context) 时会返回一个 <code>Provider React组件</code> ，它允许消费组件订阅 <code>Context</code>  变化， <code>Provider</code>  接收一个属性 <code>value</code>  属性传递给消费组件，一个 <code>Provider</code>  可以和多个消费组件有对应关系，多个 <code>Provider</code>  可以嵌套使用，里层会覆盖外层数据；当 <code>Provider</code>  的 <code>value</code>  值发生变化时，它内部所有的消费组件都会重新渲染</li>\n<li><code>contextType</code> : 挂载在 <code>class</code>  上的 <code>contextType</code>  属性会被重新赋值为一个由 <code>React.createContext</code>  创建的 <code>Context</code>  对象，这可以使用 <code>this.context</code>  来获取最近 <code>Context</code>  上的值；可以在任何生命周期中访问到，包括 <code>render</code>  函数</li>\n<li><code>Consumer</code> : React 组件可以订阅到 context 变化，可以在函数式组件中完成订阅 context，需要函数作为子元素，该函数接收当前的 context 值，返回一个 React 节点</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p><code>events</code> （全局事件传递）</p>\n<ol>\n<li><code>npm install events</code> : 安装</li>\n<li>常用 API\n<ol>\n<li><code>eventBus对象</code> ：创建 EventEmitter 对象</li>\n<li><code>eventBus.emit(&quot;事件名称&quot;,参数列表)</code> : 发出事件</li>\n<li><code>eventBus.addListener(&quot;事件名称&quot;,监听函数)</code> : 监听事件</li>\n<li><code>eventBus.removeListener(&quot;事件名称&quot;,监听函数)</code> : 移除事件</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "http://example.com/2020/04/06/5001_React/",
            "url": "http://example.com/2020/04/06/5001_React/",
            "title": "React",
            "date_published": "2020-04-06T00:20:45.000Z",
            "content_html": "<p>🌸  <span style=\"font-size:bold;color:purple\">Welcome to XGG &amp; blog!</span><br>\n🔭  <span style=\"font-size:bold;color:purple\">When you have eliminated the impossible,whatever remains,however improbable,must be the truth.</span><br>\n📫  <span style=\"font-size:initial;color:purple\">If you get any problems when looking blog,you can find the answer in <a href=\"https://juejin.cn/user/2784392994882045\">稀土掘金</a> or you can ask me on <a href=\"https://github.com/LuckyWishes\">GitHub</a>.</span></p>\n<hr />\n<h5 id=\"react选择jsx\"><a class=\"markdownIt-Anchor\" href=\"#react选择jsx\">#</a> React 选择 JSX</h5>\n<ol>\n<li>\n<p>jsx 是嵌入到 JavaScript 中的一种结构语法</p>\n</li>\n<li>\n<p>jsx 顶层只能有一个根元素，通常在 jsx 的外层包裹着一个小括号 ()</p>\n</li>\n<li>\n<p>如果是单标签必须以 <code>&lt;/&gt;</code>  结尾，否则报错</p>\n</li>\n<li>\n<p>注释的方式： <code>&#123;/*我是注释*/&#125;</code></p>\n</li>\n<li>\n<p><code>&#123;&#125;</code>  中是否显示</p>\n<ol>\n<li>\n<p>直接显示： <code>number</code> 、 <code>string</code> 、 <code>array</code></p>\n</li>\n<li>\n<p>不显示内容为空： <code>null</code> 、 <code>undefined</code> 、 <code>Boolean</code></p>\n<p>附加：若想让其显示的措施为：布尔类型直接使用 tostring 方法，另外两个使用 totring 包裹或者添加一个空字符串</p>\n</li>\n<li>\n<p>** <code>对象类型</code>  ** 不能作为 jsx 的子类，不能直接放在 <code>&#123;&#125;</code>  中显示</p>\n</li>\n<li>\n<p><code>&#123;&#125;</code>  嵌入表达式：运算表达式、三元运算符、执行一个函数</p>\n</li>\n</ol>\n</li>\n<li>\n<p>绑定属性</p>\n<ol>\n<li>绑定普通属性</li>\n<li>绑定 class 属性: <code>className</code> 、 <code>htmlFor</code></li>\n<li>绑定 style 属性: <code>style=&#123;&#123;&#125;&#125;</code></li>\n</ol>\n</li>\n<li>\n<p>绑定事件</p>\n<ol>\n<li>\n<p>关于 <code>this</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\">&#123;<span class=\"hljs-comment\">/*方式1.1：bind绑定this(显示绑定)*/</span>&#125;<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>)&#125;&gt;按钮&lt;/button&gt;<br>&#123;<span class=\"hljs-comment\">/*方式1.2：在constructor中统一绑定事件*/</span>&#125;<br><span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>  <span class=\"hljs-variable language_\">super</span>(props);<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>   <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&quot;&quot;</span><br>\t&#125;<br>   <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>&#125;<br>...<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>&#125;&gt;按钮&lt;/button&gt;<br>...<br>&#123;<span class=\"hljs-comment\">/*方式2：定义函数时，使用箭头函数，箭头函数中永远不绑定this，会向上即最近作用域寻找当前对象*/</span>&#125;<br>...<br>&lt;button onClick=&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">add</span>&#125;&gt;按钮&lt;/button&gt;<br>...<br>add = <span class=\"hljs-function\">()=&gt;</span>&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">counter</span>);<br>&#125;<br>&#123;<span class=\"hljs-comment\">/*方式3(推荐)：直接传入一个箭头函数，在箭头函数中调用需要执行的函数*/</span>&#125;<br>&lt;button onClick=&#123;<span class=\"hljs-function\">()=&gt;</span>&#123;<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">add</span>()&#125;&#125;&gt;按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>传递参数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">movies</span>:[<span class=\"hljs-string\">&quot;天下无敌&quot;</span>,<span class=\"hljs-string\">&quot;奇门遁甲&quot;</span>,<span class=\"hljs-string\">&quot;十面埋伏&quot;</span>,<span class=\"hljs-string\">&quot;您好，李焕英&quot;</span>]<br>    &#125;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">liClick</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">liClick</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>);<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;this.liClick&#125;</span>&gt;</span>按钮<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            this.state.movies.map((item,index,arr)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;(event)</span>=&gt;</span>&#123;this.liClick(item,index,event)&#125;&#125;&gt;&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>  <span class=\"hljs-title function_\">liClick</span>(<span class=\"hljs-params\">item,index,event</span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;点击按钮&quot;</span>,item,index);<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>条件渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">isLogin</span>:<span class=\"hljs-literal\">true</span><br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123;isLogin&#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span><br>    <span class=\"hljs-keyword\">let</span> welcome = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">let</span> btnText = <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">if</span> (isLogin) &#123;<br>      welcome = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>欢迎回来<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>      btnText = <span class=\"hljs-string\">&quot;退出&quot;</span><br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>      welcome = <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>请先登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br>      btnText = <span class=\"hljs-string\">&quot;登录&quot;</span><br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        &#123;welcome&#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">&#123;event</span>=&gt;</span>&#123;this.loginClick()&#125;&#125;&gt;&#123;isLogin?&quot;退出&quot;:&quot;登录&quot;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">hr</span>/&gt;</span>  </span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;isLogin?&quot;GXX&quot;:null&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        &#123;isLogin&amp;&amp;<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>GXX<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>&#125;</span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>  <span class=\"hljs-title function_\">loginClick</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setState</span>(&#123;<br>      <span class=\"hljs-attr\">isLogin</span>: !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">isLogin</span><br>    &#125;)<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>列表渲染</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">React.Component</span>&#123;<br>  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">props</span>)&#123;<br>    <span class=\"hljs-variable language_\">super</span>(props);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = &#123;<br>      <span class=\"hljs-attr\">names</span>:[<span class=\"hljs-string\">&quot;cba&quot;</span>,<span class=\"hljs-string\">&quot;nba&quot;</span>,<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;aaa&quot;</span>],<br>      <span class=\"hljs-attr\">nums</span>:[<span class=\"hljs-string\">&quot;12&quot;</span>,<span class=\"hljs-string\">&quot;44&quot;</span>,<span class=\"hljs-string\">&quot;66&quot;</span>,<span class=\"hljs-string\">&quot;33&quot;</span>,<span class=\"hljs-string\">&quot;88&quot;</span>]<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-keyword\">const</span> &#123; names,nums &#125; = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>;<br>    <span class=\"hljs-keyword\">return</span> (<br>      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>列表渲染1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            names.map((item,index,arr)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>数字列表渲染2(过滤)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            nums.filter((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return item&gt;=30;</span><br><span class=\"language-xml\">            &#125;).map((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>数字列表渲染3(截取)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">          &#123;</span><br><span class=\"language-xml\">            nums.slice(0,3).map((item)=&gt;&#123;</span><br><span class=\"language-xml\">              return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;item&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>  </span><br><span class=\"language-xml\">            &#125;)</span><br><span class=\"language-xml\">          &#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span><br><span class=\"language-xml\">      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br><span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>,<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>jsx</code>  的本质</p>\n<ol>\n<li><code>jsx</code>  是 <code>React.createElement(component,props,...children)</code>  函数的语法糖，将会转换成 <code>React.createElement()</code>  函数调用</li>\n<li><code>React.createElement()</code>  需要三个参数 ( <code>源码讲解</code> )\n<ol>\n<li>参数一：type\n<ol>\n<li>当前 ReactElement 的类型</li>\n<li>标签元素，字符串表示 <code>&quot;div&quot;</code></li>\n<li>组件元素，组件名称</li>\n</ol>\n</li>\n<li>参数二：config\n<ol>\n<li>所有的 jsx 属性都在 config 中以对象的属性和值的形式存储</li>\n</ol>\n</li>\n<li>参数三：children\n<ol>\n<li>存放在标签中的内容，以 children 数组的方式进行存储</li>\n</ol>\n</li>\n<li>遍历 <code>React.createElement函数中的参数</code> <br>\n<img src=\"../../all_photo/React.createElement%E5%87%BD%E6%95%B0_%E6%BA%90%E7%A0%81.png\" alt=\"image-20220608201741842\"></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>过程</p>\n<ol>\n<li><code>jsx-&gt;通过React.createElement函数-&gt;创建ReactElement(对象)-&gt;组成JavaScript的对象树(虚拟DOM)-&gt;通过ReactDOM.render函数-&gt;映射成浏览器中的真实DOM</code></li>\n<li><code>jsx-&gt;通过React.createElement函数-&gt;创建ReactElement(对象)-&gt;组成JavaScript的对象树(虚拟DOM)-&gt;通过ReactDOM.render函数-&gt;原生的控件(UIButton/Button)</code></li>\n</ol>\n</li>\n<li>\n<p>为什么使用虚拟 DOM</p>\n<ol>\n<li>很难跟踪状态发生的改变</li>\n<li>操作真实 DOM 性能较低\n<ol>\n<li>创建出来的对象较复杂</li>\n<li>DOM 操作会引起浏览器的回流和重绘，因此在开发中避免频繁 DOM 操作</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>虚拟 DOM</p>\n<ol>\n<li>由命令式转换为声明式编程</li>\n<li>UI 以虚拟的方式保存在内存中，并且是 JavaScript 对象</li>\n<li>可以使用 <code>ReactDOM.render()</code>  让虚拟 DOM 和真实 DOM 同步起来，这个过程叫作协调</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "React"
            ]
        }
    ]
}