<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>XGG&amp;Blog • Posts by &#34;javascript进阶&#34; category</title>
        <link>http://example.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Thu, 23 Jun 2022 22:12:56 +0800</pubDate>
        <lastBuildDate>Thu, 23 Jun 2022 22:12:56 +0800</lastBuildDate>
        <category>uni-app</category>
        <category>Git</category>
        <category>浏览器</category>
        <category>HTML基础</category>
        <category>JavaScript</category>
        <category>React</category>
        <category>Vue</category>
        <category>Webpack</category>
        <category>Node</category>
        <category>TypeScript</category>
        <category>计算机网络</category>
        <category>数据结构</category>
        <category>操作系统</category>
        <category>计算机组成</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid>
            <title>JavaScript执行上下文</title>
            <link>http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link>
            <category>JavaScript</category>
            <pubDate>Thu, 23 Jun 2022 22:12:56 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;1-概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-概念&#34;&gt;#&lt;/a&gt; 1. 概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在函数执行的时，会创建一个内部对象，即称为执行上下文，同时定义了一个函数执行时的环境&lt;/li&gt;
&lt;li&gt;在一个函数被调用的时，会创建一个活动记录，被称为执行上下文，在这个里面会包含函数调用栈、函数调用方式、传入参数等信息&lt;/li&gt;
&lt;li&gt;每一个函数在被定义的时，会存在一个 &lt;code&gt;[scope]&lt;/code&gt;  属性，该属性保存着作用域链&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-类型&#34;&gt;#&lt;/a&gt; 2. 类型&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;全局执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局执行上下文&#34;&gt;#&lt;/a&gt; 全局执行上下文&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;只有一个，浏览器的全局对象就是 window 对象，this 指向这个全局对象，在执行全局代码前将 window 确定为全局执行上下文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对其全局数据进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始执行全局代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a2)&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;a2&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a1 = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a2&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a2&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;函数执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数执行上下文&#34;&gt;#&lt;/a&gt; 函数执行上下文&lt;/h5&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;a1&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a1)&lt;br&gt;	&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a2)&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;a3&lt;/span&gt;()&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;arguments&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a2 = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a3&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a3&amp;quot;&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;只有函数被调用时创建，每次调用都会创建一个新的对应的函数执行上下文对象&lt;/li&gt;
&lt;li&gt;对局部数据进行预处理&lt;/li&gt;
&lt;li&gt;开始执行函数体代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;eval函数执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#eval函数执行上下文&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Eval函数&lt;/code&gt; 执行上下文&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;运行在该函数中的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;概念：EC : 执行上下文、ECS : 执行上下文栈、VO ： 变量对象、AO ： 活动对象、scope chain : 作用域链&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VO变量对象&lt;/code&gt; ：创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AO活动对象&lt;/code&gt; ：进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活&lt;/p&gt;
&lt;h3 id=&#34;2-执行上下文的具体过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-执行上下文的具体过程&#34;&gt;#&lt;/a&gt; 2. 执行上下文的具体过程&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;) &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;privateB&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-创建阶段函数被调用但是还未执行函数中的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建阶段函数被调用但是还未执行函数中的代码&#34;&gt;#&lt;/a&gt; 1. 创建阶段（函数被调用，但是还未执行函数中的代码）&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建时函数体中相关代码（代码1）&lt;/span&gt;&lt;br&gt;fooExecutionContext = &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;variableObject&lt;/span&gt;: &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;arguments&lt;/span&gt;: &amp;#123;  &lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;length&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;c&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;),  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;  &lt;br&gt;	&amp;#125;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;scopeChain&lt;/span&gt;: &amp;#123; ... &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;this&lt;/span&gt;: &amp;#123; ... &amp;#125;  &lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;创建变量对象 (VO)
&lt;ol&gt;
&lt;li&gt;创建 arguments，检查当前上下文的参数，建立该对象下的属性和属性值&lt;/li&gt;
&lt;li&gt;扫描上下文的函数申明
&lt;ol&gt;
&lt;li&gt;每扫描到一个函数，就会在 VO 里面用函数名创建一个属性，为一个指针，指向该函数在内存中的地址&lt;/li&gt;
&lt;li&gt;如果函数名在 VO 中已经存在，对应的属性值会被新的引用覆盖&lt;/li&gt;
&lt;li&gt;即为 var（undefined）定义的全局变量为 window 属性、function（fun）声明全局函数为 window 方法、this 赋值为 widow&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;扫描上下文的变量申明：
&lt;ol&gt;
&lt;li&gt;每扫描到一个变量就会用变量名作为属性名，其值初始化为 undefined&lt;/li&gt;
&lt;li&gt;如果该变量名在 VO 中已经存在，则直接跳过继续扫描&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;初始化作用域链&lt;/li&gt;
&lt;li&gt;确定上下文中 this 的指向&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-代码执行阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-代码执行阶段&#34;&gt;#&lt;/a&gt; 2. 代码执行阶段&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//执行时函数体中相关代码（代码2）&lt;/span&gt;&lt;br&gt;fooExecutionContext = &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;variableObject&lt;/span&gt;: &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;arguments&lt;/span&gt;: &amp;#123;  &lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;length&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;c&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;),  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;privateB&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)  &lt;br&gt;	&amp;#125;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;scopeChain&lt;/span&gt;: &amp;#123; ... &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;this&lt;/span&gt;: &amp;#123; ... &amp;#125;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;执行函数体中的代码，给 VO 中的变量赋值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-执行上下文栈execution-context-stack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-执行上下文栈execution-context-stack&#34;&gt;#&lt;/a&gt; 3. 执行上下文栈 &lt;code&gt;Execution context stack&lt;/code&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//知识小练&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(x + b)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;y&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo1&lt;/span&gt;(a + c + y)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;) &lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-执行栈调用栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-执行栈调用栈&#34;&gt;#&lt;/a&gt; 1. 执行栈（调用栈）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;具有 LIFO 结构（后进先出），用于存储在代码执行期间创建的上下文（函数的执行顺序和定义顺序没有关系，可以通过执行栈理解）&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-原理&#34;&gt;#&lt;/a&gt; 2. 原理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;每当执行 js 代码时，创建一个全局执行上下文并且 push 当前的执行上下文栈顶，此后每发生一次函数调用，搜索引擎会创建一个新的函数执行上下文，并且将其 push 当前执行栈的栈顶，当栈顶的函数执行完毕，执行栈中对应的执行上下文就会 pop，同时变量对象 &lt;code&gt;VO&lt;/code&gt;  也会销毁，栈指针将会指向下一个执行上下文，直至应用关闭时将会销毁全局上下文&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2020061514072717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2piajY1Njg4Mzl6,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//课前小练&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//问题一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;global scope&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;local scope&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; scope;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//问题二&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;global scope&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;local scope&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; scope;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;()();&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//经典面试题1&lt;/span&gt;&lt;br&gt;问题&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;：依次输出？&lt;br&gt;问题&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;：一共产生多少执行山下文对象？&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;gb:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(i == &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;fb:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;fe:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ge:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&lt;br&gt;输出：&lt;br&gt;&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</guid>
            <title>原型 原型链 继承</title>
            <link>http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</link>
            <category>JavaScript</category>
            <pubDate>Sun, 19 Jun 2022 22:12:03 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;prototype&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#prototype&#34;&gt;#&lt;/a&gt; prototype&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原型的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个 JavaScript 对象 (除了 &lt;code&gt;null&lt;/code&gt;  外) 创建的时候，就会与之关联另一个对象，这个&lt;strong&gt;对象&lt;/strong&gt;就是我们所说的&lt;strong&gt;原型&lt;/strong&gt;，每一个对象都会从原型中 &amp;quot;继承&amp;quot; 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 JavaScript 中，&lt;strong&gt;每个函数&lt;/strong&gt;都有一个 &lt;code&gt;prototype&lt;/code&gt;  属性，该属性指向函数的原型对象。&lt;/p&gt;
&lt;h3 id=&#34;__-proto-__&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__-proto-__&#34;&gt;#&lt;/a&gt; __ proto __&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;每个对象&lt;/strong&gt; (除了 &lt;code&gt;null&lt;/code&gt;  外) 都会有的属性，叫做 &lt;code&gt;__proto__&lt;/code&gt; ，这个属性会指向该对象的原型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于  &lt;code&gt;Person.prototype&lt;/code&gt;  中，实际上，它是来自于  &lt;code&gt;Object.prototype&lt;/code&gt;  ，与其说是一个属性，不如说是一个  &lt;code&gt;getter/setter&lt;/code&gt; ，当使用  &lt;code&gt;obj.__proto__&lt;/code&gt;  时，可以理解成返回了  &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;constructor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#constructor&#34;&gt;#&lt;/a&gt; constructor&lt;/h3&gt;
&lt;p&gt;每个原型都有一个 &lt;code&gt;constructor&lt;/code&gt; ，指向该关联的构造函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当获取 person.constructor 时，其实 person 中并没有 constructor 属性，当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;实例与原型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例与原型&#34;&gt;#&lt;/a&gt; 实例与原型&lt;/h3&gt;
&lt;p&gt;当读取实例的属性时，如果找不到，就通过隐式原型 ( &lt;code&gt;__proto__&lt;/code&gt; ) 向上查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层，若最顶层也找不到，则返回 undefined。&lt;/p&gt;
&lt;h3 id=&#34;原型的原型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型的原型&#34;&gt;#&lt;/a&gt; 原型的原型&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;();&lt;br&gt;obj.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Kevin&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(obj.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型对象就是通过 Object 构造函数生成的。又因为实例的 &lt;code&gt;__proto__&lt;/code&gt; 指向构造函数的 &lt;code&gt;prototype&lt;/code&gt;  所以得到总的关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708152327825-11086376.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;原型链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型链&#34;&gt;#&lt;/a&gt; 原型链&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。&lt;/p&gt;
&lt;p&gt;​																													—— 摘自《javascript 高级程序设计》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，由于 Object 的原型对象是 null，所以得出最终的图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708153139577-2105652554.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/1691fc878b9beefa~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h3&gt;
&lt;h5 id=&#34;原型链继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型链继承&#34;&gt;#&lt;/a&gt; 原型链继承&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getSuperValue&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;subProperty&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getSubValue&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;subProperty&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 关键，创建SuperType的实例，让SubType.prototype指向这个实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;dir&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst2.&lt;span class=&#34;hljs-title function_&#34;&gt;getSuperValue&lt;/span&gt;()) &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;构造函数继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造函数继承&#34;&gt;#&lt;/a&gt; 构造函数继承&lt;/h5&gt;
&lt;p&gt;使用父类构造函数来增强子类&lt;strong&gt;实例&lt;/strong&gt;，等同于复制父类的实例给子类 (不使用原型)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;color&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 构造函数继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使得每个实例都会复制得到自己独有的一份属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 将父对象的构造函数绑定在子对象上&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;()&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// SubType &amp;#123;color: Array(2)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建子类实例时调用 &lt;code&gt;SuperType&lt;/code&gt;  构造函数，于是 &lt;code&gt;SubType&lt;/code&gt;  的每个实例都会将 SuperType 中的属性复制一份，&lt;strong&gt;解决了原型链继承中多实例相互影响的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h6 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的引用属性不会被共享&lt;/li&gt;
&lt;li&gt;子类构建实例时可以向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;只能继承父类的&lt;strong&gt;实例&lt;/strong&gt;属性和方法，不能继承原型属性 / 方法&lt;/li&gt;
&lt;li&gt;无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;组合继承上面两种结合起来&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组合继承上面两种结合起来&#34;&gt;#&lt;/a&gt; 组合继承（上面两种结合起来）&lt;/h5&gt;
&lt;p&gt;组合上述两种方法，用原型链实现对&lt;strong&gt;原型&lt;/strong&gt;属性的继承，用构造函数来实现&lt;strong&gt;实例&lt;/strong&gt;属性的继承&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getName&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 1、构造函数来复制父类的属性给SubType实例&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// *** 第二次调用SuperType()&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, name)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// call() 允许为不同的对象分配和调用属于一个对象的函数/方法。&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// call() 提供新的 this 值给当前调用的函数/方法。你可以使用 call 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2、原型继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// *** 第一次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 手动挂上构造器，指向自己的构造函数 SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst1&amp;#x27;&lt;/span&gt;, inst1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1.&lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;(), inst1.&lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;())&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1 &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;, inst1 &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// inst1 SubType &amp;#123;name: &amp;quot;Asuna&amp;quot;, colors: Array(3), age: 20&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Asuna 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// true true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-3&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的方法可以被复用&lt;/li&gt;
&lt;li&gt;父类的引用属性不会被共享&lt;/li&gt;
&lt;li&gt;子类构建实例时可以向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点对照注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点对照注释&#34;&gt;#&lt;/a&gt; 缺点（对照注释）：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;第一次调用 &lt;code&gt;SuperType()&lt;/code&gt; ：给 &lt;code&gt;SubType.prototype&lt;/code&gt;  写入两个属性 name，color。&lt;/li&gt;
&lt;li&gt;第二次调用 &lt;code&gt;SuperType()&lt;/code&gt; ：给 &lt;code&gt;instance1&lt;/code&gt;  写入两个属性 name，color。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例对象 &lt;code&gt;inst1&lt;/code&gt;  上的两个属性就屏蔽了其原型对象 SubType.prototype 的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的父类实例的属性 / 方法。这种被覆盖的情况造成了性能上的浪费。&lt;/p&gt;
&lt;h5 id=&#34;原型式继承浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型式继承浅拷贝&#34;&gt;#&lt;/a&gt; 原型式继承 (浅拷贝)&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; person = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Nicholas&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;friends&lt;/span&gt;: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Shelby&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Court&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Van&amp;quot;&lt;/span&gt;]&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; anotherPerson = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(person);&lt;br&gt;anotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Greg&amp;quot;&lt;/span&gt;;&lt;br&gt;anotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; yetAnotherPerson = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(person);&lt;br&gt;yetAnotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Linda&amp;quot;&lt;/span&gt;;&lt;br&gt;yetAnotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Barbie&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;alert&lt;/span&gt;(person.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//&amp;quot;Shelby,Court,Van,Rob,Barbie&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-4&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-3&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;寄生式继承能附加一些方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄生式继承能附加一些方法&#34;&gt;#&lt;/a&gt; 寄生式继承（能附加一些方法）&lt;/h5&gt;
&lt;p&gt;使用原型式继承获得一份目标对象的&lt;strong&gt;浅拷贝&lt;/strong&gt;，然后增强了这个浅拷贝的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优缺点其实和原型式继承一样&lt;/strong&gt;，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;obj&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;F&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123; &amp;#125;&lt;br&gt;  F.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = obj&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;F&lt;/span&gt;()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;original&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 通过调用函数创建一个新对象&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; clone = &lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(original)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//以某种方式来增强这个对象&lt;/span&gt;&lt;br&gt;  clone.&lt;span class=&#34;hljs-property&#34;&gt;getName&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;我有了getName方法: &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; clone&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; person = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;friends&lt;/span&gt;: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Kirito&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Yuuki&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Sinon&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(person)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(person)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-5&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-4&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;寄生组合继承最优方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄生组合继承最优方案&#34;&gt;#&lt;/a&gt; 寄生组合继承（最优方案）&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;subType, superType&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 修正子类原型对象指针，指向父类原型的一个副本 (用object()也可以) &lt;/span&gt;&lt;br&gt;  subType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(superType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 增强对象，弥补因重写原型而失去的默认的constructor属性&lt;/span&gt;&lt;br&gt;  subType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = subType&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getColors&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, name)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asuna&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Krito&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst1&amp;#x27;&lt;/span&gt;, inst1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst2&amp;#x27;&lt;/span&gt;, inst2)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;多继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多继承&#34;&gt;#&lt;/a&gt; 多继承&lt;/h5&gt;
&lt;p&gt;如果你希望能继承到多个对象，则可以使用混入的方式。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-title class_&#34;&gt;SuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;     &lt;span class=&#34;hljs-title class_&#34;&gt;OtherSuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 继承一个类（就是寄生组合继承的套路）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 混合其它类，关键是这里的 assign() 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;OtherSuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 重新指定constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在之类上附加方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;myMethod&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// do a thing&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.assign 会把  &lt;code&gt;OtherSuperClass&lt;/code&gt;  原型上的函数拷贝到  &lt;code&gt;MyClass&lt;/code&gt;  原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。Object.assign 是在 ES2015 引入的，且可用 polyfilled。要支持旧浏览器的话，可用使用 jQuery.extend () 或者_.assign ()。 ——[MDN] Object.create ()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;es6-extends&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es6-extends&#34;&gt;#&lt;/a&gt; ES6 extends&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 ES6 引入了关键字 class，但是底层仍然是基于原型的实现。class 只是语法糖，使得在 JavaScript 模拟类的代码更为简洁。&lt;/p&gt;
&lt;p&gt;​																							——《JavaScript 忍者秘籍》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 原型方法&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 即 Person.prototype.getName = function() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 下面可以简写为 getName() &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;  getName = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Person:&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Gamer&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Person&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(name)&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; asuna = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Gamer&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;asuna.&lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;() &lt;span class=&#34;hljs-comment&#34;&gt;// 成功访问到父类的方法&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;super&lt;/code&gt;  实现的原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是将继承的那个父类对象在子类中调用，比如  &lt;code&gt;super.call(this)&lt;/code&gt;  实现将父类中的属性 (父类的方法是通过原型链来继承，实例都可以共享这些方法) 在子类中声明。&lt;/p&gt;
&lt;h3 id=&#34;作用域和作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域和作用域链&#34;&gt;#&lt;/a&gt; 作用域和作用域链&lt;/h3&gt;
&lt;h3 id=&#34;作用域的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域的概念&#34;&gt;#&lt;/a&gt; 作用域的概念&lt;/h3&gt;
&lt;p&gt;字面意思就是起作用的范围。&lt;/p&gt;
&lt;h3 id=&#34;全局作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局作用域&#34;&gt;#&lt;/a&gt; 全局作用域&lt;/h3&gt;
&lt;p&gt;在代码中任何地方都能访问到的对象拥有全局作用域&lt;/p&gt;
&lt;p&gt;常见情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最外层函数 和在最外层函数外面定义的变量拥有全局作用域&lt;/li&gt;
&lt;li&gt;所有末定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
&lt;li&gt;所有 window 对象的属性拥有全局作用域
&lt;ul&gt;
&lt;li&gt;此处的 window 对象意味顶层对象，不同环境下有可能顶层对象不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局部作用域&#34;&gt;#&lt;/a&gt; 局部作用域&lt;/h3&gt;
&lt;p&gt;块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个函数内部&lt;/li&gt;
&lt;li&gt;在一个代码块（由一对花括号包裹）内部&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;暂时性死区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#暂时性死区&#34;&gt;#&lt;/a&gt; 暂时性死区&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;var 的创建和初始化被提升，赋值不会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;let 的创建被提升，初始化和赋值不会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;function 的创建、初始化和赋值均会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;函数作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数作用域&#34;&gt;#&lt;/a&gt; 函数作用域&lt;/h5&gt;
&lt;p&gt;指在函数内部生效。&lt;/p&gt;
&lt;h5 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h5&gt;
&lt;p&gt;当前作用域内找不到的变量会根据作用域链向上寻找，直到顶层对象 window 也没有就返回 undefined。&lt;/p&gt;
&lt;h3 id=&#34;作用域与执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域与执行上下文&#34;&gt;#&lt;/a&gt; 作用域与执行上下文&lt;/h3&gt;
&lt;p&gt;JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样：&lt;/p&gt;
&lt;h5 id=&#34;解释阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解释阶段&#34;&gt;#&lt;/a&gt; 解释阶段：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;词法分析&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;作用域规则确定&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;执行阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行阶段&#34;&gt;#&lt;/a&gt; 执行阶段：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;创建执行上下文&lt;/li&gt;
&lt;li&gt;执行函数代码&lt;/li&gt;
&lt;li&gt;垃圾回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。&lt;/p&gt;
&lt;p&gt;一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。&lt;strong&gt;同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/</guid>
            <title>变量提升与函数提升</title>
            <link>http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/</link>
            <category>JavaScript</category>
            <pubDate>Fri, 17 Jun 2022 15:43:53 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1-提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-提升&#34;&gt;#&lt;/a&gt; 1 提升&lt;/h3&gt;
&lt;p&gt;在 j s 代码执行前引擎会先进行预编译，预编 译期间会将变量声明与函数声明提升至其对应作用域的最顶端。&lt;/p&gt;
&lt;h3 id=&#34;2-变量提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-变量提升&#34;&gt;#&lt;/a&gt; 2 变量提升&lt;/h3&gt;
&lt;p&gt;在 ES 6 出来之前，J S 并没有块级作用域这一说，只有全局作用域和局部作用域。变量提升指的是&lt;strong&gt;使用 var 声明的变量提升到他所在的作用域的最顶端&lt;/strong&gt;。创建阶段，初始化阶段变量提升，赋值阶段没有提升，值为 undefined。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;* 赋值逻辑不提升
* 全局变量会被局部作用域中的同名变量覆盖
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;let，con st 变量，在创建阶段被提升了，但初始化和赋值阶段都没有被提升，没法使用变量，都存在一个暂时性死区。&lt;/p&gt;
&lt;h3 id=&#34;3-函数提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-函数提升&#34;&gt;#&lt;/a&gt; 3 函数提升&lt;/h3&gt;
&lt;p&gt;函数声明提升：是将函数名及函数体全部提升到其所在作用域的顶部。&lt;/p&gt;
&lt;p&gt;函数创建有两个方式：&lt;/p&gt;
&lt;p&gt;1，函数声明形式&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 声明式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt; () &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// to do...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2，函数字面量形式（即函数表达式）&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数字面量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// to do...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一种是方式：函数构造法：var a = new Fun ()，技术角度来讲也是一个字面量形式。&lt;/p&gt;
&lt;p&gt;函数提升只针对具名函数，而对于赋值的匿名函数，并不会存在函数提升。&lt;/p&gt;
&lt;h3 id=&#34;4-变量提升与函数提升的优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-变量提升与函数提升的优先级&#34;&gt;#&lt;/a&gt; 4 变量提升与函数提升的优先级&lt;/h3&gt;
&lt;p&gt;函数提升优先级高于变量提升，且不会被同名变量声明覆盖，但是会被变量赋值后覆盖。&lt;/p&gt;
&lt;h3 id=&#34;5-为什么有变量提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-为什么有变量提升&#34;&gt;#&lt;/a&gt; 5 为什么有变量提升&lt;/h3&gt;
&lt;p&gt;JavaScript 作为脚本语言，不同于编程语言的一点是没有编译过程，但是它需要脚本解释器边解析边执行，而脚本解释器在解释执行代码前会先扫描一遍，这个过程就是 “预解析” 过程。&lt;/p&gt;
&lt;p&gt;J S 运行阶段包括预解析阶段和运行阶段。&lt;/p&gt;
&lt;p&gt;预解析阶段：&lt;/p&gt;
&lt;p&gt;​	变量提升&lt;/p&gt;
&lt;p&gt;​	函数提升&lt;/p&gt;
&lt;p&gt;执行阶段：&lt;/p&gt;
&lt;p&gt;​	创建一个执行上下文 (execution context)，函数压栈，生成 active object (活动对象)&lt;/p&gt;
&lt;p&gt;​	执行 / 解释上下文中的 function，为变量赋值&lt;/p&gt;
&lt;p&gt;预解析需要&lt;strong&gt;注意&lt;/strong&gt;如下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预编译首先是全局预编译，函数体未调用时是不进行预编译的。&lt;/li&gt;
&lt;li&gt;只有 var 和 function 声明会被提升。&lt;/li&gt;
&lt;li&gt;在所在的作用域会被提升，不会扩展到其他的作用域。&lt;/li&gt;
&lt;li&gt;预编译后会顺序执行代码。&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
    </channel>
</rss>
