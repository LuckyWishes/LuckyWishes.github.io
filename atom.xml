<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>XGG&amp;Blog</title>
    <link href="http://example.com" />
    <updated>2023-02-16T10:23:20.000Z</updated>
    <category term="uni-app" />
    <category term="Git" />
    <category term="浏览器" />
    <category term="HTML基础" />
    <category term="JavaScript" />
    <category term="React" />
    <category term="Vue" />
    <category term="Webpack" />
    <category term="Node" />
    <category term="TypeScript" />
    <category term="计算机网络" />
    <category term="数据结构" />
    <category term="操作系统" />
    <category term="计算机组成" />
    <category term="Linux" />
    <entry>
        <id>http://example.com/2023/02/16/E001_Linux/</id>
        <title>Linux</title>
        <link rel="alternate" href="http://example.com/2023/02/16/E001_Linux/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈。&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;linux常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux常用命令&#34;&gt;#&lt;/a&gt; Linux 常用命令&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;ls：列出当前目录下的文件和目录&lt;/li&gt;
&lt;li&gt;cd：切换目录&lt;/li&gt;
&lt;li&gt;clear：清除终端内容&lt;/li&gt;
&lt;li&gt;pwd：显示当前所在的目录的完整路径&lt;/li&gt;
&lt;li&gt;mkdir：新建一个目录&lt;/li&gt;
&lt;li&gt;touch：新建一个空文件&lt;/li&gt;
&lt;li&gt;cat：输出文件的内容到控制台&lt;/li&gt;
&lt;li&gt;cp：复制文件或目录&lt;/li&gt;
&lt;li&gt;mv：移动文件或目录&lt;/li&gt;
&lt;li&gt;rm：删除文件或目录&lt;/li&gt;
&lt;li&gt;tar：打包或解压缩文件&lt;/li&gt;
&lt;li&gt;ps：查看当前正在运行的进程&lt;/li&gt;
&lt;li&gt;top：实时查看系统资源占用情况&lt;/li&gt;
&lt;li&gt;grep：在文件中查找匹配的字符串&lt;/li&gt;
&lt;li&gt;find：查找文件&lt;/li&gt;
&lt;li&gt;wget：下载文件&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Linux" />
        <updated>2023-02-16T10:23:20.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</id>
        <title>JavaScript执行上下文</title>
        <link rel="alternate" href="http://example.com/2022/06/23/4004_JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;1-概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-概念&#34;&gt;#&lt;/a&gt; 1. 概念&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;在函数执行的时，会创建一个内部对象，即称为执行上下文，同时定义了一个函数执行时的环境&lt;/li&gt;
&lt;li&gt;在一个函数被调用的时，会创建一个活动记录，被称为执行上下文，在这个里面会包含函数调用栈、函数调用方式、传入参数等信息&lt;/li&gt;
&lt;li&gt;每一个函数在被定义的时，会存在一个 &lt;code&gt;[scope]&lt;/code&gt;  属性，该属性保存着作用域链&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-类型&#34;&gt;#&lt;/a&gt; 2. 类型&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h5 id=&#34;全局执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局执行上下文&#34;&gt;#&lt;/a&gt; 全局执行上下文&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;只有一个，浏览器的全局对象就是 window 对象，this 指向这个全局对象，在执行全局代码前将 window 确定为全局执行上下文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对其全局数据进行处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开始执行全局代码&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a2)&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;a2&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a1 = &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a2&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a2&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;函数执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数执行上下文&#34;&gt;#&lt;/a&gt; 函数执行上下文&lt;/h5&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//例子&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;a1&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a1)&lt;br&gt;	&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a2)&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;a3&lt;/span&gt;()&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;arguments&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a2 = &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;a3&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a3&amp;quot;&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;只有函数被调用时创建，每次调用都会创建一个新的对应的函数执行上下文对象&lt;/li&gt;
&lt;li&gt;对局部数据进行预处理&lt;/li&gt;
&lt;li&gt;开始执行函数体代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&#34;eval函数执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#eval函数执行上下文&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Eval函数&lt;/code&gt; 执行上下文&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;运行在该函数中的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;概念：EC : 执行上下文、ECS : 执行上下文栈、VO ： 变量对象、AO ： 活动对象、scope chain : 作用域链&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VO变量对象&lt;/code&gt; ：创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AO活动对象&lt;/code&gt; ：进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活&lt;/p&gt;
&lt;h3 id=&#34;2-执行上下文的具体过程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-执行上下文的具体过程&#34;&gt;#&lt;/a&gt; 2. 执行上下文的具体过程&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;) &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;privateB&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;;  &lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&amp;#125;  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-创建阶段函数被调用但是还未执行函数中的代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-创建阶段函数被调用但是还未执行函数中的代码&#34;&gt;#&lt;/a&gt; 1. 创建阶段（函数被调用，但是还未执行函数中的代码）&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建时函数体中相关代码（代码1）&lt;/span&gt;&lt;br&gt;fooExecutionContext = &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;variableObject&lt;/span&gt;: &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;arguments&lt;/span&gt;: &amp;#123;  &lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;length&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;c&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;),  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;  &lt;br&gt;	&amp;#125;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;scopeChain&lt;/span&gt;: &amp;#123; ... &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;this&lt;/span&gt;: &amp;#123; ... &amp;#125;  &lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;创建变量对象 (VO)
&lt;ol&gt;
&lt;li&gt;创建 arguments，检查当前上下文的参数，建立该对象下的属性和属性值&lt;/li&gt;
&lt;li&gt;扫描上下文的函数申明
&lt;ol&gt;
&lt;li&gt;每扫描到一个函数，就会在 VO 里面用函数名创建一个属性，为一个指针，指向该函数在内存中的地址&lt;/li&gt;
&lt;li&gt;如果函数名在 VO 中已经存在，对应的属性值会被新的引用覆盖&lt;/li&gt;
&lt;li&gt;即为 var（undefined）定义的全局变量为 window 属性、function（fun）声明全局函数为 window 方法、this 赋值为 widow&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;扫描上下文的变量申明：
&lt;ol&gt;
&lt;li&gt;每扫描到一个变量就会用变量名作为属性名，其值初始化为 undefined&lt;/li&gt;
&lt;li&gt;如果该变量名在 VO 中已经存在，则直接跳过继续扫描&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;初始化作用域链&lt;/li&gt;
&lt;li&gt;确定上下文中 this 的指向&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-代码执行阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-代码执行阶段&#34;&gt;#&lt;/a&gt; 2. 代码执行阶段&lt;/h4&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//执行时函数体中相关代码（代码2）&lt;/span&gt;&lt;br&gt;fooExecutionContext = &amp;#123;  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;variableObject&lt;/span&gt;: &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;arguments&lt;/span&gt;: &amp;#123;  &lt;br&gt;      &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;length&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;i&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;c&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;c&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;),  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;: pointer to &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;privateB&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)  &lt;br&gt;	&amp;#125;,  &lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;scopeChain&lt;/span&gt;: &amp;#123; ... &amp;#125;,  &lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;this&lt;/span&gt;: &amp;#123; ... &amp;#125;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;执行函数体中的代码，给 VO 中的变量赋值&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3-执行上下文栈execution-context-stack&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-执行上下文栈execution-context-stack&#34;&gt;#&lt;/a&gt; 3. 执行上下文栈 &lt;code&gt;Execution context stack&lt;/code&gt;&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//知识小练&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; b = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(x + b)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;y&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; c = &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo1&lt;/span&gt;(a + c + y)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;) &lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;1-执行栈调用栈&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-执行栈调用栈&#34;&gt;#&lt;/a&gt; 1. 执行栈（调用栈）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;具有 LIFO 结构（后进先出），用于存储在代码执行期间创建的上下文（函数的执行顺序和定义顺序没有关系，可以通过执行栈理解）&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-原理&#34;&gt;#&lt;/a&gt; 2. 原理&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;每当执行 js 代码时，创建一个全局执行上下文并且 push 当前的执行上下文栈顶，此后每发生一次函数调用，搜索引擎会创建一个新的函数执行上下文，并且将其 push 当前执行栈的栈顶，当栈顶的函数执行完毕，执行栈中对应的执行上下文就会 pop，同时变量对象 &lt;code&gt;VO&lt;/code&gt;  也会销毁，栈指针将会指向下一个执行上下文，直至应用关闭时将会销毁全局上下文&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2020061514072717.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2piajY1Njg4Mzl6,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//课前小练&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//问题一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;global scope&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;local scope&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; scope;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//问题二&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;global scope&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; scope = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;local scope&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;f&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; scope;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;checkscope&lt;/span&gt;()();&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//经典面试题1&lt;/span&gt;&lt;br&gt;问题&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;：依次输出？&lt;br&gt;问题&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;：一共产生多少执行山下文对象？&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;gb:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;i&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(i == &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;fb:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(i + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;fe:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ge:&amp;#x27;&lt;/span&gt;+i)&lt;br&gt;&lt;br&gt;输出：&lt;br&gt;&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="JavaScript" />
        <updated>2022-06-23T14:12:56.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</id>
        <title>原型 原型链 继承</title>
        <link rel="alternate" href="http://example.com/2022/06/19/4003_JavaScript%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;prototype&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#prototype&#34;&gt;#&lt;/a&gt; prototype&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原型的概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一个 JavaScript 对象 (除了 &lt;code&gt;null&lt;/code&gt;  外) 创建的时候，就会与之关联另一个对象，这个&lt;strong&gt;对象&lt;/strong&gt;就是我们所说的&lt;strong&gt;原型&lt;/strong&gt;，每一个对象都会从原型中 &amp;quot;继承&amp;quot; 属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 JavaScript 中，&lt;strong&gt;每个函数&lt;/strong&gt;都有一个 &lt;code&gt;prototype&lt;/code&gt;  属性，该属性指向函数的原型对象。&lt;/p&gt;
&lt;h3 id=&#34;__-proto-__&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__-proto-__&#34;&gt;#&lt;/a&gt; __ proto __&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;每个对象&lt;/strong&gt; (除了 &lt;code&gt;null&lt;/code&gt;  外) 都会有的属性，叫做 &lt;code&gt;__proto__&lt;/code&gt; ，这个属性会指向该对象的原型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于  &lt;code&gt;Person.prototype&lt;/code&gt;  中，实际上，它是来自于  &lt;code&gt;Object.prototype&lt;/code&gt;  ，与其说是一个属性，不如说是一个  &lt;code&gt;getter/setter&lt;/code&gt; ，当使用  &lt;code&gt;obj.__proto__&lt;/code&gt;  时，可以理解成返回了  &lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;constructor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#constructor&#34;&gt;#&lt;/a&gt; constructor&lt;/h3&gt;
&lt;p&gt;每个原型都有一个 &lt;code&gt;constructor&lt;/code&gt; ，指向该关联的构造函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当获取 person.constructor 时，其实 person 中并没有 constructor 属性，当不能读取到 constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;实例与原型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实例与原型&#34;&gt;#&lt;/a&gt; 实例与原型&lt;/h3&gt;
&lt;p&gt;当读取实例的属性时，如果找不到，就通过隐式原型 ( &lt;code&gt;__proto__&lt;/code&gt; ) 向上查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层，若最顶层也找不到，则返回 undefined。&lt;/p&gt;
&lt;h3 id=&#34;原型的原型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型的原型&#34;&gt;#&lt;/a&gt; 原型的原型&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//原型也是一个对象，既然是对象，我们就可以用最原始的方式创建它&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;();&lt;br&gt;obj.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Kevin&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(obj.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原型对象就是通过 Object 构造函数生成的。又因为实例的 &lt;code&gt;__proto__&lt;/code&gt; 指向构造函数的 &lt;code&gt;prototype&lt;/code&gt;  所以得到总的关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708152327825-11086376.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;原型链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型链&#34;&gt;#&lt;/a&gt; 原型链&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么假如我们让原型对象等于另一个类型的实例，结果会怎样？显然，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立。如此层层递进，就构成了实例与原型的链条。这就是所谓的原型链的基本概念。&lt;/p&gt;
&lt;p&gt;​																													—— 摘自《javascript 高级程序设计》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后，由于 Object 的原型对象是 null，所以得出最终的图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/850375-20190708153139577-2105652554.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E3%80%81%E7%BB%A7%E6%89%BF.assets/1691fc878b9beefa~tplv-t2oaga2asx-watermark.awebp&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h3&gt;
&lt;h5 id=&#34;原型链继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型链继承&#34;&gt;#&lt;/a&gt; 原型链继承&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getSuperValue&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;subProperty&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getSubValue&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;subProperty&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 关键，创建SuperType的实例，让SubType.prototype指向这个实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;dir&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst2.&lt;span class=&#34;hljs-title function_&#34;&gt;getSuperValue&lt;/span&gt;()) &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的引用属性会被所有子类实例共享，多个实例对引用类型的操作会被篡改&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;构造函数继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造函数继承&#34;&gt;#&lt;/a&gt; 构造函数继承&lt;/h5&gt;
&lt;p&gt;使用父类构造函数来增强子类&lt;strong&gt;实例&lt;/strong&gt;，等同于复制父类的实例给子类 (不使用原型)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;color&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 构造函数继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使得每个实例都会复制得到自己独有的一份属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 将父对象的构造函数绑定在子对象上&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;()&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// SubType &amp;#123;color: Array(2)&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建子类实例时调用 &lt;code&gt;SuperType&lt;/code&gt;  构造函数，于是 &lt;code&gt;SubType&lt;/code&gt;  的每个实例都会将 SuperType 中的属性复制一份，&lt;strong&gt;解决了原型链继承中多实例相互影响的问题&lt;/strong&gt;。&lt;/p&gt;
&lt;h6 id=&#34;优点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-2&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的引用属性不会被共享&lt;/li&gt;
&lt;li&gt;子类构建实例时可以向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;只能继承父类的&lt;strong&gt;实例&lt;/strong&gt;属性和方法，不能继承原型属性 / 方法&lt;/li&gt;
&lt;li&gt;无法实现复用，每个子类都有父类实例函数的副本，影响性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;组合继承上面两种结合起来&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组合继承上面两种结合起来&#34;&gt;#&lt;/a&gt; 组合继承（上面两种结合起来）&lt;/h5&gt;
&lt;p&gt;组合上述两种方法，用原型链实现对&lt;strong&gt;原型&lt;/strong&gt;属性的继承，用构造函数来实现&lt;strong&gt;实例&lt;/strong&gt;属性的继承&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getName&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 1、构造函数来复制父类的属性给SubType实例&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// *** 第二次调用SuperType()&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, name)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// call() 允许为不同的对象分配和调用属于一个对象的函数/方法。&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// call() 提供新的 this 值给当前调用的函数/方法。你可以使用 call 来实现继承：写一个方法，然后让另外一个新的对象来继承它（而不是在新对象中再写一次这个方法）。&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2、原型继承&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// *** 第一次调用SuperType()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 手动挂上构造器，指向自己的构造函数 SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst1&amp;#x27;&lt;/span&gt;, inst1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1.&lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;(), inst1.&lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;())&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(inst1 &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;, inst1 &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// inst1 SubType &amp;#123;name: &amp;quot;Asuna&amp;quot;, colors: Array(3), age: 20&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Asuna 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// true true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-3&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类的方法可以被复用&lt;/li&gt;
&lt;li&gt;父类的引用属性不会被共享&lt;/li&gt;
&lt;li&gt;子类构建实例时可以向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点对照注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点对照注释&#34;&gt;#&lt;/a&gt; 缺点（对照注释）：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;第一次调用 &lt;code&gt;SuperType()&lt;/code&gt; ：给 &lt;code&gt;SubType.prototype&lt;/code&gt;  写入两个属性 name，color。&lt;/li&gt;
&lt;li&gt;第二次调用 &lt;code&gt;SuperType()&lt;/code&gt; ：给 &lt;code&gt;instance1&lt;/code&gt;  写入两个属性 name，color。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例对象 &lt;code&gt;inst1&lt;/code&gt;  上的两个属性就屏蔽了其原型对象 SubType.prototype 的两个同名属性。所以，组合模式的缺点就是在使用子类创建实例对象时，其原型中会存在两份相同的父类实例的属性 / 方法。这种被覆盖的情况造成了性能上的浪费。&lt;/p&gt;
&lt;h5 id=&#34;原型式继承浅拷贝&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型式继承浅拷贝&#34;&gt;#&lt;/a&gt; 原型式继承 (浅拷贝)&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Object.create()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; person = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Nicholas&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;friends&lt;/span&gt;: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Shelby&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Court&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Van&amp;quot;&lt;/span&gt;]&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; anotherPerson = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(person);&lt;br&gt;anotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Greg&amp;quot;&lt;/span&gt;;&lt;br&gt;anotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Rob&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; yetAnotherPerson = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(person);&lt;br&gt;yetAnotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Linda&amp;quot;&lt;/span&gt;;&lt;br&gt;yetAnotherPerson.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;push&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Barbie&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;alert&lt;/span&gt;(person.&lt;span class=&#34;hljs-property&#34;&gt;friends&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//&amp;quot;Shelby,Court,Van,Rob,Barbie&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-4&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-3&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;寄生式继承能附加一些方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄生式继承能附加一些方法&#34;&gt;#&lt;/a&gt; 寄生式继承（能附加一些方法）&lt;/h5&gt;
&lt;p&gt;使用原型式继承获得一份目标对象的&lt;strong&gt;浅拷贝&lt;/strong&gt;，然后增强了这个浅拷贝的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优缺点其实和原型式继承一样&lt;/strong&gt;，寄生式继承说白了就是能在拷贝来的对象上加点方法，也就是所谓增强能力。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;obj&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;F&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123; &amp;#125;&lt;br&gt;  F.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = obj&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;F&lt;/span&gt;()&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;original&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 通过调用函数创建一个新对象&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; clone = &lt;span class=&#34;hljs-title function_&#34;&gt;object&lt;/span&gt;(original)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//以某种方式来增强这个对象&lt;/span&gt;&lt;br&gt;  clone.&lt;span class=&#34;hljs-property&#34;&gt;getName&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;我有了getName方法: &amp;#x27;&lt;/span&gt; + &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; clone&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; person = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;friends&lt;/span&gt;: [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Kirito&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Yuuki&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Sinon&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(person)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-title function_&#34;&gt;createAnother&lt;/span&gt;(person)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;优点-5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点-5&#34;&gt;#&lt;/a&gt; 优点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;父类方法可以复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;缺点-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-4&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;原型链继承多个实例的引用类型属性指向相同，存在篡改的可能&lt;/li&gt;
&lt;li&gt;子类构建实例时不能向父类传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;寄生组合继承最优方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄生组合继承最优方案&#34;&gt;#&lt;/a&gt; 寄生组合继承（最优方案）&lt;/h5&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;subType, superType&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 修正子类原型对象指针，指向父类原型的一个副本 (用object()也可以) &lt;/span&gt;&lt;br&gt;  subType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(superType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;)&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 增强对象，弥补因重写原型而失去的默认的constructor属性&lt;/span&gt;&lt;br&gt;  subType.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = subType&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SuperType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt; = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;blue&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;green&amp;#x27;&lt;/span&gt;]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getColors&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;colors&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;, name)&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;SuperType&lt;/span&gt;)&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;getAge&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asuna&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; inst2 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SubType&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Krito&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst1&amp;#x27;&lt;/span&gt;, inst1)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;inst2&amp;#x27;&lt;/span&gt;, inst2)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;多继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多继承&#34;&gt;#&lt;/a&gt; 多继承&lt;/h5&gt;
&lt;p&gt;如果你希望能继承到多个对象，则可以使用混入的方式。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;MyClass&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;     &lt;span class=&#34;hljs-title class_&#34;&gt;SuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;     &lt;span class=&#34;hljs-title class_&#34;&gt;OtherSuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 继承一个类（就是寄生组合继承的套路）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;create&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;SuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 混合其它类，关键是这里的 assign() 方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;assign&lt;/span&gt;(&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;, &lt;span class=&#34;hljs-title class_&#34;&gt;OtherSuperClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 重新指定constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;constructor&lt;/span&gt; = &lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在之类上附加方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;myMethod&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// do a thing&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Object.assign 会把  &lt;code&gt;OtherSuperClass&lt;/code&gt;  原型上的函数拷贝到  &lt;code&gt;MyClass&lt;/code&gt;  原型上，使 MyClass 的所有实例都可用 OtherSuperClass 的方法。Object.assign 是在 ES2015 引入的，且可用 polyfilled。要支持旧浏览器的话，可用使用 jQuery.extend () 或者_.assign ()。 ——[MDN] Object.create ()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;es6-extends&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es6-extends&#34;&gt;#&lt;/a&gt; ES6 extends&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 ES6 引入了关键字 class，但是底层仍然是基于原型的实现。class 只是语法糖，使得在 JavaScript 模拟类的代码更为简洁。&lt;/p&gt;
&lt;p&gt;​																							——《JavaScript 忍者秘籍》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &amp;#125;&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 原型方法&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 即 Person.prototype.getName = function() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 下面可以简写为 getName() &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;  getName = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Person:&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Gamer&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Person&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name, age&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(name)&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; asuna = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Gamer&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Asuna&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&lt;br&gt;asuna.&lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;() &lt;span class=&#34;hljs-comment&#34;&gt;// 成功访问到父类的方法&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;super&lt;/code&gt;  实现的原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是将继承的那个父类对象在子类中调用，比如  &lt;code&gt;super.call(this)&lt;/code&gt;  实现将父类中的属性 (父类的方法是通过原型链来继承，实例都可以共享这些方法) 在子类中声明。&lt;/p&gt;
&lt;h3 id=&#34;作用域和作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域和作用域链&#34;&gt;#&lt;/a&gt; 作用域和作用域链&lt;/h3&gt;
&lt;h3 id=&#34;作用域的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域的概念&#34;&gt;#&lt;/a&gt; 作用域的概念&lt;/h3&gt;
&lt;p&gt;字面意思就是起作用的范围。&lt;/p&gt;
&lt;h3 id=&#34;全局作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全局作用域&#34;&gt;#&lt;/a&gt; 全局作用域&lt;/h3&gt;
&lt;p&gt;在代码中任何地方都能访问到的对象拥有全局作用域&lt;/p&gt;
&lt;p&gt;常见情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最外层函数 和在最外层函数外面定义的变量拥有全局作用域&lt;/li&gt;
&lt;li&gt;所有末定义直接赋值的变量自动声明为拥有全局作用域&lt;/li&gt;
&lt;li&gt;所有 window 对象的属性拥有全局作用域
&lt;ul&gt;
&lt;li&gt;此处的 window 对象意味顶层对象，不同环境下有可能顶层对象不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局部作用域&#34;&gt;#&lt;/a&gt; 局部作用域&lt;/h3&gt;
&lt;p&gt;块级作用域可通过新增命令 let 和 const 声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在一个函数内部&lt;/li&gt;
&lt;li&gt;在一个代码块（由一对花括号包裹）内部&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;暂时性死区&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#暂时性死区&#34;&gt;#&lt;/a&gt; 暂时性死区&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;var 的创建和初始化被提升，赋值不会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;let 的创建被提升，初始化和赋值不会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;function 的创建、初始化和赋值均会被提升。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(a)&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a = &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;()&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;函数作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数作用域&#34;&gt;#&lt;/a&gt; 函数作用域&lt;/h5&gt;
&lt;p&gt;指在函数内部生效。&lt;/p&gt;
&lt;h5 id=&#34;作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域链&#34;&gt;#&lt;/a&gt; 作用域链&lt;/h5&gt;
&lt;p&gt;当前作用域内找不到的变量会根据作用域链向上寻找，直到顶层对象 window 也没有就返回 undefined。&lt;/p&gt;
&lt;h3 id=&#34;作用域与执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用域与执行上下文&#34;&gt;#&lt;/a&gt; 作用域与执行上下文&lt;/h3&gt;
&lt;p&gt;JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样：&lt;/p&gt;
&lt;h5 id=&#34;解释阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解释阶段&#34;&gt;#&lt;/a&gt; 解释阶段：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;词法分析&lt;/li&gt;
&lt;li&gt;语法分析&lt;/li&gt;
&lt;li&gt;作用域规则确定&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;执行阶段&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行阶段&#34;&gt;#&lt;/a&gt; 执行阶段：&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;创建执行上下文&lt;/li&gt;
&lt;li&gt;执行函数代码&lt;/li&gt;
&lt;li&gt;垃圾回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。&lt;/p&gt;
&lt;p&gt;一个作用域下可能包含若干个上下文环境。有可能从来没有过上下文环境（函数从来就没有被调用过）；有可能有过，现在函数被调用完毕后，上下文环境被销毁了；有可能同时存在一个或多个（闭包）。&lt;strong&gt;同一个作用域下，不同的调用会产生不同的执行上下文环境，继而产生不同的变量的值&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="JavaScript" />
        <updated>2022-06-19T14:12:03.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/</id>
        <title>变量提升与函数提升</title>
        <link rel="alternate" href="http://example.com/2022/06/17/4002_JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%8E%E5%87%BD%E6%95%B0%E6%8F%90%E5%8D%87/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1-提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-提升&#34;&gt;#&lt;/a&gt; 1 提升&lt;/h3&gt;
&lt;p&gt;在 j s 代码执行前引擎会先进行预编译，预编 译期间会将变量声明与函数声明提升至其对应作用域的最顶端。&lt;/p&gt;
&lt;h3 id=&#34;2-变量提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-变量提升&#34;&gt;#&lt;/a&gt; 2 变量提升&lt;/h3&gt;
&lt;p&gt;在 ES 6 出来之前，J S 并没有块级作用域这一说，只有全局作用域和局部作用域。变量提升指的是&lt;strong&gt;使用 var 声明的变量提升到他所在的作用域的最顶端&lt;/strong&gt;。创建阶段，初始化阶段变量提升，赋值阶段没有提升，值为 undefined。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;hljs&#34;&gt;* 赋值逻辑不提升
* 全局变量会被局部作用域中的同名变量覆盖
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;let，con st 变量，在创建阶段被提升了，但初始化和赋值阶段都没有被提升，没法使用变量，都存在一个暂时性死区。&lt;/p&gt;
&lt;h3 id=&#34;3-函数提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-函数提升&#34;&gt;#&lt;/a&gt; 3 函数提升&lt;/h3&gt;
&lt;p&gt;函数声明提升：是将函数名及函数体全部提升到其所在作用域的顶部。&lt;/p&gt;
&lt;p&gt;函数创建有两个方式：&lt;/p&gt;
&lt;p&gt;1，函数声明形式&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 声明式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt; () &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// to do...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2，函数字面量形式（即函数表达式）&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数字面量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; foo = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// to do...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一种是方式：函数构造法：var a = new Fun ()，技术角度来讲也是一个字面量形式。&lt;/p&gt;
&lt;p&gt;函数提升只针对具名函数，而对于赋值的匿名函数，并不会存在函数提升。&lt;/p&gt;
&lt;h3 id=&#34;4-变量提升与函数提升的优先级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-变量提升与函数提升的优先级&#34;&gt;#&lt;/a&gt; 4 变量提升与函数提升的优先级&lt;/h3&gt;
&lt;p&gt;函数提升优先级高于变量提升，且不会被同名变量声明覆盖，但是会被变量赋值后覆盖。&lt;/p&gt;
&lt;h3 id=&#34;5-为什么有变量提升&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-为什么有变量提升&#34;&gt;#&lt;/a&gt; 5 为什么有变量提升&lt;/h3&gt;
&lt;p&gt;JavaScript 作为脚本语言，不同于编程语言的一点是没有编译过程，但是它需要脚本解释器边解析边执行，而脚本解释器在解释执行代码前会先扫描一遍，这个过程就是 “预解析” 过程。&lt;/p&gt;
&lt;p&gt;J S 运行阶段包括预解析阶段和运行阶段。&lt;/p&gt;
&lt;p&gt;预解析阶段：&lt;/p&gt;
&lt;p&gt;​	变量提升&lt;/p&gt;
&lt;p&gt;​	函数提升&lt;/p&gt;
&lt;p&gt;执行阶段：&lt;/p&gt;
&lt;p&gt;​	创建一个执行上下文 (execution context)，函数压栈，生成 active object (活动对象)&lt;/p&gt;
&lt;p&gt;​	执行 / 解释上下文中的 function，为变量赋值&lt;/p&gt;
&lt;p&gt;预解析需要&lt;strong&gt;注意&lt;/strong&gt;如下几个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预编译首先是全局预编译，函数体未调用时是不进行预编译的。&lt;/li&gt;
&lt;li&gt;只有 var 和 function 声明会被提升。&lt;/li&gt;
&lt;li&gt;在所在的作用域会被提升，不会扩展到其他的作用域。&lt;/li&gt;
&lt;li&gt;预编译后会顺序执行代码。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="JavaScript" />
        <updated>2022-06-17T07:43:53.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/06/15/4001_JavaScript/</id>
        <title>JavaScript</title>
        <link rel="alternate" href="http://example.com/2022/06/15/4001_JavaScript/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;函数的this绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的this绑定&#34;&gt;#&lt;/a&gt; 函数的 this 绑定&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全局作用域下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器环境：全局作用域下 &lt;code&gt;this&lt;/code&gt;  绑定 window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node 环境： &lt;code&gt;空对象&amp;#123;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行步骤：首先将要执行的 js 文件作为模块，然后进行加载编译，此时将 js 代码所有文件放入一个函数中，执行该函数，但是该函数调用 &lt;code&gt;call()&lt;/code&gt; , 在调用时向 &lt;code&gt;call()&lt;/code&gt;  中传入一个空对象绑定为 &lt;code&gt;this&lt;/code&gt;  即 &lt;code&gt;执行函数.call(&amp;#123;&amp;#125;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;函数作用域下&lt;/em&gt; &lt;code&gt;this&lt;/code&gt;  指向&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数在被调用时，JavaScript 会默认给 this 绑定一个值，this 指向与函数所处位置 (&lt;strong&gt;函数定义位置&lt;/strong&gt;) 无关，与&lt;strong&gt;函数被调用的方式&lt;/strong&gt;及调用位置有关，&lt;strong&gt;this 是在运行时被绑定&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;默认绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独立函数调用 &lt;code&gt;this&lt;/code&gt;  指向的是全局对象 &lt;code&gt;window&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj1&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;: foo&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将obj1的foo赋值给bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = obj1.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隐式绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过某个对象进行调用，即调用位置中是&lt;strong&gt;通过某个对象发起的函数调用&lt;/strong&gt; (谁发起函数调用 this 就绑定谁)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; test = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;: foo&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj1&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;: test&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj2 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj2&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;obj1&lt;/span&gt;: obj1&lt;br&gt;&amp;#125;&lt;br&gt;obj2.&lt;span class=&#34;hljs-property&#34;&gt;obj1&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;span class=&#34;hljs-comment&#34;&gt;//test对象&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;object.fn()&lt;/code&gt; ：object 对象会被 js 引擎绑定到 fn 函数中的 this 上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式绑定的前提条件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须在调用的对象内部有一个对函数的引用（比如一个属性）&lt;/li&gt;
&lt;li&gt;如果没有这样的引用，在进行调用时，会报找不到该函数的错误&lt;/li&gt;
&lt;li&gt;正是通过这个引用，间接的将 this 绑定到了这个对象上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;显示绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (数组形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2,num3&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(num1+num2+num3,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;call&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;);&lt;span class=&#34;hljs-comment&#34;&gt;//剩余参数形式&lt;/span&gt;&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;apply&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;]);&lt;span class=&#34;hljs-comment&#34;&gt;//数组形式&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式), &lt;code&gt;bind&lt;/code&gt;  返回为一个新的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 默认绑定和显示绑定bind冲突：优先级（显示绑定）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newFoo = foo.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;newFoo&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;new 绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 new 关键字来调用函数执行如下的操作
&lt;ol&gt;
&lt;li&gt;创建一个全新的对象，&lt;strong&gt;并将该对象赋值给 this，函数最后返回该对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这个新对象会被执行 prototype 连接&lt;/li&gt;
&lt;li&gt;这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）&lt;/li&gt;
&lt;li&gt;如果函数没有返回其他对象，表达式会返回这个新对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内置函数绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 因为setTimeout内部实现函数调用时为独立函数调用，所以打印this时指向window&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);  &lt;span class=&#34;hljs-comment&#34;&gt;//window&lt;/span&gt;&lt;br&gt;&amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数组.forEach/map/filter/find等高阶函数&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; names = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数直接独立调用指向window&lt;/span&gt;&lt;br&gt;names.&lt;span class=&#34;hljs-title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(item,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// forEach函数接收两个参数，第一个参数为一个函数，第二个参数为this绑定对象&lt;/span&gt;&lt;br&gt;names.&lt;span class=&#34;hljs-title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(item,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;forEach&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;div的点击&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2、监听box盒子的点击,内部函数调用实现为：隐式this绑定调用进行打印即boxDiv.onclick()形式调用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; boxDiv = &lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;querySelector&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.box&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1.方式一：该方式添加监听事件会进行覆盖，也就是后面一个监听事件会覆盖前面一个，只生效一个最后一个事件&lt;/span&gt;&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2.方式二：不会进行事件覆盖，会将函数收集到一个数组里面，执行时进行遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 内部函数调用实现为：call()方式，即fn.call(boxDiv)&lt;/span&gt;&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="JavaScript" />
        <updated>2022-06-15T11:12:03.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/13/11001_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/</id>
        <title>浏览器基础</title>
        <link rel="alternate" href="http://example.com/2022/03/13/11001_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;从地址栏输入地址到显示页面过程浏览器做什么事情&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从地址栏输入地址到显示页面过程浏览器做什么事情&#34;&gt;#&lt;/a&gt; 从地址栏输入地址到显示页面过程，浏览器做什么事情&lt;/h5&gt;
&lt;h5 id=&#34;三次握手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三次握手&#34;&gt;#&lt;/a&gt; 三次握手&lt;/h5&gt;
&lt;h5 id=&#34;四次挥手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四次挥手&#34;&gt;#&lt;/a&gt; 四次挥手&lt;/h5&gt;
&lt;h5 id=&#34;浏览器缓存-协商缓存-强制缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器缓存-协商缓存-强制缓存&#34;&gt;#&lt;/a&gt; 浏览器缓存、协商缓存、强制缓存&lt;/h5&gt;
</content>
        <category term="浏览器" />
        <updated>2022-03-13T02:23:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/03/11/11002_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/</id>
        <title>浏览器基础</title>
        <link rel="alternate" href="http://example.com/2022/03/11/11002_%E6%B5%8F%E8%A7%88%E5%99%A8%E9%97%AE%E9%A2%98/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;http不同版本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#http不同版本&#34;&gt;#&lt;/a&gt; http 不同版本&lt;/h5&gt;
&lt;h5 id=&#34;tcp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; tcp&lt;/h5&gt;
&lt;h5 id=&#34;不同状态码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同状态码&#34;&gt;#&lt;/a&gt; 不同状态码&lt;/h5&gt;
&lt;h5 id=&#34;长短轮询-长短连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#长短轮询-长短连接&#34;&gt;#&lt;/a&gt; 长短轮询、长短连接&lt;/h5&gt;
&lt;h5 id=&#34;xss攻击类型-如何防御&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xss攻击类型-如何防御&#34;&gt;#&lt;/a&gt; XSS 攻击，类型、如何防御&lt;/h5&gt;
&lt;h5 id=&#34;csrf攻击类型-如何防御&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csrf攻击类型-如何防御&#34;&gt;#&lt;/a&gt; CSRF 攻击，类型、如何防御&lt;/h5&gt;
&lt;h5 id=&#34;cookie&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; Cookie&lt;/h5&gt;
&lt;h5 id=&#34;ssr与csr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ssr与csr&#34;&gt;#&lt;/a&gt; SSR 与 CSR&lt;/h5&gt;
&lt;h5 id=&#34;引起前端安全的问题有哪些&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引起前端安全的问题有哪些&#34;&gt;#&lt;/a&gt; 引起前端安全的问题有哪些&lt;/h5&gt;
&lt;h5 id=&#34;浏览器内核&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器内核&#34;&gt;#&lt;/a&gt; 浏览器内核&lt;/h5&gt;
</content>
        <category term="浏览器" />
        <updated>2022-03-11T01:39:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/02/01/10002_UniApp/</id>
        <title>uni-app</title>
        <link rel="alternate" href="http://example.com/2021/02/01/10002_UniApp/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;4-小程序的语法特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-小程序的语法特点&#34;&gt;#&lt;/a&gt; 4. 小程序的语法特点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;小程序特点概述&lt;/p&gt;
&lt;p&gt;模块：具备特定功能的 js 文件，有目的的拆分，需要用到哪个功能就引入哪个模块；&lt;br&gt;
组件：具备特定功能效果的代码集合&lt;br&gt;
没有 DOM；一切基于组件化开发&lt;br&gt;
一个页面可以由一个或者多个组件组成， 组件不能代表页面，一个页面里面只有一个组件也不无法代替&lt;br&gt;
 ** 面试题 注意：使用 HTML 描述组件化是什么？ **&lt;br&gt;
 每一个 HTML 标签就是一个组件，一个完整的页面就是由多个组件组成；体积小，单个压缩包体积不能大于 2M，否则无法上线&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小程序 4 个重要文件：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) *.&lt;span class=&#34;hljs-property&#34;&gt;js&lt;/span&gt;&lt;br&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) *.&lt;span class=&#34;hljs-property&#34;&gt;wxml&lt;/span&gt;--&amp;gt;view结构--&amp;gt;html&lt;br&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;) *.&lt;span class=&#34;hljs-property&#34;&gt;wxss&lt;/span&gt;--&amp;gt;view样式--&amp;gt;css&lt;br&gt;(&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;) *.&lt;span class=&#34;hljs-property&#34;&gt;json&lt;/span&gt;--&amp;gt;view数据--&amp;gt;json文件&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;小程序适配方案（rpx：响应式像素单位）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小程序适配单位：rpx&lt;/li&gt;
&lt;li&gt;规定任何屏幕下宽度为 750rpx&lt;/li&gt;
&lt;li&gt;小程序会根据屏幕的宽度不同自动计算 rpx 值的大小&lt;/li&gt;
&lt;li&gt;iPhone6 下，1rpx = 1 物理像素 = 0.5px&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小程序配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;桌面新建文件夹，导入微信开发者工具，进入其页面，了解顶部一栏的相关功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;project.config.json： 项目的配置文件&lt;br&gt;
一般不需要修改，若需要修改建议使用图形化界面（即开发工具）修改去设置就可以&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局配置&lt;br&gt;
小程序根目录下的  &lt;code&gt;app.json&lt;/code&gt;  文件用来对微信小程序进行全局配置。文件内容为一个 JSON 对象，有以下&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html&#34;&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/a&gt;：&lt;br&gt;
必填属性：pages：页面路径列表、sitemapLocation：指明 sitemap.json 的位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;页面配置&lt;br&gt;
每一个小程序页面也可以使用  &lt;code&gt;.json&lt;/code&gt;  文件来对本页面的窗口表现进行配置。页面中配置项在当前页面会覆盖  &lt;code&gt;app.json&lt;/code&gt;  的  &lt;code&gt;window&lt;/code&gt;  中相同的配置项。文件内容为一个 JSON 对象，有以下 **&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html&#34;&gt; 属性&lt;/a&gt; **：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sitemap 配置&lt;br&gt;
小程序根目录下的  &lt;code&gt;sitemap.json&lt;/code&gt;  文件用于配置小程序及其页面是否允许被微信索引，文件内容为一个 JSON 对象，如果没有  &lt;code&gt;sitemap.json&lt;/code&gt;  ，则默认为所有页面都允许被索引； &lt;code&gt;sitemap.json&lt;/code&gt;  有以下 **&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html&#34;&gt; 属性&lt;/a&gt; **：必填属性：rules [对象]：索引规则列表（rules 配置项指定了索引规则，每项规则为一个 JSON 对象，一般属性 actions:allow，pages: 页面路径）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：微信现已开放小程序内搜索，开发者可以通过  &lt;code&gt;sitemap.json&lt;/code&gt;  配置，或者管理后台页面收录开关来配置其小程序页面是否允许微信索引。当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索词条触发该索引时，小程序的页面将可能展示在搜索结果中。 爬虫访问小程序内页面时，会携带特定的 user-agent： &lt;code&gt;mpcrawler&lt;/code&gt;  及&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html&#34;&gt;场景值&lt;/a&gt;： &lt;code&gt;1129&lt;/code&gt; 。需要注意的是，若小程序爬虫发现的页面数据和真实用户的呈现不一致，那么该页面将不会进入索引中。&lt;/p&gt;
&lt;p&gt;具体配置说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面收录设置：可对整个小程序的索引进行关闭，小程序管理后台 - 功能 - 页面内容接入 - 页面收录开关；&lt;a href=&#34;https://mp.weixin.qq.com/wxopen/readtemplate?t=config/collection_agreement_tmpl&#34;&gt;详情&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sitemap 配置：可对特定页面的索引进行关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小程序文件：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs text&#34;&gt;├── app.js（APP(&amp;#123;&amp;#125;)：注册整个小程序应用）&lt;br&gt;├── app.json （对象：第一项属性使用数组表示，pages即为页面路径）&lt;br&gt;├── app.wxss&lt;br&gt;├── pages&lt;br&gt;│   │── index&lt;br&gt;│   │   ├── index.wxml&lt;br&gt;│   │   ├── index.js(Page(&amp;#123;&amp;#125;):注册当前页面的实例)&lt;br&gt;│   │   ├── index.json（当前页面的配置）&lt;br&gt;│   │   └── index.wxss&lt;br&gt;│   └── logs&lt;br&gt;│       ├── logs.wxml&lt;br&gt;│       └── logs.js&lt;br&gt;└── utils（封装功能函数）&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;5-小程序的语法特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-小程序的语法特点&#34;&gt;#&lt;/a&gt; 5. 小程序的语法特点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据绑定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;初始化数据&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;页面.js 的 data 选项（小程序页面使用的数据都会向 data 去要，所以页面上想要有什么数据就要放入 data 中 ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;Page&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello world!&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;code￼&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;补充：小程序相关的数据绑定&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;小程序&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt; data中初始化数据&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt; 修改数据&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;setData&lt;/span&gt;(),修改数据的行为始终始终是同步的&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt; 数据流：单项（&lt;span class=&#34;hljs-title class_&#34;&gt;Model&lt;/span&gt;---&amp;gt;&lt;span class=&#34;hljs-title class_&#34;&gt;View&lt;/span&gt;）&lt;br&gt;vue&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt; data中初始化数据&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt; 修改数据&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;key&lt;/span&gt; = value&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt; 数据流：&lt;br&gt;  	&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt; vue是单向数据流&lt;span class=&#34;hljs-title class_&#34;&gt;Model&lt;/span&gt;---&amp;gt;&lt;span class=&#34;hljs-title class_&#34;&gt;View&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;中实现了双向数据绑定：v-model&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;React&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt; state中初始化状态数据&lt;br&gt;  &lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt; 修改数据&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;setState&lt;/span&gt;()&lt;br&gt;		&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt; 自身钩子函数中（componentDidMount）异步的&lt;br&gt;    &lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt; 非自身的钩子函数中（定时器的回调）同步的&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt; 数据流：单项&lt;span class=&#34;hljs-title class_&#34;&gt;Model&lt;/span&gt;---&amp;gt;&lt;span class=&#34;hljs-title class_&#34;&gt;View&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据劫持代理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//Vue 数据底层劫持代理思想&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 模拟 Vue 中的 data 选项&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;curry&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;11&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 模拟组件的实例&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; _this &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 利用 Object.defineProperty ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; itemin data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_this&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 用来获取扩展属性值的，当获取该属性值的时候调用 get 方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 监事扩展属性的，只要一修改就调用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;set()&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;newValue&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; newValue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_this&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 通过 Object.defineProperty 的 get 方法添加的扩展属性不能直接对象。属性进行修改&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;_this&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;wade&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_this&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;code￼&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;`javascript&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;//catch 绑定：事件绑定可以阻止冒泡事件向上冒泡&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;view catchtap&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hangleTap&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;阻止冒泡事件&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;view&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;code￼&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//index.js 文件中写方法即跳转的页面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;toLogs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    wx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;reLaunch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;/pages/logs/logs&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;code￼&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生命周期函数 (钩子函数)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生命周期函数 -- 监听页面加载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onLoad&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生命周期函数 -- 监听页面初次渲染完成&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;span class=&#34;token function-variable function&#34;&gt;onLoad&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生命周期函数 -- 监听页面显示&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function-variable function&#34;&gt;onShow&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生命周期函数 -- 监听页面隐藏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function-variable function&#34;&gt;onHide&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5.&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 生命周期函数 -- 监听页面卸载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token function-variable function&#34;&gt;onUnload&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;onLoad、onLoad页面加载未销毁时只执行一次，而onShow可以执行多次，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;onLoad、onLoad可以发请求，onShow会多次请求影响程序性能&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="uni-app" />
        <updated>2021-02-01T12:39:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2021/01/21/10001_UniApp/</id>
        <title>uni-app</title>
        <link rel="alternate" href="http://example.com/2021/01/21/10001_UniApp/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;1-小程序定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-小程序定义&#34;&gt;#&lt;/a&gt; 1. 小程序定义&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;体积小，下载速度快，压缩包的体积不能大于 1M，2017 年之后开始小于 2M&lt;/li&gt;
&lt;li&gt;和 APP 进行互补，提供和 APP 相同的功能，而且比较简洁；下载简单；使用频率较少，但又不得不用；连接线上和线下；开发门槛低，成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2小程序准备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2小程序准备&#34;&gt;#&lt;/a&gt; 2. 小程序准备&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;官网下载安装微信 &lt;strong&gt;开发者工具&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;下载地址：&lt;a href=&#34;https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html&#34;&gt;https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;申请注册小程序账号&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-知识储备了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-知识储备了解&#34;&gt;#&lt;/a&gt; 3. 知识储备了解&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;flex 布局学习&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动端知识&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;物理像素（真实存在）&lt;br&gt;
叫作屏幕的分辨率； 屏幕上一个发光点就是物理像素点，分辨率越高，物理像素点越多，本身像素点越小越精致，屏幕越清晰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备独立像素 &amp;amp;&amp;amp; CSS 像素（虚拟像素）&lt;/p&gt;
&lt;p&gt;屏幕大小为 4.7 英寸、5.5 英寸等（主对角线）&lt;br&gt;
设备独立像素（密度无关像素）：例如：iPhone 6（375px × 667px）、iPhone 6 plus（414px × 736px）&lt;br&gt;
CSS 像素（px）：可以与设备独立像素相互装换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dpr 比 &amp;amp; DPI&amp;amp;PPI&lt;br&gt;
dpr 比：设备像素比，物理像素 / 设备独立像素 = dpr, 一般以 iPhone 6 的 dpr 为准 dpr = 2;&lt;/p&gt;
&lt;p&gt;DPI: 最早指的是打印机在单位面积上打印的墨点数，墨点越多越清晰；&lt;/p&gt;
&lt;p&gt;PPI: 一英寸显示屏上的像素点个数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动端的适配方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;viewport 适配&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么做 viewport 适配&lt;br&gt;
手机厂商生产手机大部分默认页面宽度的为 980px&lt;br&gt;
 手机实际视口宽度都要小于 980px, 如：iPhone 6 为 375x&lt;br&gt;
 开发需求：需要将 980px 的页面安全显示在手机屏幕上且没有滚动条&lt;br&gt;
注意：视觉视口就是手机屏幕的大小；布局视口：就是网页的大小；&lt;/li&gt;
&lt;li&gt;实现&lt;/li&gt;
&lt;/ol&gt;
&lt;meta name=&#39;&#39;viewport&#39;&#39; content=&#39;&#39;width=device-width,initial-scale=1.0&#39;&#39;&gt;
width：网页视口的宽度即布局视口
device-width：屏幕大小即视觉视口
把视觉视口等于布局视口
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rem 适配（root em 根节点字体的大小）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;机型太多，不同的机型屏幕大小不一样&lt;br&gt;
需求：一套设计稿的内容在不同的机型上呈现的效果一致，根据屏幕大小不同的变化，页面中的内容也相应的变化；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;remRefresh&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; clientWidth = &lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;documentElement&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;clientWidth&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;//将屏幕分成10等分&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; rem = clientWidth/&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;documentElement&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;style&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;fontSize&lt;/span&gt; = rem + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;px&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;body&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;style&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;fontSize&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;12px&amp;#x27;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;pageshow&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;remRefresh&lt;/span&gt;();&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数防抖&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; timeoutId;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;window&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;resize&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  timeoutId &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;clearTimeout&lt;/span&gt;(timeoutId);&lt;br&gt;  timeoutId = &lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-title function_&#34;&gt;remRefresh&lt;/span&gt;();&lt;br&gt;  &amp;#125;,&lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt;)&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三方库实现&lt;br&gt;
 lib-flexible 和 px2rem-loader&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="uni-app" />
        <updated>2021-01-21T11:32:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/09/01/9003_TypeScript/</id>
        <title>TypeScript</title>
        <link rel="alternate" href="http://example.com/2020/09/01/9003_TypeScript/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;10属性的封装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10属性的封装&#34;&gt;#&lt;/a&gt; 10. 属性的封装&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;修饰符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt; : 修饰的属性可以在任意位置访问及修改，默认值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt; : 私有属性，只能在类内部进行访问及修改，通过类中添加方法使得私有属性可以被外部访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; : 只能在当前类和当前类的子类中访问及修改&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;封装属性提升安全性&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Personn&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    getter方法用来读取属性，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    setter方法用来设置属性，这两个方法被称为属性的存取器。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;name_easy&lt;/span&gt;() &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;name_easy&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;value: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;= value;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;age_easy&lt;/span&gt;()&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;age_easy&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;value:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = value;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*   // 定义方法，用来获取name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  getterName()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    return this.name;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  // 定义方法，用来设置name属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  setterName(value:string)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    this.name = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  // 定义方法，用来获取age性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  getterAge()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    return this.age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  // 定义方法，用来设置age属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  setterAge(value:number)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    // 用来判断数据是否合法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    if (value&amp;gt;=0) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;      this.age = value;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125; */&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 简洁版，直接将属性定义在构造函数中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;A&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; personn = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Personn&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;李四&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* personn.setterName(&amp;#x27;王二&amp;#x27;);// 修改name的值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;personn.setterAge(-12);// 修改age的值 */&lt;/span&gt;&lt;br&gt;personn.&lt;span class=&#34;hljs-property&#34;&gt;name_easy&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;;&lt;br&gt;personn.&lt;span class=&#34;hljs-property&#34;&gt;age_easy&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;23&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(personn.&lt;span class=&#34;hljs-property&#34;&gt;name_easy&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(personn.&lt;span class=&#34;hljs-property&#34;&gt;age_easy&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(personn);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;11泛型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11泛型&#34;&gt;#&lt;/a&gt; 11. 泛型&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;泛型的使用&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在定义函数和类时，遇到类型不明确就可以使用泛型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; fn&amp;lt;T&amp;gt;(&lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:T):T&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; a;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1.不指定泛型，直接使用，利用TS的自动类型检测&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2. 指定泛型&lt;/span&gt;&lt;br&gt;fn&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 泛型可以同时指定多个&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; fn2&amp;lt;T,K&amp;gt;(&lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:T,&lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:K):T &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(b);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; a;&lt;br&gt;&amp;#125;&lt;br&gt;fn2&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;,&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//函数可以使用泛型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//  T extends Inter 表示泛型T必须是Inter实现类(子类)。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Inter&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;demo&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; fn3&amp;lt;T &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Inter&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:T):&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; a.&lt;span class=&#34;hljs-property&#34;&gt;demo&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 类中也可以使用泛型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;myClass&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:T;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:T&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; mc = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; myClass&amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;张三&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="TypeScript" />
        <updated>2020-09-01T11:58:59.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/08/27/9002_TypeScript/</id>
        <title>TypeScript</title>
        <link rel="alternate" href="http://example.com/2020/08/27/9002_TypeScript/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;5使用webpack打包ts代码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5使用webpack打包ts代码&#34;&gt;#&lt;/a&gt; 5. 使用 webpack 打包 ts 代码&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;  文件配置 webpack&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 引入路径管理的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; path = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//webpack中所有的配置信息都写在module.exports中 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 指定入口文件路径&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;entry&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;./test.ts&amp;#x27;&lt;/span&gt;,&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 指定打包文件所在目录&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;:&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 指定打包文件的目录&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;path&lt;/span&gt;:path.&lt;span class=&#34;hljs-title function_&#34;&gt;resolve&lt;/span&gt;(__dirname,&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;dist&amp;#x27;&lt;/span&gt;),&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 打包后文件的名字&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bundle.js&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 指定webpack打包时要使用的模块&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;module&lt;/span&gt;:&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 指定要加载的规则&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;rules&lt;/span&gt;:[&lt;br&gt;      &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 指定规则生效的文件，使用正则语法&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.ts$/&lt;/span&gt;,&lt;span class=&#34;hljs-comment&#34;&gt;//ts文件生效&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 要使用的loader&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;ts-loader&amp;#x27;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 要排除的文件&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;exclude&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/node-modules/&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;    ]&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;6面向对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6面向对象&#34;&gt;#&lt;/a&gt; 6. 面向对象&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;在程序中把一切事物当作对象编写&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;7类的简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7类的简介&#34;&gt;#&lt;/a&gt; 7. 类的简介&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;类的实现&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;aa&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// constructor(parameters) &amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; person = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(); &lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(person);&lt;br&gt;person.&lt;span class=&#34;hljs-property&#34;&gt;aa&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//报错，只读属性，不能修改。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性分为两种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;实例属性：直接定义的属性，需要通过对象的实例去访问。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; person = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();&lt;br&gt;person.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类属性 | 静态属性：使用 &lt;code&gt;static&lt;/code&gt;  关键字修饰的属性，直接通过类去访问。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;readonly&lt;/code&gt; : 只读属性，无法修改&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法分为两种&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实例方法：需要使用对象的实例去访问。&lt;/li&gt;
&lt;li&gt;类方法 | 静态方法：直接使用类去访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;constructor&lt;/code&gt; : 称为构造函数，构造函数会在创建对象时调用。&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Per&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;王二&amp;#x27;&lt;/span&gt;&lt;br&gt;  age = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 在实例方法中，this就表示当前的实例&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 在构造函数中当前对象就是新建对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 可以通过this向新建对象中添加属性&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;speak&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hahahha&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 在方法中可以使用this来表示当前调用方法的对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; per = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Per&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;张三&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(per);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(per.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt;);&lt;br&gt;per.&lt;span class=&#34;hljs-title function_&#34;&gt;speak&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;8继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8继承&#34;&gt;#&lt;/a&gt; 8. 继承&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简介&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Animal&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;talk&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;动物在说话!&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//子类继承父类，Animal为父类，Dog为子类，子类将会拥有父类所有的属性和方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dog&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Animal&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;run&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;在奔跑!`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 子类将会把父类中相同的方法覆盖掉，被称为重写&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;talk&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`汪汪汪`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Cat&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Animal&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;talk&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`喵喵喵`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dog = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dog&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;小狗&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; cat = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Cat&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;小猫&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;);&lt;br&gt;dog.&lt;span class=&#34;hljs-title function_&#34;&gt;talk&lt;/span&gt;();&lt;br&gt;cat.&lt;span class=&#34;hljs-title function_&#34;&gt;talk&lt;/span&gt;();&lt;br&gt;dog.&lt;span class=&#34;hljs-title function_&#34;&gt;run&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;super&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Ani&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`动物在说话!000`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Doff&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Ani&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 若子类中写构造函数，则把父类中构造函数覆盖（重写），在子类构造函数中必须对父类中构造函数进行调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(name);&lt;span class=&#34;hljs-comment&#34;&gt;//调用父类中构造函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 在类的方法中super就表示当前类的父类&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;();&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; doff = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Doff&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;旺财&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(doff);&lt;br&gt;doff.&lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  以abstract开头的类是抽象类，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  抽象类不能用来创建对象，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  抽象类就是专门用来被继承的类。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Animala&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;/* &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    抽象方法使用abstract开头，没有方法体，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    抽象方法只能定义在抽象类中，子类必须对抽象方法进行重写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;():&lt;span class=&#34;hljs-built_in&#34;&gt;void&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dogg&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;Animala&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(name);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.name&amp;#125;&lt;/span&gt;说话!`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; dogg = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dogg&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;旺财1&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;dogg.&lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;9-接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-接口&#34;&gt;#&lt;/a&gt; 9. 接口&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;接口的使用&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 类型声明(不能重复声明)，描述一个对象的类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; myType = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;obj&lt;/span&gt;:myType = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 接口用来定义一个类结构，定义类中应该包含哪些属性和方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 同时接口也可以当成类型声明使用(可以重复声明)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; myInterface&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;object&lt;/span&gt;:myInterface = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;demo&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 接口可以在定义类时限制类的结构，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 接口中所有的属性都不能有实际的值，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 接口只定义对象的结构，而不考虑实际值，在接口中所有的方法都是抽象方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; myInter&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;():&lt;span class=&#34;hljs-built_in&#34;&gt;void&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义类时可以使类去实现一个接口,实现接口就是使类满足接口的要求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyClass&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; myInter&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,age:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;name&lt;/span&gt; = name&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;age&lt;/span&gt; = age&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;sayHello&lt;/span&gt;(): &lt;span class=&#34;hljs-built_in&#34;&gt;void&lt;/span&gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`hello !`&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="TypeScript" />
        <updated>2020-08-27T10:58:09.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/08/21/9001_TypeScript/</id>
        <title>TypeScript</title>
        <link rel="alternate" href="http://example.com/2020/08/21/9001_TypeScript/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;1简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1简介&#34;&gt;#&lt;/a&gt; 1. 简介&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;以 JavaScript 为基础构建的语言；一个 JavaScript 的超集；可以在任何支持 JavaScript 的平台中执行，TS 不能被 JS 解析器直接执行，需要编译转换为 JavaScript；typescript 扩展了 JavaScript，并且添加了类型。&lt;/li&gt;
&lt;li&gt;typescript 增加了类型、支持 ES6 新特性、强大的开发工具、添加 ES 不具备的新特性、丰富的配置选项&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;2-搭建ts开发环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-搭建ts开发环境&#34;&gt;#&lt;/a&gt; 2. 搭建 TS 开发环境&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;下载 node&lt;/li&gt;
&lt;li&gt;安装 node &lt;code&gt;node -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;npm 全局安装 ts &lt;code&gt;npm i typescript -g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查 typescript 版本 &lt;code&gt;tsc --version&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3类型声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3类型声明&#34;&gt;#&lt;/a&gt; 3. 类型声明&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本类型 (小写)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;number、string、boolean三种类型&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bb&lt;/span&gt;:number;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//TS具有自动类型判断机制，当变量和赋值同时进行时可以省略类型声明&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;aa&lt;/span&gt;:string = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;cc&lt;/span&gt;:boolean = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;参数&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;:类型,参数&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;:类型&lt;/span&gt;):类型&amp;#123;&lt;br&gt;	...&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字面量类型 (联合类型)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;test&amp;#x27;&lt;/span&gt; | &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;demo&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;: boolean | number;&lt;br&gt;b = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;b = &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;any (任意类型): 相当于关闭 TS 的类型检测&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; a;（隐式）&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:any;（显式）&lt;br&gt;以上两种类型均是any类型&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unknown (未知类型)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;any赋值问题&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:any;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:string;&lt;br&gt;b = a;&lt;span class=&#34;hljs-comment&#34;&gt;//a是any类型，它可以赋值给任意变量（谁碰any谁变）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;unknown赋值问题&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:unknown;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:string;&lt;br&gt;b = a;&lt;span class=&#34;hljs-comment&#34;&gt;//报错，unknown实际上是类型安全的any，unknown类型的变量，不能直接赋值给其他变量&lt;/span&gt;&lt;br&gt;可以使用类型断言处理报错[&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;添加条件 &lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;类型断言]&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;void (用来表示空，以函数为例，表示没有返回值的函数)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;):&lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; unll/underfined&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;never (表示永远不会返回结果)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;):never&amp;#123;&lt;br&gt;  ...&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;object&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:object;&lt;br&gt;	a = &amp;#123;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;&amp;#123;&amp;#125;用来指定对象中可以包含哪些属性&lt;br&gt;	语法:&amp;#123;属性名:属性值,属性名:属性值&amp;#125;&lt;br&gt;	在属性名后边加上?，表示属性为可选的&lt;br&gt;	&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:&amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:string,age?:number&amp;#125;&lt;br&gt;	b = &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;测试&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt;定义对象:[属性名:类型(一般为string)]:类型(一般为any)&lt;br&gt;	t &lt;span class=&#34;hljs-attr&#34;&gt;c&lt;/span&gt;:&amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:string,[&lt;span class=&#34;hljs-attr&#34;&gt;propName&lt;/span&gt;:string]:any&amp;#125;;&lt;br&gt;	c = &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;测试&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;gender&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;男&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3.&lt;/span&gt;定义函数:设置函数结构的类型声明&lt;br&gt;	语法:&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;形参:类型,形参:类型...&lt;/span&gt;) =&amp;gt;&lt;/span&gt; 返回值&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;d&lt;/span&gt;:&lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;a:number,b:number&lt;/span&gt;) =&amp;gt;&lt;/span&gt;number&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;array&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;数组的类型声明&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;类型[]&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;1.1&lt;/span&gt; string[] 表示字符串数组&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;a&lt;/span&gt;:string[];&lt;br&gt;	a = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;];&lt;br&gt;	&lt;span class=&#34;hljs-number&#34;&gt;1.2&lt;/span&gt; number[] 表示数值数组&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;b&lt;/span&gt;:number[];&lt;br&gt;	b = [&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;&amp;gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;aa&lt;/span&gt;:&lt;span class=&#34;hljs-title class_&#34;&gt;Array&lt;/span&gt;&amp;lt;number&amp;gt;;&lt;br&gt;  aa = [&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tuple (元组): 固定长度的数组&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法：[类型，类型，类型]&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:[string,string];&lt;br&gt;test = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;hello&amp;#x27;&lt;/span&gt;];&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enum (枚举)[常用于选择项]&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Gender&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;Male&lt;/span&gt; = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;Female&lt;/span&gt; =&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;obj&lt;/span&gt;:&amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;gender&lt;/span&gt;:&lt;span class=&#34;hljs-title class_&#34;&gt;Gender&lt;/span&gt;&amp;#125;&lt;br&gt;obj = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;悟空&amp;#x27;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;gender&lt;/span&gt;:&lt;span class=&#34;hljs-title class_&#34;&gt;Gender&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;Male&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(obj.&lt;span class=&#34;hljs-property&#34;&gt;gender&lt;/span&gt;===&lt;span class=&#34;hljs-title class_&#34;&gt;Gender&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;Male&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型断言&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1.&lt;/span&gt;语法&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;:变量 &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; 类型 &lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2.&lt;/span&gt;语法&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;:&amp;lt;类型&amp;gt; 变量&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;  同时&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;j&lt;/span&gt;:&amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt;&amp;#125; &amp;amp; &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;number&lt;/span&gt;&amp;#125;&lt;br&gt;j = &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;悟空&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;类型的别名&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;type&lt;/span&gt; myType = &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;|&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;|&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;|&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;|&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;k&lt;/span&gt;:myType;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;l&lt;/span&gt;:myType;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;4编译选项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4编译选项&#34;&gt;#&lt;/a&gt; 4. 编译选项&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tsc 文件名.ts -w&lt;/code&gt; ：自动监视文件变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;  文件配置&lt;/p&gt;
&lt;figure class=&#34;highlight typescript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs typescript&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// tsconfig.json是ts编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 用来指定需要编译的ts目录及文件&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 路径：** 表示任意目录，* 表示任意文件&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;include&amp;quot;&lt;/span&gt;: [&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./test.ts&amp;quot;&lt;/span&gt;&lt;br&gt;  ],&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 用来指定不需要编译的ts文件&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 默认值：[&amp;#x27;node_modules&amp;#x27;,&amp;#x27;bower_components&amp;#x27;,&amp;#x27;jspm_packages&amp;#x27;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;exclude&amp;quot;&lt;/span&gt;: [&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./demo.ts&amp;quot;&lt;/span&gt;&lt;br&gt;  ],&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 用来继承其他的配置文件 &lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;extends&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./tsconfig.json&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 用来指定需要编译的ts文件&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;files&amp;quot;&lt;/span&gt;: [&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./test.ts&amp;quot;&lt;/span&gt;&lt;br&gt;  ],&lt;br&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 编译选项，对编译器的配置&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 项目选项&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 设置ts代码编译的目标版本&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ES6&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 指定要使用的模块化规范&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ES6&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 用来指定项目中要使用的库&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;: [&lt;br&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ES2015&amp;quot;&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DOM&amp;quot;&lt;/span&gt;&lt;br&gt;    ],&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 用来指定编译后文件所在的目录&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;outDir&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./dist&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 将代码合并为一个文件，所有全局作用域中的代码会合并到同一个文件里&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;outFile&amp;quot;: &amp;quot;./dist/test.js&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 是否对js文件进行编译，默认值为false&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;allowJs&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 是否检查js代码符合语法规范，默认值为false&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkJs&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 是否在文件编译后移除注释&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;removeComments&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 是否生成编译后的文件&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noEmit&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 代码存在错误时不生成编译后的文件&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noEmitOnError&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 所有严格检查的总开关&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 用来设置编译后的文件是否使用严格模式，默认为false&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;alwaysStrict&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 不允许隐式的any类型&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noImplicitAny&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 不允许类型不明确的this&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;noImplicitThis&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 严格检查空值&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;strictNullChecks&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="TypeScript" />
        <updated>2020-08-21T08:38:49.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/06/14/8003_Node.js/</id>
        <title>Node</title>
        <link rel="alternate" href="http://example.com/2020/06/14/8003_Node.js/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
</content>
        <category term="Node" />
        <updated>2020-06-14T05:47:42.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/06/08/8002_Node.js/</id>
        <title>Node</title>
        <link rel="alternate" href="http://example.com/2020/06/08/8002_Node.js/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;express 框架&lt;br&gt;
 egg 框架&lt;br&gt;
 koa 框架&lt;/p&gt;
</content>
        <category term="Node" />
        <updated>2020-06-08T07:59:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/06/01/8001_Node.js/</id>
        <title>Node</title>
        <link rel="alternate" href="http://example.com/2020/06/01/8001_Node.js/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;node-事件循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#node-事件循环&#34;&gt;#&lt;/a&gt; Node 事件循环&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;浏览器中 &lt;code&gt;EventLoop即事件循环&lt;/code&gt; 是根据 HTML5 定义的规范来实现的，不同的浏览器可能会有不同的实现，而 node 中是由 &lt;code&gt;libuv库&lt;/code&gt; 现实的&lt;/li&gt;
&lt;li&gt;微任务和宏任务
&lt;ol&gt;
&lt;li&gt;宏任务 (macrotask)：setTimeout、setInterval、IO 事件、setImmediate、close 事件&lt;/li&gt;
&lt;li&gt;微任务 (microtask)：Promise 的 then 回调、process.nextTick、queueMicrotask&lt;/li&gt;
&lt;li&gt;node 队列执行顺序
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;next tick microtask queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;other microtask queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timer queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close queue&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Node" />
        <updated>2020-06-01T07:09:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/05/19/7003_Webpack/</id>
        <title>Webpack</title>
        <link rel="alternate" href="http://example.com/2020/05/19/7003_Webpack/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h6 id=&#34;浏览器兼容性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器兼容性&#34;&gt;#&lt;/a&gt; 浏览器兼容性&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;browserslist 工具：查询浏览器版本，一个在不同的前端工具之间，共享目标浏览器和 Node.js 版本的配置 (Babel、Autoprefixer、postcss-preset-env 等)&lt;/li&gt;
&lt;li&gt;browserslist 编写规则
&lt;ol&gt;
&lt;li&gt;defaults:Browserslist 的默认浏览器&lt;/li&gt;
&lt;li&gt;5%: 通过全局使用情况统计的信息选择浏览器版本&lt;/li&gt;
&lt;li&gt;dead:24 个月没有官方支持或更新的浏览器&lt;/li&gt;
&lt;li&gt;last 2 version: 每一个浏览器的最后 2 个版本&lt;/li&gt;
&lt;li&gt;not ie &amp;lt;=8: 排除先前查询选择的浏览器&lt;/li&gt;
&lt;li&gt;node 10: 选择最新的的 node.js 版本 (如 current node:Browserslist 现在使用的 Node.js 版本)&lt;/li&gt;
&lt;li&gt;iOS 7: 直接使用 iOS 浏览器版本 7&lt;/li&gt;
&lt;li&gt;supports es6-module: 支持特定功能的浏览器&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;browserslist 工具使用 caniuse-lite 工具进行条件查询
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;,&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; : 并集，满足一个即可&lt;/li&gt;
&lt;li&gt;&lt;code&gt;and&lt;/code&gt; : 交集，所有条件都要满足&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not&lt;/code&gt; : 取反&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在多个 browserslist 共享查询条件时，两种编写方式
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;package.json&lt;/code&gt;  文件里面添加字段&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;browserslist&amp;quot;&lt;/span&gt;: [&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;gt;1%&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;last 2 version&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;not dead&amp;quot;&lt;/span&gt;&lt;br&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;新建 &lt;code&gt;.browserslistrc&lt;/code&gt;  文件&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;%,&lt;br&gt;last &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; version,&lt;br&gt;not dead&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：浏览器版本查询的依赖网站:&lt;a href=&#34;https://caniuse.com/&#34;&gt;https://caniuse.com/&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;postcss&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#postcss&#34;&gt;#&lt;/a&gt; postcss&lt;/h6&gt;
&lt;p&gt;定义：一个通过 JavaScript 来转换样式的工具，但是要实现特定的功能需要借助与 postcss 相应的插件 (如自动添加浏览器前缀，css 样式重置)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;postcss 的使用
&lt;ol&gt;
&lt;li&gt;查找 postcss 在构建工具中的扩展，如 webpack 中的 &lt;code&gt;postcss-loader&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择添加需要的 postcss 相关插件实现相应的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在命令行中使用 postcss &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 安装postcss工具&lt;/span&gt;&lt;br&gt;npm install postcss -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 安装postcss命令行工具&lt;/span&gt;&lt;br&gt;npm install postcss-cli -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用postcss工具对test.css文件中样式进行处理，生成目标文件result.css&lt;/span&gt;&lt;br&gt;npx postcss -o result.&lt;span class=&#34;hljs-property&#34;&gt;css&lt;/span&gt; ./src/css/test.&lt;span class=&#34;hljs-property&#34;&gt;css&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//安装`autoprefixer`插件为了给样式添加浏览器前缀&lt;/span&gt;&lt;br&gt;npm install autoprefixer -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//`--use autoprefixer`指定使用特性插件&lt;/span&gt;&lt;br&gt;npx postcss --use autoprefixer -o result.&lt;span class=&#34;hljs-property&#34;&gt;css&lt;/span&gt; ./src/css/test.&lt;span class=&#34;hljs-property&#34;&gt;css&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：推荐查询样式适配浏览器的网站:&lt;a href=&#34;https://autoprefixer.github.io/(%E5%91%8A%E8%AF%89%E4%BD%A0%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%BA%94%E7%9A%84%E5%89%8D%E7%BC%80)&#34;&gt;https://autoprefixer.github.io/(告诉你是否需要添加相应的前缀)&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 webpack 中使用 postcss&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 安装postcss工具&lt;/span&gt;&lt;br&gt;npm install postcss -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 安装postcss-loader&lt;/span&gt;&lt;br&gt;npm install postcss-loader -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//安装`autoprefixer`插件为了给样式自动添加浏览器前缀&lt;/span&gt;&lt;br&gt;npm install autoprefixer -D&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//安装`postcss-preset-env`插件为了使CSS新特性适配大部分浏览器&lt;/span&gt;&lt;br&gt;npm install postcss-preset-env -D&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postcss-preset-env&lt;/code&gt; : 讲一些现代 CSS 特性转成大多数浏览器识别的 CSS，且根据目标浏览器或者运行时环境添加所需的 &lt;code&gt;polyfill&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;postcss-preset-env&lt;/code&gt;  插件已经包含 &lt;code&gt;autoprefixer&lt;/code&gt;  插件的特性 (自动为浏览器添加前缀)&lt;/li&gt;
&lt;li&gt;rgb (#000000):6 位；rgba (#00000000):8 位部分浏览器可以解析识别，最后两位表示透明度&lt;/li&gt;
&lt;li&gt;在 webpack 中使用 &lt;code&gt;postcss&lt;/code&gt;  工具时，使用相同的插件时可以进行相同的 &lt;code&gt;插件代码抽离&lt;/code&gt; ，只需新建文件 &lt;code&gt;postcss.config.js&lt;/code&gt;  (特定文件名), 在该文件里面添加以下代码&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//对webpack中的postcss工具使用postcss-preset-env插件配置单独抽离&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;:[&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;postcss-preset-env&amp;quot;&lt;/span&gt;)&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 该插件可以简写为以下形式，但并不是所有的插件都可以写成简写形式&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;postcss-preset-env&amp;quot;&lt;/span&gt;&lt;br&gt;  ]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;资源模块类型asset-module-type&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#资源模块类型asset-module-type&#34;&gt;#&lt;/a&gt; 资源模块类型 (asset module type)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;4 种新的模块类型
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;asset/resource&lt;/code&gt; : 发送一个单独的文件并导出 URL, 相当于 &lt;code&gt;file-loader&lt;/code&gt;  的作用&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asset/resource&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;generator&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:6][ext]&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
附加：加载字体文件 (阿里图标库)  &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.ttf|eot|woff2?$/i&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asset/resource&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;generator&lt;/span&gt;:&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;font/[name].[hash:6][ext]&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asset/inline&lt;/code&gt; : 导出一个资源 data URL, 相当于 &lt;code&gt;url-loader&lt;/code&gt;  的作用&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asset/inline&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asset/source&lt;/code&gt; : 导出资源的源代码，相当于 &lt;code&gt;raw-loader&lt;/code&gt;  的作用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asset&lt;/code&gt; : 在导出一个 data URL 和发送一个单独文件之间自动选择，相当于 &lt;code&gt;url-loader&lt;/code&gt;  的作用，且配置资源体积限制实现 (大小图片进行筛选)&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asset&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;generator&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:6][ext]&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;parser&lt;/span&gt;:&amp;#123;&lt;br&gt;    &amp;lt;!-- &lt;span class=&#34;hljs-string&#34;&gt;`url-loader`&lt;/span&gt;的limit效果 --&amp;gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;dataUrlCondition&lt;/span&gt;:&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;maxSize&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;160&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将图片放入对应的文件夹里面的两种方式
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;output&lt;/code&gt;  中进行配置&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;: &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bundle.js&amp;quot;&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;path&lt;/span&gt;: path.&lt;span class=&#34;hljs-title function_&#34;&gt;resolve&lt;/span&gt;(__dirname, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;),&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;assetModuleFilename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:6][ext]&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;rules&lt;/code&gt;  中配置&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asset/resource&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;generator&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:6][ext]&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;plugin每一个plugin是一个类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#plugin每一个plugin是一个类&#34;&gt;#&lt;/a&gt; Plugin (每一个 plugin 是一个类)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;定义: &lt;code&gt;Loader&lt;/code&gt;  用于特定模块类型进行转换； &lt;code&gt;Plugin&lt;/code&gt;  用于执行更加广泛的任务 (打包优化、资源管理、环境变量注入)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Plugin&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;安装 &lt;code&gt;clean-webpack-plugin&lt;/code&gt; : 修改一些配置后自动生成 dist 文件夹进行替换&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;lt;!-- 第一步引入需要的plugin --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;CleanWebpackPlugin&lt;/span&gt; &amp;#125; = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clean-webpack-plugin&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;lt;!-- 第二步使用需要的plugin --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CleanWebpackPlugin&lt;/span&gt;()&lt;br&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;html-webpack-plugin&lt;/code&gt; : 根据 &lt;code&gt;ejs模板&lt;/code&gt; 自动生成 &lt;code&gt;index.js&lt;/code&gt;  文件，并引入相关文件；ejs 模板里面可以设置 &lt;code&gt;options.title&lt;/code&gt;  属性，即为生成 index 文件的标题；自定义 HTML 模板，新建 public 文件夹，在里面新建 HTML 文件，使用 &lt;code&gt;template&lt;/code&gt;  进行引入即可；自定义模板数据填充，使用 &lt;code&gt;&amp;lt;% 变量 %&amp;gt;&lt;/code&gt; ，该方式是 ejs 模板填充数据的方式&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;lt;!-- 第一步引入需要的plugin --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;CleanWebpackPlugin&lt;/span&gt; &amp;#125; = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clean-webpack-plugin&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;lt;!-- 第二步使用需要的plugin --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CleanWebpackPlugin&lt;/span&gt;(&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;自定义index文件的标题名&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./pubilc/index.html&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;)&lt;br&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;define-plugin&lt;/code&gt; : 解决 &lt;code&gt;BASE_URL的常量&lt;/code&gt; 无法找到问题，区分开发与生产环 境，区分 mode 模式等，允许编译时创建配置的全局常量，属于 webpack 内置插件，无需安装&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;lt;!-- 第一步进行引入 --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-title class_&#34;&gt;DefinePlugin&lt;/span&gt; &amp;#125; = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webpack&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;lt;!-- 第二步使用 --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CleanWebpackPlugin&lt;/span&gt;(),&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HtmlWebpackPlugin&lt;/span&gt;(&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;XGG&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;template&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./public/index.html&amp;quot;&lt;/span&gt;&lt;br&gt;  &amp;#125;),&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DefinePlugin&lt;/span&gt;(&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;BASE_URL&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;quot;./&amp;quot;&amp;#x27;&lt;/span&gt;&lt;br&gt;  &amp;#125;)&lt;br&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;copy-webpack-plugin&lt;/code&gt; : 将指定文件夹里面的文件复制到另一个文件夹&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;plugins&lt;/span&gt;: [&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CopyWebpackPlugin&lt;/span&gt;(&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;patterns&lt;/span&gt;:[&lt;br&gt;      &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;from&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;public&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 可以省略不写，默认会复制到output中生成的文件夹&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// to:&amp;quot;build&amp;quot;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 可以忽略不进行复制的文件&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;globOptions&lt;/span&gt;:&amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-comment&#34;&gt;// ignoreFiles:&amp;quot;index.js&amp;quot;&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;ignore&lt;/span&gt;:[&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;**/index.html&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 若是Mac的话也需要忽略该文件,该文件是记录当前文件夹的状态信息&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;**/.DS_Store&amp;quot;&lt;/span&gt;,&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;**/test.txt&amp;quot;&lt;/span&gt;&lt;br&gt;          ]&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;#125;&lt;br&gt;    ]&lt;br&gt;  &amp;#125;)&lt;br&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Webpack" />
        <updated>2020-05-19T05:51:54.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/05/15/7002_Webpack/</id>
        <title>Webpack</title>
        <link rel="alternate" href="http://example.com/2020/05/15/7002_Webpack/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;loader&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#loader&#34;&gt;#&lt;/a&gt; loader&lt;/h4&gt;
&lt;p&gt;定义:loader 可以用于对模块的源代码进行转换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;css-loader 的使用方案有三种使用方案
&lt;ol&gt;
&lt;li&gt;内联方式&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;css-loader!../css/index.css&amp;quot;&lt;/span&gt;;   &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;CLI 方式 (webpack 已经不使用)&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;webpack --&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;-bind jade-loader --&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;-bind &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;css=style-loader!css-loader&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;配置方式 (在使用多个 loader 时需要注意，webpack 加载 loader 的顺序是从后向前加载的，从下往上，从右往左)
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install css-loader -D&lt;/code&gt;  安装 css-loader &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;module&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;rules&lt;/span&gt;: [&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 匹配相关文件资源，规则使用正则表达式编写&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.css$/i&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 使用相对应loader进行解析相应的模块&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// loader:&amp;quot;css-loader&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// use:&amp;quot;css-loader&amp;quot;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;style-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;css-loader&amp;quot;&lt;/span&gt;&amp;#125;&lt;br&gt;      ]&lt;br&gt;    &amp;#125;&lt;br&gt;  ]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;css-loader的importLoaders属性&lt;/code&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;module&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;rules&lt;/span&gt;: [&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.css$/i&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;style-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;css-loader&amp;quot;&lt;/span&gt;,&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;options&lt;/span&gt;:&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;importLoaders&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;&lt;br&gt;          &amp;#125;&lt;br&gt;        &amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;postcss-loader&amp;quot;&lt;/span&gt;&amp;#125;&lt;br&gt;      ]&lt;br&gt;    &amp;#125;,&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;hljs-regexp&#34;&gt;/\.less$/i&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;style-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;css-loader&amp;quot;&lt;/span&gt;,&lt;br&gt;          &lt;span class=&#34;hljs-attr&#34;&gt;options&lt;/span&gt;:&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attr&#34;&gt;importLoaders&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;&lt;br&gt;          &amp;#125;&lt;br&gt;        &amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;postcss-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;less-loader&amp;quot;&lt;/span&gt;&amp;#125;&lt;br&gt;      ]&lt;br&gt;    &amp;#125;&lt;br&gt;  ]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：出现 CSS 文件嵌套引用时，需要使用 &lt;code&gt;importLoaders&lt;/code&gt;  属性，因为 webpack 加载 loader 的顺序是从后往前，使用该属性后可以重新倒回去再次使用后面的 loader，使用的数量根据属性值决定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;style-loader 的使用
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install style-loader -D&lt;/code&gt;  安装 style-loader&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;document.createElement(style)&lt;/code&gt;  方式在 head 中创建 style 标签，使用 css 嵌入方式编写样式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;less-loader 的使用
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install less -D&lt;/code&gt;  安装 less 工具，实现 &lt;code&gt;less&lt;/code&gt;  转换为 &lt;code&gt;css&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install less-loader -D&lt;/code&gt;  安装 less-loader&lt;/li&gt;
&lt;li&gt;webpack.config.js 编写 loader&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;module&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;rules&lt;/span&gt;: [&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;: &lt;span class=&#34;hljs-regexp&#34;&gt;/\.less$/i&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;style-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;css-loader&amp;quot;&lt;/span&gt;&amp;#125;,&lt;br&gt;        &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;less-loader&amp;quot;&lt;/span&gt;&amp;#125;&lt;br&gt;      ]&lt;br&gt;    &amp;#125;&lt;br&gt;  ]&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;file-loader 的使用
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install file-loader -D&lt;/code&gt;  安装 file-loader, 处理 &lt;code&gt;png&lt;/code&gt; 、 &lt;code&gt;jpg&lt;/code&gt;  等格式的图片，处理 &lt;code&gt;import/require()方式&lt;/code&gt; 引入的文件资源，且会将该资源放到输出的文件夹中&lt;/li&gt;
&lt;li&gt;引入图片的两种形式  &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;lt;!-- 第一种方式 --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; 图片名 &lt;span class=&#34;hljs-keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片路径&amp;quot;&lt;/span&gt;;&lt;br&gt;&amp;lt;!-- 第二种方式 --&amp;gt;&lt;br&gt;background-&lt;span class=&#34;hljs-attr&#34;&gt;image&lt;/span&gt;:&lt;span class=&#34;hljs-title function_&#34;&gt;url&lt;/span&gt;(文件路径);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;img&lt;/code&gt;  文件夹里面的图片经过 &lt;code&gt;MD4算法(散列函数处理)|(摘要算法:提取文件名核心值)&lt;/code&gt;  生成 128bit 比特位哈希值路径 (32 个十六进制)&lt;/li&gt;
&lt;li&gt;文件名和文件路径设置&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;file-loader&amp;quot;&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;options&lt;/span&gt;:&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 使用占位符placeholder,name:&amp;quot;[placeholder]&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:8].[ext]&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// outputPath:&amp;quot;img&amp;quot;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;esModule&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  ],&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;javascript/auto&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;常用的 placeholder
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[ext]&lt;/code&gt; : 处理文件的扩展名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[name]&lt;/code&gt; : 处理文件的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[hash]&lt;/code&gt; : 文件的内容，使用 MD4 散列算法处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[contentHash]&lt;/code&gt; : 在 file-loader 中效果和 &lt;code&gt;[hash]&lt;/code&gt;  结果一致，其他可能会不同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[hash:&amp;lt;length&amp;gt;]&lt;/code&gt; : 截取 hash 长度，默认 32 个字符太长&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[path]&lt;/code&gt; : 文件相对于 webpack 配置文件的路径&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;url-loader 的使用
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install url-loader -D&lt;/code&gt;  安装 url-loader&lt;/li&gt;
&lt;li&gt;工作方式与 &lt;code&gt;file-loader&lt;/code&gt;  相似，但是可以将较小的文件转成 base64 的 URI (base64 data)&lt;/li&gt;
&lt;li&gt;注意：小图片转换 base64 和页面直接一起请求，减少不必要的请求过程；大图片直接使用图片即可，若大图片也进行转换会影响页面的请求速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;limit属性&lt;/code&gt; 图片大小的最大值，小于该值就可以转换为 base64 嵌入打包文件里面，单位是字节 (Byte)&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-regexp&#34;&gt;/\.(png|jpe?g|gif|svg)$/&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;use&lt;/span&gt;:[&lt;br&gt;    &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;loader&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url-loader&amp;quot;&lt;/span&gt;,&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;options&lt;/span&gt;:&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;img/[name].[hash:8].[ext]&amp;quot;&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;limit&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;160&lt;/span&gt; * &lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;esModule&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  ],&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;javascript/auto&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;code&gt;raw-loader&lt;/code&gt; : 将一些内容转换为字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Webpack" />
        <updated>2020-05-15T01:01:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/05/11/7001_Webpack/</id>
        <title>Webpack</title>
        <link rel="alternate" href="http://example.com/2020/05/11/7001_Webpack/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h6 id=&#34;1webpack定义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1webpack定义&#34;&gt;#&lt;/a&gt; 1.webpack 定义&lt;/h6&gt;
&lt;p&gt;webpack: 一个用于现代 JavaScript 应用程序的静态模块打包工具&lt;/p&gt;
&lt;h6 id=&#34;2webpack与webpack-cli关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2webpack与webpack-cli关系&#34;&gt;#&lt;/a&gt; 2.webpack 与 webpack-cli 关系&lt;/h6&gt;
&lt;blockquote&gt;
&lt;p&gt;webpack -&amp;gt; node_modules/.bin 下 webpack -&amp;gt; 依赖 webpack-cli 的 runCli 函数 -&amp;gt; 依赖 webpack 打包&lt;br&gt;
注意：CLI:command line interface (命令行接口)&lt;br&gt;
 注意：可以越过 webpack-cli, 使用以下语句即可手动调用 webpack，一些框架中就是这样使用进行调用，比如 React、Vue 等&lt;/p&gt;
&lt;/blockquote&gt;
  &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; webpack =  &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(webpack);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; com = &lt;span class=&#34;hljs-title function_&#34;&gt;webpack&lt;/span&gt;(config);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&#34;3webpack安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3webpack安装&#34;&gt;#&lt;/a&gt; 3.webpack 安装&lt;/h6&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;npm install webpack webpack-cli -g 全局安装 &lt;br&gt;npm install webpack webpack-cli -D 局部安装&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意: &lt;code&gt;-D&lt;/code&gt;  是 &lt;code&gt;--dev-save&lt;/code&gt;  缩写&lt;/p&gt;
&lt;h6 id=&#34;4打包编译&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4打包编译&#34;&gt;#&lt;/a&gt; 4. 打包编译&lt;/h6&gt;
&lt;p&gt;webapck 执行流程：执行 &lt;code&gt;webpack&lt;/code&gt;  命令后，会寻找当前目录下 src/index.js 文件作为入口&lt;br&gt;
使用 &lt;code&gt;npm init&lt;/code&gt;  命令生成 package.json 配置文件，若添加 - y 则无需进行手动设置，自动生成 package.json 文件&lt;/p&gt;
&lt;h6 id=&#34;5使用局部本地webpack打包方法3种&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5使用局部本地webpack打包方法3种&#34;&gt;#&lt;/a&gt; 5. 使用局部 (本地) webpack 打包方法 (3 种)&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt;  命令&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;npx webpack&lt;/code&gt;  命令，(npx: 直接执行 node_modules 文件中的命令 (文件))&lt;/li&gt;
&lt;li&gt;package.json 文件里面配置以下语句，使用 &lt;code&gt;npm run build&lt;/code&gt;  即可 &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webpack&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：如果局部没有安装 webpack，那么在执行的时候就寻找全局的 webpack&lt;/p&gt;
&lt;h6 id=&#34;6指定入口文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6指定入口文件&#34;&gt;#&lt;/a&gt; 6. 指定入口文件&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;npx webapck --entry ./src/main.js --output-path ./build&lt;/code&gt;  指定入口文件为 src 文件夹里 main.js 文件，打包生成文件夹 build (较为复杂)&lt;/li&gt;
&lt;li&gt;指定入口和出口的两种方式
&lt;ol&gt;
&lt;li&gt;在 package.json 文件里配置&lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webpack --entry ./src/main.js --output-path ./build&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;新建 webpack.config.js 文件，添加相关配置 &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&amp;lt;!-- 导入node里内置的path模块 --&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; path = &lt;span class=&#34;hljs-built_in&#34;&gt;require&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;module&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;exports&lt;/span&gt; = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;entry&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./src/main.js&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;output&lt;/span&gt;: &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;filename&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bundle.js&amp;quot;&lt;/span&gt;,&lt;br&gt;    &amp;lt;!-- path只能填写绝对路径 --&amp;gt;&lt;br&gt;    &amp;lt;!-- &lt;span class=&#34;hljs-string&#34;&gt;`path.resolve(__dirname,&amp;quot;&amp;quot;)`&lt;/span&gt;可以获取当前文件的绝对路径，与第二个参数进行拼接获取完整的绝对路径 --&amp;gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;path&lt;/span&gt;:path.&lt;span class=&#34;hljs-title function_&#34;&gt;resolve&lt;/span&gt;(__dirname,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;./build&amp;quot;&lt;/span&gt;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;7手动指定webpack配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7手动指定webpack配置文件&#34;&gt;#&lt;/a&gt; 7. 手动指定 webpack 配置文件&lt;/h6&gt;
&lt;p&gt;当执行 &lt;code&gt;npm run build&lt;/code&gt;  命令后就会执行 package.json 文件中 &lt;code&gt;&amp;quot;script&amp;quot;:&amp;#123;&amp;quot;build&amp;quot;:&amp;quot;webpack&amp;quot;&amp;#125;&lt;/code&gt; , 然后会查看当前文件夹下面有没有 webpack.config.js 文件，如果有就会依赖该文件进行编译执行；如果没有的话就会寻找 &lt;code&gt;src/index.js&lt;/code&gt;  文件&lt;br&gt;
手动指定 webpack 配置文件代码如下&lt;/p&gt;
  &lt;figure class=&#34;highlight js&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs js&#34;&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;webpack --config ./webpack.config.js&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Webpack" />
        <updated>2020-05-11T07:31:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/05/04/D001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</id>
        <title>计算机组成</title>
        <link rel="alternate" href="http://example.com/2020/05/04/D001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;您好，欢迎您的阅读，等君久矣，愿与君畅谈。&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;§ 始于颜值 § 陷于才华 § 忠于人品 §&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;希望我们可以进一步交流，共同学习，共同探索未知的技术世界 &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; OR &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;存储形式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#存储形式&#34;&gt;#&lt;/a&gt; 存储形式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;真值：带有符号的数，如 - 1、+1、+2 等&lt;/li&gt;
&lt;li&gt;机器数 (符号数字化的数，计算机中定点数分为有符号数和无符号数)
&lt;ul&gt;
&lt;li&gt;有符号数 (使用原码、反码、补码三种方式来表示定点整数和定点小数，使用移码只能表示定点整数)
&lt;ul&gt;
&lt;li&gt;原码
&lt;ul&gt;
&lt;li&gt;原码就是二进制定点表示法，即最高位为符号位，“0” 表示正，“1” 表示负，其余位表示数值的大小&lt;/li&gt;
&lt;li&gt;表示范围：8 位二进制位表示范围是 - 127~+127&lt;/li&gt;
&lt;li&gt;数 0 的原码有两种形式:&lt;/li&gt;
&lt;li&gt;[+0] 原 = 00000000B&lt;/li&gt;
&lt;li&gt;[-0] 原 = 10000000B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;反码
&lt;ul&gt;
&lt;li&gt;正数的反码与其原码相同；负数的反码是符号位不变，对其原码逐位取反&lt;/li&gt;
&lt;li&gt;表示范围：8 位二进制反码的表示范围：-127～+127&lt;/li&gt;
&lt;li&gt;数 0 的反码有两种形式:
&lt;ul&gt;
&lt;li&gt;[+0] 反 = 00000000B&lt;/li&gt;
&lt;li&gt;[-0] 反 = 11111111B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;补码
&lt;ul&gt;
&lt;li&gt;模的概念，补数的概念，如 8 位二进制数，其模数为 256，计算机中两个互补的数称为补码&lt;/li&gt;
&lt;li&gt;正数的补码与其原码相同；负数的补码是在其反码的末位加 1，符号为 1&lt;/li&gt;
&lt;li&gt;表示范围：8 位二进制位表示范围是 - 127~+127&lt;/li&gt;
&lt;li&gt;与原码、反码不同，数值 0 的补码只有一个，[+0] 补 =[-0] 补 = 00000000B&lt;/li&gt;
&lt;li&gt;进行补码运算时，应注意所得结果不应超过补码所能表示数的范围&lt;/li&gt;
&lt;li&gt;采用补码后，可以方便地将减法运算转化成加法运算，运算过程得到简化。正数的补码即是它所表示的数的真值，而负数的补码的数值部份却不是它所表示的数的真值。采用补码进行运算，所得结果仍为补码&lt;/li&gt;
&lt;li&gt;二进制补码转换原码技巧：从最右边开始，遇到第一个 1 后，出符号为不变，其余位取反即可得到原码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码
&lt;ul&gt;
&lt;li&gt;将符号位取反的补码 (不区分正负)&lt;/li&gt;
&lt;li&gt;表示范围：8 位二进制位表示范围是 - 127~+127&lt;/li&gt;
&lt;li&gt;数值 0 的移码只有一个，[+0] 移 =[-0] 移 = 00000000B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;无符号数
&lt;ul&gt;
&lt;li&gt;相对有符号数而言，指的是整个机器字长的全部二进制位均表示数值位，相当于数的绝对值，因为只能表示非负数也就是 0 和正数&lt;/li&gt;
&lt;li&gt;计算机中无符号数没有原码、反码、补码、移码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;进制转化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进制转化&#34;&gt;#&lt;/a&gt; 进制转化&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;二进制 (0、1 组成)
&lt;ul&gt;
&lt;li&gt;二进制转八进制：3 位一组，一组对应一个八进制数字&lt;/li&gt;
&lt;li&gt;任意进制转十进制：采用 r 进制计数法每个位数的基数 × 该进制的位权次幂依次相加即可&lt;/li&gt;
&lt;li&gt;二进制转十六进制：4 位一组，，一组对应一个十六进制数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;八进制 (0~7 组成)
&lt;ul&gt;
&lt;li&gt;八进制转二进制：每一个八进制数字对应 3 个二进制数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十进制 (0~9 组成)
&lt;ul&gt;
&lt;li&gt;十进制转任意进制
&lt;ul&gt;
&lt;li&gt;除 x 取余倒排法 (x 代表进制数)&lt;/li&gt;
&lt;li&gt;拼凑法 (记忆一个表格)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;十六进制 (0&lt;sub&gt;9、A&lt;/sub&gt;F 组成)
&lt;ul&gt;
&lt;li&gt;十六进制转二进制：每一个十六进制数字对应 4 个二进制数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="计算机组成" />
        <updated>2020-05-04T07:36:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/04/14/C001_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
        <title>操作系统</title>
        <link rel="alternate" href="http://example.com/2020/04/14/C001_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;进程-线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程-线程&#34;&gt;#&lt;/a&gt; 进程、线程&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;进程：进程是系统进行资源分配和调度的一个独立单位，是系统中并发执行的单位，资源分配的基本单位、最小单位
&lt;ul&gt;
&lt;li&gt;运行中的程序，就被称进程&lt;/li&gt;
&lt;li&gt;一个进程的活动期间至少具备三种基本状态，即运行状态、就绪状态、阻塞状态
&lt;ul&gt;
&lt;li&gt;运行状态（Running）: 该时刻进程占用 CPU；&lt;/li&gt;
&lt;li&gt;就绪状态（Ready）: 可运行，由于其他进程处于运行状态而暂时停止运行；&lt;/li&gt;
&lt;li&gt;阻塞状态（Blocked）: 该进程正在等待某一事件发生（如等待输入 / 输出操作的完成）而暂时停止运行，这时，即使给它 CPU 控制权，它也无法运行；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程的另外两个基本状态
&lt;ul&gt;
&lt;li&gt;创建状态（new）: 进程正在被创建时的状态&lt;/li&gt;
&lt;li&gt;结束状态（Exit）: 进程正在从系统中消失时的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程的挂起状态也分为两种
&lt;ul&gt;
&lt;li&gt;阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现&lt;/li&gt;
&lt;li&gt;就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCB 进程控制块 是进程存在的唯一标识&lt;/li&gt;
&lt;li&gt;进程的描述信息
&lt;ul&gt;
&lt;li&gt;进程标识符：标识各个进程，每个进程都有一个并且唯一的标识符&lt;/li&gt;
&lt;li&gt;用户标识符：进程归属的用户，用户标识符主要为共享和保护服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程优先级：进程抢占 CPU 时的优先级&lt;/li&gt;
&lt;li&gt;CPU 中各个寄存器的值，当进程被切换时，CPU 的状态信息都会被保存在相应的 PCB 中，以便进程重新执行时，能从断点处继续执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程：线程是进程的一个实体，也是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位，有时被称为轻权进程或轻量级进程
&lt;ul&gt;
&lt;li&gt;线程是进程当中的一条执行流程，同一个进程内多个线程之间可以共享代码段、数据段、打开的文件等资源，但每个线程各自都有一套独立的寄存器和栈，这样可以确保线程的控制流是相对独立的。&lt;/li&gt;
&lt;li&gt;线程的实现主要有三种线程的实现方式
&lt;ul&gt;
&lt;li&gt;用户线程 (User Thread): 在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；&lt;/li&gt;
&lt;li&gt;内核线程 (Kernel Thread): 在内核中实现的线程，是由内核管理的线程；&lt;/li&gt;
&lt;li&gt;轻量级进程 (LightWeight Process): 在内核中来支持用户线程；&lt;/li&gt;
&lt;li&gt;用户线程与内核线程的对应关系
&lt;ul&gt;
&lt;li&gt;第一种关系是多对一的关系，也就是多个用户线程对应同一个内核线程&lt;/li&gt;
&lt;li&gt;第二种是一对一的关系，也就是一个用户线程对应一个内核线程&lt;/li&gt;
&lt;li&gt;第三种是多对多的关系，也就是多个用户线程对应到多个内核线程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户线程的整个线程管理和调度，操作系统是不直接参与的，而是由用户级线程库函数来完成线程的管理，包括线程的创建、终止、同步和调度等&lt;/li&gt;
&lt;li&gt;线程的优点
&lt;ul&gt;
&lt;li&gt;一个进程中可以同时存在多个线程&lt;/li&gt;
&lt;li&gt;各个线程之间可以并发执行&lt;/li&gt;
&lt;li&gt;各个线程之间可以共享地址空间和文件等资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程的缺点
&lt;ul&gt;
&lt;li&gt;当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C/C++ 语言，Java 语言中的线程奔溃不会造成进程崩溃&lt;/li&gt;
&lt;li&gt;内核线程是由操作系统管理的，线程对应的 TCB 自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;进程 / 线程间通信方式：进程间通信 (IPC,InterProcess Communication) 是指在不同进程之间传播或交换信息
&lt;ul&gt;
&lt;li&gt;IPC 的方式通常有管道 (包括无名管道和命名管道)、消息队列、信号量、共享存储、Socket、Streams 等，其中 Socket 和 Streams 支持不同主机上的两个进程 IPC。&lt;/li&gt;
&lt;li&gt;管道
&lt;ul&gt;
&lt;li&gt;它是半双工的，具有固定的读端和写端&lt;/li&gt;
&lt;li&gt;它只能用于父子进程或者兄弟进程之间的进程的通信&lt;/li&gt;
&lt;li&gt;它可以看成是一种特殊的文件，对于它的读写也可以使用普通的 read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命名管道
&lt;ul&gt;
&lt;li&gt;FIFO 可以在无关的进程之间交换数据，与无名管道不同&lt;/li&gt;
&lt;li&gt;FIFO 有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息队列
&lt;ul&gt;
&lt;li&gt;消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符 ID 来标识&lt;/li&gt;
&lt;li&gt;消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级&lt;/li&gt;
&lt;li&gt;消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除&lt;/li&gt;
&lt;li&gt;消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号量
&lt;ul&gt;
&lt;li&gt;信号量（semaphore）是一个计数器。用于实现进程间的互斥与同步，而不是用于存储进程间通信数据&lt;/li&gt;
&lt;li&gt;信号量用于进程间同步，若要在进程间传递数据需要结合共享内存&lt;/li&gt;
&lt;li&gt;信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作&lt;/li&gt;
&lt;li&gt;每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数&lt;/li&gt;
&lt;li&gt;支持信号量组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;共享内存
&lt;ul&gt;
&lt;li&gt;共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区&lt;/li&gt;
&lt;li&gt;共享内存是最快的一种 IPC，因为进程是直接对内存进行存取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Socket 通信：不同主机的进程间通信，那么就需要 Socket 通信，Socket 实际上不仅用于不同的主机进程间通信，还可以用于本地主机进程间通信
&lt;ul&gt;
&lt;li&gt;根据创建 Socket 的类型不同，分为三种常见的通信方式&lt;/li&gt;
&lt;li&gt;一个是基于 TCP 协议的通信方式&lt;/li&gt;
&lt;li&gt;一个是基于 UDP 协议的通信方式&lt;/li&gt;
&lt;li&gt;一个是本地进程间通信方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线程通信间的方式
&lt;ul&gt;
&lt;li&gt;同个进程下的线程之间都是共享进程的资源，只要是共享变量都可以做到线程间通信&lt;/li&gt;
&lt;li&gt;对于线程间关注的不是通信方式，而是关注多线程竞争共享资源的问题，信号量也同样可以在线程间实现互斥与同步
&lt;ul&gt;
&lt;li&gt;互斥的方式，可保证任意时刻只有一个线程访问共享资源&lt;/li&gt;
&lt;li&gt;同步的方式，可保证线程 A 应在线程 B 之前执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;并发与并行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#并发与并行&#34;&gt;#&lt;/a&gt; 并发与并行&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;并行是在不同实体上的多个事件，并发是在同一实体上的多个事件&lt;/li&gt;
&lt;li&gt;并发：指两个或多个事件在同一时间间隔发生&lt;/li&gt;
&lt;li&gt;并行：指两个或者多个事件在同一时刻发生&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;用户态和内核态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#用户态和内核态&#34;&gt;#&lt;/a&gt; 用户态和内核态&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;内核态：处于内核态的 CPU 可以访问任意的数据，并且占用 CPU 不会发生抢占情况，一般处于特权级 0 的状态我们称之为内核态&lt;/li&gt;
&lt;li&gt;用户态：处于用户态的 CPU 只能受限的访问内存，并且不允许访问外围设备，用户态下的 CPU 不允许独占，也就是说 CPU 能够被其他程序获取&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;局部性原理主要分为时间局部性和空间局部性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局部性原理主要分为时间局部性和空间局部性&#34;&gt;#&lt;/a&gt; 局部性原理：主要分为时间局部性和空间局部性。&lt;/h5&gt;
&lt;p&gt;时间局部性：如果执行了程序中的某条指令，那么不久后这条指令很有可能再次执行；如果某个数据被访问过，不久之后该数据很可能再次被访问。(因为程序中存在大量的循环)&lt;br&gt;
 空间局部性：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也很有可能被访问。(因为很多数据在内存中都是连续存放的，并且程序的指令也是顺序地在内存中存放的)&lt;/p&gt;
&lt;h5 id=&#34;异常和中断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常和中断&#34;&gt;#&lt;/a&gt; 异常和中断&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;异常：当我们在敲击键盘的同时就会产生中断，当硬盘读写完数据之后也会产生中断，所以我们需要知道，中断是由硬件设备产生的，而它们从物理上说就是电信号，它们通过中断控制器发送给 CPU，接着 CPU 判断收到的中断来自于哪个硬件设备（这定义在内核中），最后，由 CPU 发送给内核，有内核处理中断&lt;/li&gt;
&lt;li&gt;中断：CPU 处理程序的时候一旦程序不在内存中，会产生缺页异常；当运行除法程序时，当除数为 0 时，又会产生除 0 异常。所以异常是由 CPU 产生的，同时它会发送给内核，要求内核处理这些异常&lt;/li&gt;
&lt;li&gt;相同点
&lt;ul&gt;
&lt;li&gt;由 CPU 发送给内核，由内核去处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不同点
&lt;ul&gt;
&lt;li&gt;产生源不相同，异常是由 CPU 产生的，而中断是由硬件设备产生的&lt;/li&gt;
&lt;li&gt;内核需要根据是异常还是中断调用不同的处理程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中断不是时钟同步的，这意味着中断可能随时到来；异常由于是 CPU 产生的，所以它是时钟同步的，当处理中断时，处于中断上下文中；处理异常时，处于进程上下文中&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;原子操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原子操作&#34;&gt;#&lt;/a&gt; 原子操作&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作&lt;/li&gt;
&lt;li&gt;处理器会自动保证基本的内存操作的原子性。处理器保证从系统内存中读取或者写入一个字节是原子的，当一个处理器读取一个字节时，其他处理器不能访问这个字节的内存地址&lt;/li&gt;
&lt;li&gt;原子性方法
&lt;ul&gt;
&lt;li&gt;使用总线锁保证原子性&lt;/li&gt;
&lt;li&gt;使用缓存锁保证原子性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;服务器高并发解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器高并发解决方案&#34;&gt;#&lt;/a&gt; 服务器高并发解决方案&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;应用数据与静态资源分离将静态资源 (图片，视频，js,css 等) 单独保存到专门的静态资源服务器中，在客户端访问的时候从静态资源服务器中返回静态资源，从主服务器中返回应用数据&lt;/li&gt;
&lt;li&gt;客户端缓存效率比较高，消耗资源最小的就是纯静态的 html 页面，所以可以把网站上的页面尽可能用静态的来实现，在页面过期或者有数据更新之后再将页面重新缓存。或先生成静态页面，然后用 ajax 异步请求获取动态数据&lt;/li&gt;
&lt;li&gt;集群和分布式
&lt;ul&gt;
&lt;li&gt;集群是所有的服务器都有相同的功能，请求哪台都可以，主要起分流作用&lt;/li&gt;
&lt;li&gt;分布式是将不同的业务放到不同的服务器中，处理一个请求可能需要使用到多台服务器，起到加快请求处理的速度&lt;/li&gt;
&lt;li&gt;反向代理在访问服务器的时候，服务器通过别的服务器获取资源或结果返回给客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;抖动或颠簸现象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#抖动或颠簸现象&#34;&gt;#&lt;/a&gt; 抖动或颠簸现象&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;刚刚换出的页面马上又要换入内存，刚刚换入的页面马上又要换出外存，这种频繁的页面调度行为称为抖动或颠簸&lt;/li&gt;
&lt;li&gt;产生抖动的主要原因是进程频繁访问的页面数目高于可用的物理块数 (分配给进程的物理块不够)&lt;/li&gt;
&lt;li&gt;为进程分配的物理块太少，会使进程发生抖动现象；为进程分配的物理块太多，又会降低系统整体的并发度，降低某些资源的利用率，为了研究应该为每个进程分配多少个物理块，Denning 提出了&lt;strong&gt;进程工作集&lt;/strong&gt;的概念&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="操作系统" />
        <updated>2020-04-14T13:56:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/04/08/5002_React/</id>
        <title>React</title>
        <link rel="alternate" href="http://example.com/2020/04/08/5002_React/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;组件通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件通信&#34;&gt;#&lt;/a&gt; 组件通信&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父子组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父组件传递子组件数据通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;父组件通过 &lt;code&gt;属性=值&lt;/code&gt; 的形式来传递给子组件数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子组件通过 &lt;code&gt;props&lt;/code&gt;  参数获取父组件传递过来的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类组件之间传参&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;class Children extends Component&amp;#123;&lt;br&gt;  // 构造方法，方式一&lt;br&gt;  // constructor(props)&amp;#123;&lt;br&gt;  //   super();&lt;br&gt;  //   this.props = props;&lt;br&gt;  // &amp;#125;     &lt;br&gt;  &lt;br&gt;  // 构造方法，方式二&lt;br&gt;  // constructor(props)&amp;#123;&lt;br&gt;  //   super(props);&lt;br&gt;  // &amp;#125;&lt;br&gt;  // 构造方法，方式三&lt;br&gt;  // 不写，子类的默认构造方法可以省略&lt;br&gt;  render()&amp;#123;&lt;br&gt;    const &amp;#123; name,age,height &amp;#125; = this.props;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;h2&amp;gt;子组件显示数据:&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;export default class App extends Component &amp;#123;&lt;br&gt;  render() &amp;#123;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;Children name=&amp;quot;why&amp;quot; age=&amp;quot;20&amp;quot; height=&amp;quot;188&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;        &amp;lt;Children name=&amp;quot;GXX&amp;quot; age=&amp;quot;22&amp;quot; height=&amp;quot;172&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数组件之间传参&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;function Children(props) &amp;#123;&lt;br&gt;  const &amp;#123; name,age,height &amp;#125; = props;&lt;br&gt;  return (&lt;br&gt;    &amp;lt;div&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;App_函数组件&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;    &amp;lt;/div&amp;gt;&lt;br&gt;  )&lt;br&gt;&amp;#125;&lt;br&gt;export default class App extends Component &amp;#123;&lt;br&gt;  render() &amp;#123;&lt;br&gt;    return (&lt;br&gt;      &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;Children name=&amp;quot;why&amp;quot; age=&amp;quot;20&amp;quot; height=&amp;quot;188&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;        &amp;lt;Children name=&amp;quot;GXX&amp;quot; age=&amp;quot;22&amp;quot; height=&amp;quot;172&amp;quot;&amp;gt;&amp;lt;/Children&amp;gt; &lt;br&gt;      &amp;lt;/div&amp;gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组件参数类型验证&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs react&#34;&gt;import PropTypes from &amp;#x27;prop-types&amp;#x27;&lt;br&gt;function Children(props) &amp;#123;&lt;br&gt;  const &amp;#123; name,age,height,names&amp;#125; = props;&lt;br&gt;  return (&lt;br&gt;    &amp;lt;div&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;App_函数组件&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;h2&amp;gt;&amp;#123;name+&amp;quot; &amp;quot;+age+&amp;quot; &amp;quot;+height&amp;#125;&amp;lt;/h2&amp;gt;&lt;br&gt;      &amp;lt;ul&amp;gt;&lt;br&gt;        &amp;#123;&lt;br&gt;          names.map((item,index)=&amp;gt;&amp;#123;&lt;br&gt;            return &amp;lt;li&amp;gt;&amp;#123;item&amp;#125;&amp;lt;/li&amp;gt;&lt;br&gt;          &amp;#125;)&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;lt;/ul&amp;gt;&lt;br&gt;    &amp;lt;/div&amp;gt;&lt;br&gt;  )&lt;br&gt;&amp;#125;&lt;br&gt;// 设置属性类型验证&lt;br&gt;Children.propsTypes = &amp;#123;&lt;br&gt;  name:PropTypes.string.isRequired,&lt;br&gt;  age:PropTypes.number,&lt;br&gt;  height:PropTypes.number,&lt;br&gt;  names:PropTypes.array&lt;br&gt;&amp;#125;&lt;br&gt;// 设置属性默认值&lt;br&gt;Children.defaultProps = &amp;#123;&lt;br&gt;  name:&amp;quot;XGG&amp;quot;,&lt;br&gt;  age:12,//默认类型也会进行类型判断&lt;br&gt;  height:199,&lt;br&gt;  names:[&amp;quot;123&amp;quot;,&amp;quot;456&amp;quot;,&amp;quot;789&amp;quot;]&lt;br&gt;&amp;#125;&lt;br&gt;// 补充：类组件的相关属性编写规范&lt;br&gt;class Children2 extends Component&amp;#123;&lt;br&gt;  //es6中class fields写法，给类上添加属性，而非对象上&lt;br&gt;  static propsTypes =&amp;#123;&lt;br&gt;  &amp;#125;&lt;br&gt;  static defaultProps =&amp;#123;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;Children2.propsTypes = &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子组件传递父组件通信&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父组件给子组件传递一个回调函数，在子组件中调用这个函数即可&lt;/li&gt;
&lt;li&gt;子组件可以通过该回调函数向父组件传递参数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟插槽样式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跨组件通信 (数据传递)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照层次依次传递： &lt;code&gt;Spread Attributes&lt;/code&gt; ，可以使用&lt;strong&gt;属性展开符： &lt;code&gt;...&lt;/code&gt; &lt;/strong&gt;，但是此方案对于中间层会存在冗余操作&lt;/li&gt;
&lt;li&gt;使用 ReactAPI: &lt;code&gt;Context&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;React.createContext&lt;/code&gt; : 创建一个需要共享的对象，若某组件订阅 &lt;code&gt;Context&lt;/code&gt;  时该组件会从距离自身最近的匹配 &lt;code&gt;Provider&lt;/code&gt;  中读取到当前 &lt;code&gt;Context&lt;/code&gt;  值， &lt;code&gt;defaultValue&lt;/code&gt;  是组件在顶层查找过程中没有找到对应的 &lt;code&gt;Provider&lt;/code&gt; , 就会使用默认值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;context.Provider&lt;/code&gt; : 在创建 &lt;code&gt;Context对象&lt;/code&gt;  (context) 时会返回一个 &lt;code&gt;Provider React组件&lt;/code&gt; ，它允许消费组件订阅 &lt;code&gt;Context&lt;/code&gt;  变化， &lt;code&gt;Provider&lt;/code&gt;  接收一个属性 &lt;code&gt;value&lt;/code&gt;  属性传递给消费组件，一个 &lt;code&gt;Provider&lt;/code&gt;  可以和多个消费组件有对应关系，多个 &lt;code&gt;Provider&lt;/code&gt;  可以嵌套使用，里层会覆盖外层数据；当 &lt;code&gt;Provider&lt;/code&gt;  的 &lt;code&gt;value&lt;/code&gt;  值发生变化时，它内部所有的消费组件都会重新渲染&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextType&lt;/code&gt; : 挂载在 &lt;code&gt;class&lt;/code&gt;  上的 &lt;code&gt;contextType&lt;/code&gt;  属性会被重新赋值为一个由 &lt;code&gt;React.createContext&lt;/code&gt;  创建的 &lt;code&gt;Context&lt;/code&gt;  对象，这可以使用 &lt;code&gt;this.context&lt;/code&gt;  来获取最近 &lt;code&gt;Context&lt;/code&gt;  上的值；可以在任何生命周期中访问到，包括 &lt;code&gt;render&lt;/code&gt;  函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Consumer&lt;/code&gt; : React 组件可以订阅到 context 变化，可以在函数式组件中完成订阅 context，需要函数作为子元素，该函数接收当前的 context 值，返回一个 React 节点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;events&lt;/code&gt; （全局事件传递）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;npm install events&lt;/code&gt; : 安装&lt;/li&gt;
&lt;li&gt;常用 API
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;eventBus对象&lt;/code&gt; ：创建 EventEmitter 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.emit(&amp;quot;事件名称&amp;quot;,参数列表)&lt;/code&gt; : 发出事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.addListener(&amp;quot;事件名称&amp;quot;,监听函数)&lt;/code&gt; : 监听事件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eventBus.removeListener(&amp;quot;事件名称&amp;quot;,监听函数)&lt;/code&gt; : 移除事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="React" />
        <updated>2020-04-08T11:47:56.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/04/06/5001_React/</id>
        <title>React</title>
        <link rel="alternate" href="http://example.com/2020/04/06/5001_React/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;react选择jsx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#react选择jsx&#34;&gt;#&lt;/a&gt; React 选择 JSX&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;jsx 是嵌入到 JavaScript 中的一种结构语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jsx 顶层只能有一个根元素，通常在 jsx 的外层包裹着一个小括号 ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果是单标签必须以 &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt;  结尾，否则报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释的方式： &lt;code&gt;&amp;#123;/*我是注释*/&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中是否显示&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接显示： &lt;code&gt;number&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;array&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不显示内容为空： &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、 &lt;code&gt;Boolean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;附加：若想让其显示的措施为：布尔类型直接使用 tostring 方法，另外两个使用 totring 包裹或者添加一个空字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** &lt;code&gt;对象类型&lt;/code&gt;  ** 不能作为 jsx 的子类，不能直接放在 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中显示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  嵌入表达式：运算表达式、三元运算符、执行一个函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定属性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绑定普通属性&lt;/li&gt;
&lt;li&gt;绑定 class 属性: &lt;code&gt;className&lt;/code&gt; 、 &lt;code&gt;htmlFor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;绑定 style 属性: &lt;code&gt;style=&amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绑定事件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;关于 &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式1.1：bind绑定this(显示绑定)*/&lt;/span&gt;&amp;#125;&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;)&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式1.2：在constructor中统一绑定事件*/&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;   &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;   &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;...&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;...&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式2：定义函数时，使用箭头函数，箭头函数中永远不绑定this，会向上即最近作用域寻找当前对象*/&lt;/span&gt;&amp;#125;&lt;br&gt;...&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;add&lt;/span&gt;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;...&lt;br&gt;add = &lt;span class=&#34;hljs-function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;counter&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;/*方式3(推荐)：直接传入一个箭头函数，在箭头函数中调用需要执行的函数*/&lt;/span&gt;&amp;#125;&lt;br&gt;&amp;lt;button onClick=&amp;#123;&lt;span class=&#34;hljs-function&#34;&gt;()=&amp;gt;&lt;/span&gt;&amp;#123;&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;()&amp;#125;&amp;#125;&amp;gt;按钮&amp;lt;/button&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传递参数&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;movies&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;天下无敌&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;奇门遁甲&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;十面埋伏&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;您好，李焕英&amp;quot;&lt;/span&gt;]&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;liClick&lt;/span&gt; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;liClick&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;this.liClick&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;按钮&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            this.state.movies.map((item,index,arr)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;(event)&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;this.liClick(item,index,event)&amp;#125;&amp;#125;&amp;gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;liClick&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;item,index,event&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;点击按钮&amp;quot;&lt;/span&gt;,item,index);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件渲染&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;isLogin&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123;isLogin&amp;#125; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; welcome = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; btnText = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (isLogin) &amp;#123;&lt;br&gt;      welcome = &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;欢迎回来&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      btnText = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;退出&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;      welcome = &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;请先登录&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      btnText = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;登录&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &amp;#123;welcome&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;onClick&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;#123;event&lt;/span&gt;=&amp;gt;&lt;/span&gt;&amp;#123;this.loginClick()&amp;#125;&amp;#125;&amp;gt;&amp;#123;isLogin?&amp;quot;退出&amp;quot;:&amp;quot;登录&amp;quot;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;hr&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;isLogin?&amp;quot;GXX&amp;quot;:null&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &amp;#123;isLogin&amp;amp;&amp;amp;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;GXX&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;loginClick&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;setState&lt;/span&gt;(&amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;isLogin&lt;/span&gt;: !&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;isLogin&lt;/span&gt;&lt;br&gt;    &amp;#125;)&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;列表渲染&lt;/p&gt;
&lt;figure class=&#34;highlight jsx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs jsx&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_ inherited__&#34;&gt;React.Component&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;constructor&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;props&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;super&lt;/span&gt;(props);&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt; = &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;names&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cba&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;nba&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;],&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;nums&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;44&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;66&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;33&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;88&amp;quot;&lt;/span&gt;]&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; &amp;#123; names,nums &amp;#125; = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;state&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (&lt;br&gt;      &lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;列表渲染1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            names.map((item,index,arr)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;数字列表渲染2(过滤)&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            nums.filter((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return item&amp;gt;=30;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;).map((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;数字列表渲染3(截取)&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            nums.slice(0,3).map((item)=&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;              return &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;item&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-xml&#34;&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    )&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;ReactDOM&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;render&lt;/span&gt;(&lt;span class=&#34;language-xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;App&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jsx&lt;/code&gt;  的本质&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;jsx&lt;/code&gt;  是 &lt;code&gt;React.createElement(component,props,...children)&lt;/code&gt;  函数的语法糖，将会转换成 &lt;code&gt;React.createElement()&lt;/code&gt;  函数调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;React.createElement()&lt;/code&gt;  需要三个参数 ( &lt;code&gt;源码讲解&lt;/code&gt; )
&lt;ol&gt;
&lt;li&gt;参数一：type
&lt;ol&gt;
&lt;li&gt;当前 ReactElement 的类型&lt;/li&gt;
&lt;li&gt;标签元素，字符串表示 &lt;code&gt;&amp;quot;div&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;组件元素，组件名称&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;参数二：config
&lt;ol&gt;
&lt;li&gt;所有的 jsx 属性都在 config 中以对象的属性和值的形式存储&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;参数三：children
&lt;ol&gt;
&lt;li&gt;存放在标签中的内容，以 children 数组的方式进行存储&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;遍历 &lt;code&gt;React.createElement函数中的参数&lt;/code&gt; &lt;br&gt;
&lt;img src=&#34;../../all_photo/React.createElement%E5%87%BD%E6%95%B0_%E6%BA%90%E7%A0%81.png&#34; alt=&#34;image-20220608201741842&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;jsx-&amp;gt;通过React.createElement函数-&amp;gt;创建ReactElement(对象)-&amp;gt;组成JavaScript的对象树(虚拟DOM)-&amp;gt;通过ReactDOM.render函数-&amp;gt;映射成浏览器中的真实DOM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsx-&amp;gt;通过React.createElement函数-&amp;gt;创建ReactElement(对象)-&amp;gt;组成JavaScript的对象树(虚拟DOM)-&amp;gt;通过ReactDOM.render函数-&amp;gt;原生的控件(UIButton/Button)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么使用虚拟 DOM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;很难跟踪状态发生的改变&lt;/li&gt;
&lt;li&gt;操作真实 DOM 性能较低
&lt;ol&gt;
&lt;li&gt;创建出来的对象较复杂&lt;/li&gt;
&lt;li&gt;DOM 操作会引起浏览器的回流和重绘，因此在开发中避免频繁 DOM 操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟 DOM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由命令式转换为声明式编程&lt;/li&gt;
&lt;li&gt;UI 以虚拟的方式保存在内存中，并且是 JavaScript 对象&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;ReactDOM.render()&lt;/code&gt;  让虚拟 DOM 和真实 DOM 同步起来，这个过程叫作协调&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="React" />
        <updated>2020-04-06T00:20:45.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/03/12/A001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
        <title>计算机网络</title>
        <link rel="alternate" href="http://example.com/2020/03/12/A001_%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;计算机网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#计算机网络&#34;&gt;#&lt;/a&gt; 计算机网络&lt;/h4&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&#34;1计网体系结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1计网体系结构&#34;&gt;#&lt;/a&gt; 1. 计网体系结构&lt;/h5&gt;
&lt;h6 id=&#34;1计算机网络概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1计算机网络概述&#34;&gt;#&lt;/a&gt; 1. 计算机网络概述&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;认识计算机网络&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;理解记忆，抓住重点（典型网络、协议、网络设备）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机网络：一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统。计算机网络是互连的、自治的计算机集合。互连：通过通信链路互联互通；自治：无主从关系&lt;/li&gt;
&lt;li&gt;网络：把许多计算机连接在一起&lt;/li&gt;
&lt;li&gt;互联网：把许多网络连接在一起&lt;/li&gt;
&lt;li&gt;因特网：是世界上最大的互联网。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;组成部分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;硬件&lt;/li&gt;
&lt;li&gt;软件&lt;/li&gt;
&lt;li&gt;协议（一系列的规则和约定）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工作方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;边缘部分：用户直接使用（端与端之间通信是进程通信）
&lt;ol&gt;
&lt;li&gt;通信方式一：C/S 方式：移动端和服务器、B/S 方式：浏览器和服务器&lt;/li&gt;
&lt;li&gt;通信方式二：P2P 方式（同时是客户端与服务器，两者都是对等的，人人为我，我为人人，机器越多，下载越快）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;核心部分 ：为边缘部分提供服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通信子网：实现数据通信&lt;/li&gt;
&lt;li&gt;资源子网：实现资源共享 / 数据处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![image-20220621113503905](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621113503905.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据通信&lt;/li&gt;
&lt;li&gt;资源共享：同一个计算机网络上的其他计算机可使用某台计算机的计算机资源的行为，可共享硬件、软件、数据&lt;/li&gt;
&lt;li&gt;分布式处理：多台计算机各自承担同一工作任务的不同部分，如 Hadoop 平台
&lt;ol&gt;
&lt;li&gt;提高可靠性&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按分布范围
&lt;ol&gt;
&lt;li&gt;广域网 WAN：交换技术&lt;/li&gt;
&lt;li&gt;城域网 MAN&lt;/li&gt;
&lt;li&gt;局域网 LAN：广播技术&lt;/li&gt;
&lt;li&gt;个人区域网 PAN&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按使用者
&lt;ol&gt;
&lt;li&gt;公用网：中国电信&lt;/li&gt;
&lt;li&gt;专用网：军队、政府&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按交换技术
&lt;ol&gt;
&lt;li&gt;电路交换：电话（占用）&lt;/li&gt;
&lt;li&gt;报文交换：（存储转发）&lt;/li&gt;
&lt;li&gt;分组交换：（存储转发）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按拓扑结构
&lt;ol&gt;
&lt;li&gt;总线型&lt;/li&gt;
&lt;li&gt;星型&lt;/li&gt;
&lt;li&gt;环型&lt;/li&gt;
&lt;li&gt;网状型：常用于广域网&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按传输技术
&lt;ol&gt;
&lt;li&gt;广播式网络：共享公共通信信道&lt;/li&gt;
&lt;li&gt;点对点网络：使用分组存储转发和路由选择机制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准化工作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要实现不同厂商的硬件、软件之间相互联通，必须遵从统一的标准&lt;/li&gt;
&lt;li&gt;法定标准：由权威机构制定的正式、合法的标准（ISO/OSI）&lt;/li&gt;
&lt;li&gt;事实标准：某些公司在竞争中占据主流，成为标准（TCP/IP）&lt;/li&gt;
&lt;li&gt;RFC (因特网标准的形式) 成为正式标准四个阶段：因特网草案、建议标准、草案标准（2013 已取消）、因特网标准&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关组织&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;国际标准化组织 ISO：ISO/OSI 模型、HDLC 协议&lt;/li&gt;
&lt;li&gt;国际电信联盟 ITU：制定通信规则&lt;/li&gt;
&lt;li&gt;电器和电子工程师协会 IEEE：学术机构、5G、&lt;/li&gt;
&lt;li&gt;Internet 工程任务组 IETF: 负责因特网相关标准的制定、RFC&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;性能指标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;速率：即数据率或称数据传输率或比特率，连接在计算机网络上的主机在数字信道上传送数据位数的速率，单位是 b/s，kb/s，Mb/s，Gb/s，Tb/s		（补充：1/0 为比特位）&lt;/p&gt;
&lt;p&gt;![image-20220621124312010](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621124312010.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带宽：计算机网络中，带宽用来表示&lt;strong&gt;网络的通信线路传送数据的能力&lt;/strong&gt;，通常是指单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”, 单位是 “比特每秒”，b/s，kb/s，Mb/s，Gb/s（&lt;strong&gt;网络设备所支持的最高速度&lt;/strong&gt;）理解：最大发射数据的数据率。指的是发送数据率、传输数据率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;吞吐量：表示在单位时间内通过某个网络（或信道、接口）的数据量。单位 b/s，kb/s，Mb/s 等，吞吐量受网络的带宽或网络的额定速率的限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时延：指数据 (报文、分组、比特流) 从网络 (链路) 的一端传送到另一端所需的时间。也叫延迟、迟延，单位是 &lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;发送时延 (传输时延)：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传播时延：取决于电磁波传播速度和链路长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;排队时延：等待输出 / 入链路可用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理时延：检错找出口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;高速链路：指的是发送速率提高，不会影响到电磁波的传播速率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算公式&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;发送时延：&lt;/mtext&gt;&lt;mfrac&gt;&lt;mtext&gt;数据长度&lt;/mtext&gt;&lt;mrow&gt;&lt;mtext&gt;信道带宽&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;发送速率&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;mtext&gt;    传播时延：&lt;/mtext&gt;&lt;mfrac&gt;&lt;mtext&gt;信道长度&lt;/mtext&gt;&lt;mtext&gt;电磁波在信道上的传播速率&lt;/mtext&gt;&lt;/mfrac&gt;&lt;mtext&gt;    时延带宽积&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mtext&gt;：&lt;/mtext&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mtext&gt;传播时延&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;mtext&gt;带宽&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;发送时延：\frac{数据长度}{信道带宽(发送速率)}\ \ \ \ 传播时延：\frac{信道长度}{电磁波在信道上的传播速率}\ \ \ \ 时延带宽积(bit)：\frac{传播时延(s)}{带宽(b/s)}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.363em;vertical-align:-0.936em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;速&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;长&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.936em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;播&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.36033em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;电&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;磁&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;波&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;在&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;上&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;播&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;速&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;长&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;积&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.427em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;播&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;时&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;延&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.936em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时延带宽积：又称为以比特为单位的链路长度，“某段链路现在有多少比特”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;往返时间 RTT：从发送方发送数据开始，到发送方收到接收方的确认 (接收方收到数据后立即发送确认), 总共经历的时延，RTT 越大。在收到确认之前，可以发送的数据越多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;往返时延 RTT 包括&lt;strong&gt;往返传播时延 = 传播时延 × 2 + 末端处理时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用率&lt;/p&gt;
&lt;p&gt;![image-20220621142024345](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621142024345.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因特网络发展阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一阶段：阿帕网–&amp;gt; 互联网–&amp;gt; 因特网&lt;/li&gt;
&lt;li&gt;第二阶段：三级结构&lt;/li&gt;
&lt;li&gt;第三阶段：多层次 ISP 结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;2体系结构参考模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2体系结构参考模型&#34;&gt;#&lt;/a&gt; 2. 体系结构 &amp;amp; 参考模型&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分层结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实体：指的是每一层的活动元素&lt;/li&gt;
&lt;li&gt;对等实体：同一层的实体&lt;/li&gt;
&lt;li&gt;分层原则
&lt;ol&gt;
&lt;li&gt;各层之间相互独立，每层只实现一种相对独立的功能&lt;/li&gt;
&lt;li&gt;每层之间界面自然清晰，易于理解，相互交流尽可能少&lt;/li&gt;
&lt;li&gt;结构上可分割开，每层都采用最合适的技术来实现&lt;/li&gt;
&lt;li&gt;保持下层对上层的独立性，上层单向使用下层提供的服务&lt;/li&gt;
&lt;li&gt;整个分层结构应该能促进标准化工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络协议：为进行网络中的对等实体数据交换而建立的规则、标准或约定（&lt;strong&gt;水平&lt;/strong&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;语法：规定传输数据的格式&lt;/li&gt;
&lt;li&gt;语义：规定所要完成的功能&lt;/li&gt;
&lt;li&gt;同步：规定各种操作的顺序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接口：上层使用下层服务的入口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务：下层为相邻上层提供的功能调用，上层使用下层服务，下级为上级提供服务（&lt;strong&gt;单向、垂直&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据包含关系&lt;/p&gt;
&lt;p&gt;![image-20220621162003918](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621162003918.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;概念总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络体系结构是从&lt;strong&gt;功能上&lt;/strong&gt;描述计算机网络结构，计算机网络体系结构简称网络体系结构是&lt;strong&gt;分层结构&lt;/strong&gt;，每层遵循某个 / 些网络协议以完成本层功能，&lt;strong&gt;计算网络体系结构是计算机网络的各层及协议的集合&lt;/strong&gt;。第 n 层在向第 n+1 层提供服务时，此服务不仅包括第 n 层本身的功能，还包含由下层服务提供的功能，仅仅在相邻间有接口，且所有的具体实现细节对上一层完全屏蔽，体系结构是抽象的，而实现是指能运行的一些软件和硬件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ISO/OSI 参考模型&lt;/strong&gt; (7 层、法定标准)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为了解决计算机网络复杂问题，提出按功能分层结构，，目的是支持异构网络系统的互联互通，每层完成特定的功能&lt;/li&gt;
&lt;li&gt;应用层
&lt;ol&gt;
&lt;li&gt;资源子网 (数据处理)、端到端&lt;/li&gt;
&lt;li&gt;用户和网络的界面，面向用户的，所有能和用户交互&lt;strong&gt;产生网络流量&lt;/strong&gt;的程序，联网可以操作的程序如：QQ、电子邮件&lt;/li&gt;
&lt;li&gt;相关协议：文件传输 (FTP)、电子邮件 (SMTP)、万维网 (HTTP)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;表示层
&lt;ol&gt;
&lt;li&gt;资源子网 (数据处理)、端到端&lt;/li&gt;
&lt;li&gt;表示、呈现屏幕上，用于处理两个通信系统中交换信息的表示方式（语法、语义），相关协议：JPEG、ASCII&lt;/li&gt;
&lt;li&gt;功能一：数据格式转换 (翻译官角色)&lt;/li&gt;
&lt;li&gt;功能二：数据加密解密&lt;/li&gt;
&lt;li&gt;功能三 ：数据的压缩和恢复&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;会话层
&lt;ol&gt;
&lt;li&gt;资源子网 (数据处理)、端到端&lt;/li&gt;
&lt;li&gt;向表示层实体 / 用户进程提供&lt;strong&gt;建立连接&lt;/strong&gt;并在连接上有序的传输数据，也称为建立同步&lt;/li&gt;
&lt;li&gt;功能一：建立、管理、终止会话&lt;/li&gt;
&lt;li&gt;功能二：使用校验点可使会话在通信失效时从校验点 / 同步点继续恢复通信，实现数据同步，适用于传输大文件&lt;/li&gt;
&lt;li&gt;相关协议：ADSP、ASP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;传输层
&lt;ol&gt;
&lt;li&gt;端到端 (进程与进程之间通信)&lt;/li&gt;
&lt;li&gt;负责主机中两个进程的通信，即端到端的通信。&lt;strong&gt;传输单位是报文、用户数据报&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;功能一：可靠传输、不可靠传输&lt;/li&gt;
&lt;li&gt;功能二：差错控制&lt;/li&gt;
&lt;li&gt;功能三：流量控制（不是手机流量，指的是发送速度）&lt;/li&gt;
&lt;li&gt;功能四：复用分用    （&lt;strong&gt;记忆口诀：可差留用&lt;/strong&gt;）
&lt;ol&gt;
&lt;li&gt;复用：多个应用层进程可同时使用下面运输层的服务&lt;/li&gt;
&lt;li&gt;分用：运输层把收到的信息分别交付给上面应用层中相应的进程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;相关协议：TCP、UDP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;网络层
&lt;ol&gt;
&lt;li&gt;通信子网 (数据通信)、点到点&lt;/li&gt;
&lt;li&gt;主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。&lt;strong&gt;网络层传输单位是数据报&lt;/strong&gt;，分组：指的是若数据报过长，就会切割为一个个小的分组&lt;/li&gt;
&lt;li&gt;功能一：路由选择（最佳路径）&lt;/li&gt;
&lt;li&gt;功能二：流量控制&lt;/li&gt;
&lt;li&gt;功能三：差错控制&lt;/li&gt;
&lt;li&gt;功能四：拥塞控制，即若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态，因此要采取一定措施，缓解这种拥塞&lt;/li&gt;
&lt;li&gt;相关协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据链路层
&lt;ol&gt;
&lt;li&gt;通信子网 (数据通信)、点到点、（首尾均添加信息）&lt;/li&gt;
&lt;li&gt;主要任务是把网络层传下来的数据报组装成帧。&lt;strong&gt;数据链路层 / 链路层的传输单位是帧&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;功能一：成帧（定义帧的开始和结束）&lt;/li&gt;
&lt;li&gt;功能二：差错控制（帧错 + 位错）&lt;/li&gt;
&lt;li&gt;功能三：流量控制&lt;/li&gt;
&lt;li&gt;功能四：访问（接入）控制（控制对信道的访问）&lt;/li&gt;
&lt;li&gt;相关协议：SDLC、HDLC、PPP、STP&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;物理层
&lt;ol&gt;
&lt;li&gt;通信子网 (数据通信)、点到点、（不添加信息不做处理，形成 0/1 形式放在传输介质上）&lt;/li&gt;
&lt;li&gt;主要任务是在物理媒体上实现比特流的透明传输，物理层传输单位是比特。透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送&lt;/li&gt;
&lt;li&gt;功能一：定义接口特性&lt;/li&gt;
&lt;li&gt;功能二：定义传输模式&lt;/li&gt;
&lt;li&gt;功能三：定义传输速率&lt;/li&gt;
&lt;li&gt;功能四：比特同步（单工、半双工、双工）&lt;/li&gt;
&lt;li&gt;功能五：比特编码&lt;/li&gt;
&lt;li&gt;相关协议：Rj45、802.3&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记忆口诀：物联网淑慧试用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP/IP 参考模型&lt;/strong&gt; (4 层、事实标准)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OSI 定义三点：服务、协议、接口&lt;/li&gt;
&lt;li&gt;OSI 先出现，参考模型先于协议发明，不偏向特定协议&lt;/li&gt;
&lt;li&gt;TCP/IP 设计之初就考虑到异构网互联问题，将 IP 作为重要层次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相同点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两者都分层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于独立的协议栈的概念&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以实现异构网络互联&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;图解&lt;/p&gt;
&lt;p&gt;![image-20220621174245136](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621174245136.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向连接分为三个阶段&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一阶段：段建立连接，发出一个建立连接的请求&lt;/li&gt;
&lt;li&gt;第二阶段：只有在连接成功建立之后，才能开始数据传输&lt;/li&gt;
&lt;li&gt;第三阶段：当数据传输完毕，必须释放连接&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向无连接没有这么多阶段，它直接进行数据传输&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图解&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![image-20220621173437248](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621173437248.png)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充：5 层参考模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;![image-20220621175126771](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621175126771.png)&lt;/p&gt;
&lt;p&gt;![image-20220621175437248](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621175437248.png)&lt;/p&gt;
&lt;h5 id=&#34;2物理层&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2物理层&#34;&gt;#&lt;/a&gt; 2. 物理层&lt;/h5&gt;
&lt;h6 id=&#34;1通信基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1通信基础&#34;&gt;#&lt;/a&gt; 1. 通信基础&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;物理层主要任务&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定与传输媒体接口有关的一些特性：定义标准&lt;/li&gt;
&lt;li&gt;机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、&lt;strong&gt;引线数目、引脚数量&lt;/strong&gt;和排列情况&lt;/li&gt;
&lt;li&gt;电气特性：规定传输二进制位时，线路上信号的&lt;strong&gt;电压范围&lt;/strong&gt;、阻抗匹配、传输速率和&lt;strong&gt;距离&lt;/strong&gt;限制等（有数字，电压）&lt;/li&gt;
&lt;li&gt;功能特性：指明某条线上出现的&lt;strong&gt;某一电平表示何种意义&lt;/strong&gt;，接口部件的信号线的用途（无数字，电平高低）&lt;/li&gt;
&lt;li&gt;规程特性：(过程特性) 定义各条物理线路的工作&lt;strong&gt;规程和时序&lt;/strong&gt;关系&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据通信模型&lt;/p&gt;
&lt;p&gt;![image-20220622213950101](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622213950101.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信的目的是传送消息（消息：语音、文字、图像、视频等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据 data：传送信息的实体，通常是有意义的符号序列。数据通信指在不同计算机之间传输表示信息的二进制数 0、1 序列的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信号：数据的电气 / 电磁的表现，是数据在传输过程中的存在形式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字信号 / 离散信号：代表消息的参数的取值是离散的&lt;/li&gt;
&lt;li&gt;模拟信号 / 连续信号：代表消息的参数的取值是连续的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信源：产生和发送数据的源头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信宿：接收数据的终点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信道：信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按传输介质分：无线信道、有线信道&lt;/li&gt;
&lt;li&gt;按传输信号分：模拟信道、数字信道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通信方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道（广播）&lt;/li&gt;
&lt;li&gt;半双工通信 / 双相交替通信：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道（对讲机）&lt;/li&gt;
&lt;li&gt;全双工通信 / 双向同时通信：通信双方可以同时发送和接受信息，也需要两条信道（打电话）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据传输方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;串行传输
&lt;ol&gt;
&lt;li&gt;将表示一个字符的 8 位二进制数按由低位到高位的顺序依次发送&lt;/li&gt;
&lt;li&gt;速度慢，费用低，适合远距离&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;并行传输
&lt;ol&gt;
&lt;li&gt;将表示一个字符的 8 位二进制数同时通过 8 条信道发送&lt;/li&gt;
&lt;li&gt;速度快，费用高，适合近距离（用于计算机内部数据传输）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现字符同步&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同步传输：在同步传输的模式下，数据的传送是以一个&lt;strong&gt;数据区块&lt;/strong&gt;为单位，因此同步传输又称为区块传输。在传送数据时，需先送出 1 个或多个同步字符，再送出整批的数据（时钟同步）&lt;/li&gt;
&lt;li&gt;异步传输：异步传输将比特分成小组进行传送，小组可以是 8 位的 1 个字符或更长。发送方可以在任何时刻发送这些比特组，而接收方不知道它们会在什么时候到达。传送数据时，&lt;strong&gt;加一个字符起始位和一个字符终止位&lt;/strong&gt;（键盘打字）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;码元：码元是指用一个固定时长的信号波形（数字脉冲），代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为 k 进制码元，而该时长称为码元宽度。当码元的离散状态有 M 个时（M 大于 2），此时码元为 M 进制码元。&lt;strong&gt;1 码元可以携带多个比特的信息量&lt;/strong&gt;。例如，在使用二进制编码时，只有两种不同的码元，一种代表 0 状态，另一种代表 1 状态。4 进制码元，可以携带 2b 信息量；16 进制码元，可以携带 4b 信息量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数字通信系统数据传输速率的两种表示方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;速率也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用码元传输速率和信息传输速率表示&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;码元传输速率&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数 (也可称为&lt;strong&gt;脉冲个数或信号变化的次数&lt;/strong&gt;), 单位是波特 (Baud)。1 波特表示数字通信系统每秒传输一个码元&lt;/li&gt;
&lt;li&gt;一秒钟传输多少个码元&lt;/li&gt;
&lt;li&gt;数字信号有多进制和二进制之分，但码元速率与进制数无关，只与码元长度 T 有关&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;mtext&gt;：&lt;/mtext&gt;&lt;mfrac&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;T&lt;/mi&gt;&lt;/mfrac&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;B&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;R：\frac{1}{T}(B)
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.00744em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;：&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.32144em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05017em;&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息传输速率&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数 (即比特数) 单位是比特 / 秒 (b/s)&lt;/li&gt;
&lt;li&gt;一秒钟传输多少个比特&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两者关系：若一个码元携带 nbit 的信息量，则 M Baud 的码元传输速率所对应的&lt;strong&gt;信息传输速率为 M×nbit/s&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考题 1：系统传输的是比特流，通常比较的是信息传输速率，所以传输十六进制码元的通信系统传输速率较快&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信道带宽&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模拟信号系统中：当输入的信号频率高或低到一定程度，使得系统的输出功率成为输入功率的一半时 (即 - 3dB)，最高频率和最低频率间的差值就代表了系统的通频带宽，其单位为赫兹 (Hz)&lt;/li&gt;
&lt;li&gt;数字信号设备：表示在单位时间内从网络中的某一点到另一点所能通过的 “最高数据率”/ 单位时间内通过链路的数量，常用来表示网络的通信线路所能传输数据的能力。单位是比特每秒 (bps)&lt;/li&gt;
&lt;li&gt;拥有更宽的带宽，也就是有更大的信息运送能力&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;失真&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;影响失真程度的因素：
&lt;ol&gt;
&lt;li&gt;码元传输速率&lt;/li&gt;
&lt;li&gt;信号传输距离&lt;/li&gt;
&lt;li&gt;噪声干扰&lt;/li&gt;
&lt;li&gt;传输媒体质量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;码间串扰：接收端收到的信号波形失去了码元之间清晰界限的现象（振动频率太快）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码 &amp;amp;&amp;amp; 调制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;信道：信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信道上传输的信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基带信号
&lt;ol&gt;
&lt;li&gt;将数字信号 1 和 0 直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）。来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如我们说话的声波就是基带信号。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;宽带信号
&lt;ol&gt;
&lt;li&gt;将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）。把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在传输距离较近时，计算机网络采用基带传输方式（近距离衰减小，从而信号内容不易发生变化）。&lt;br&gt;
在传输距离较远时，计算机网络采用宽带传输方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;数字信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;编码    数字数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;数字发送器&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;数字信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;编码    模拟数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mtext&gt;编码器&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;数字信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;编码&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;模拟信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;调制    数字数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;调制器&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;模拟信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;调制    模拟数据&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mtext&gt;放大器调制器&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;模拟信号&lt;/mtext&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mtext&gt;调制&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;数据-数字信号-编码\ \ \ \ 数字数据-(数字发送器)-数字信号-编码\ \ \ \ 模拟数据-(PCM编码器)-数字信号-编码\\数据-模拟信号-调制\ \ \ \ 数字数据--(调制器)--模拟信号-调制\ \ \ \ 模拟数据-(放大器调制器)-模拟信号-调制
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;编&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;发&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;送&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;编&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;P&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;编&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;编&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;制&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;字&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;制&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;制&lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mspace&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;放&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;大&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;制&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;器&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;模&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;拟&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;调&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;制&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数字数据编码为数字信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;非归零编码【NRZ】&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;高 1 低 0&lt;/li&gt;
&lt;li&gt;编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方难以保持同步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;曼彻斯特编码&lt;/strong&gt;（携带时钟信号和数字信号）
&lt;ol&gt;
&lt;li&gt;将一个码元分成两个相等的间隔，前一个间隔为低电平后一个间隔为高电平表示码元 1；码元 0 则正好相反。也可以采用相反的规定。该编码的特点是在每一个码元的中间出现电平跳变，位中间的跳变既作时钟信号（可用于同步），又作数据信号，但它所占的频带宽度是原始的基带宽度的两倍。每一个码元都被调成两个电平，所以数据传输速率只有调制速率的 1/2（一次时钟周期发生两次脉冲）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;差分曼彻斯特编码&lt;/strong&gt;（携带时钟信号和数字信号）
&lt;ol&gt;
&lt;li&gt;同 1 异 0&lt;/li&gt;
&lt;li&gt;常用于局域网传输，其规则是：若码元为 1, 则前半个码元的电平与上一个码元的后半个码元的电平相同，若为 0。则相反。该编码的特点是，在每个码元的中间，都有一次电平的跳转，可以实现自同步，且抗干扰性强于曼彻斯特编码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;归零编码【RZ】
&lt;ol&gt;
&lt;li&gt;信号电平在一个码元之内都要恢复到零的这种编码成编码方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;反向不归零编码【NRZI】
&lt;ol&gt;
&lt;li&gt;信号电平翻转表示 0，信号电平不变表示 1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;4B/5B 编码
&lt;ol&gt;
&lt;li&gt;比特流中插入额外的比特以打破一连串的 0 或 1，就是用 5 个比特来编码 4 个比特的数据，之后再传给接收方，因此称为 4B/5B。编码效率为 80%&lt;/li&gt;
&lt;li&gt;只采用 16 种对应 16 种不同的 4 位码，其他的 16 种作为控制码（帧的开始和结束，线路的状态信息等）或保留&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数字数据调制为模拟信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程&lt;/li&gt;
&lt;li&gt;2ASK：调幅，1 有 0 无&lt;/li&gt;
&lt;li&gt;2FSK：调频，1 密 0 稀&lt;/li&gt;
&lt;li&gt;2PSK：调相，正弦余弦波&lt;/li&gt;
&lt;li&gt;QAM：调幅 + 调相&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟数据编码为数字信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机内部处理的是二进制数据，处理的都是数字音频，所以需要将模拟音频通过采样、量化转换成有限个数字表示的离散序列（即实现音频数字化）&lt;/li&gt;
&lt;li&gt;最典型的例子就是对音频信号进行编码的脉码调制（PCM），在计算机应用中，能够达到最高保真水平的就是 PCM 编码，被广泛用于素材保存及音乐欣赏，CD、DVD 以及我们常见的 WAV 文件中均有应用。它主要包括三步：抽样、量化、编码
&lt;ol&gt;
&lt;li&gt;抽样：对模拟信号周期性扫描，把时间上连续的信号变成时间上离散的信号。为了使所得的离散信号能无失真地代表被抽样的模拟数据，要使用采样定理进行采样：f 采样频率≥ 2f 信号最高频率&lt;/li&gt;
&lt;li&gt;量化：把抽样取得的电平幅值按照一定的分级标度转化为对应的数字值，并取整数，这就把连续的电平幅值转换为离散的数字量&lt;/li&gt;
&lt;li&gt;编码：把量化的结果转换为与之对应的二进制编码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟数据调制为模拟信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为了实现传输的有效性，可能需要&lt;strong&gt;较高的频率&lt;/strong&gt;。这种调制方式还可以使用&lt;strong&gt;频分复用技术&lt;/strong&gt;，充分利用带宽资源&lt;/li&gt;
&lt;li&gt;在电话机和本地交换机所传输的信号是采用模拟信号传输模拟数据的方式；模拟的声音数据是加载到模拟的载波信号中传输&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据交换&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;交换是通过某些交换中心将数据进行集中和传送。传输线路为各个用户共用，从而大大节省通信线路，降低系统费用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;电路交换 / 线路交换&lt;/strong&gt;（全双工）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电路交换的原理：在数据传输期间，源结点与目的结点之间有一条由中间结点构成的专用物理连接线路，在数据传输结束之前，这条线路一直保持&lt;/li&gt;
&lt;li&gt;电路交换的阶段
&lt;ol&gt;
&lt;li&gt;建立连接（呼叫 / 电路建立）&lt;/li&gt;
&lt;li&gt;通信（数据传输）&lt;/li&gt;
&lt;li&gt;释放连接（拆除电路）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特点：独占资源，用户始终占用端到端的固定传输带宽。适用于远程批处理信息传输或系统间实时性要求高的大量数据传输的情况。&lt;/li&gt;
&lt;li&gt;电路交换优点：
&lt;ol&gt;
&lt;li&gt;传输时延小&lt;/li&gt;
&lt;li&gt;数据顺序传送，无失序问题&lt;/li&gt;
&lt;li&gt;实时性强，双方一旦建立物理通路，便可以实时通信，适用于交互式会话类通信&lt;/li&gt;
&lt;li&gt;全双工通信，没有冲突，通信双方有不同的信道，不会争用物理信道&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适用于模拟信号和数字信号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;控制简单，电路的交换设备及控制较简单&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;电路交换缺点：
&lt;ol&gt;
&lt;li&gt;建立连接时间长&lt;/li&gt;
&lt;li&gt;线路独占，即使通信线路空闲，也不能供其他用户使用，信道使用效率低&lt;/li&gt;
&lt;li&gt;灵活性差，双方连接通路中的任何一点出了故障，必须重新拨号建立新连接，不适应突发性通信&lt;/li&gt;
&lt;li&gt;无数据存储能力，难以平滑通信量&lt;/li&gt;
&lt;li&gt;电路交换时，数据直达，不同类型、不同规格、不同速率的终端很难相互进行通信&lt;/li&gt;
&lt;li&gt;无法发现与纠正传输差错，难以在通信过程中进行差错控制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;报文交换&lt;/strong&gt;（存储转发交换方式）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;报文 (message) 是网络中交换与传输的数据单元，即站点一次性要发送的数据块。报文包含了将要发送的完整的数据信息，其长短很不一致，长度不限且可变，报文包含信息和报头&lt;/li&gt;
&lt;li&gt;报文交换：无需在两个站点之间建立一条专用通路，其数据传输的单位是报文，传送过程采用存储转发方式&lt;/li&gt;
&lt;li&gt;过程特点：
&lt;ol&gt;
&lt;li&gt;每个节点收下整个报文后，暂存报文并检查有无错误&lt;/li&gt;
&lt;li&gt;当所需要的输出电路空闲时，利用路由信息找到下一个结点地址，传送给下一个结点&lt;/li&gt;
&lt;li&gt;在两个通信用户间的其他线路段，可传输其他用户的报文，不像电路交换那样必须占用端到端的全部信道&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;报文交换优点：
&lt;ol&gt;
&lt;li&gt;无需建立连接，无建立连接时延，用户可随时发送报文&lt;/li&gt;
&lt;li&gt;动态分配线路，动态选择报文通过的最佳路径，可以平滑通信量&lt;/li&gt;
&lt;li&gt;提高线路可靠性，某条传输路径发生故障，可重新选择另一条路径传输&lt;/li&gt;
&lt;li&gt;提高线路利用率，通信双方在不同的时间一段一段地部分占有这条物理通道，多个报文可共享信道&lt;/li&gt;
&lt;li&gt;提供多目标服务：一个报文可同时发往多个目的地址&lt;/li&gt;
&lt;li&gt;在存储转发中容易实现代码转换和速率匹配，甚至收发双方可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;报文交换缺点：
&lt;ol&gt;
&lt;li&gt;实时性差，不适合传送实时或交互式业务的数据。数据进入交换结点后要经历存储转发过程，从而引起转发时延&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只适用于数字信号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分组交换&lt;/strong&gt;（存储转发交换方式）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分组：大多数计算机网络都不能连续地传送任意长的数据，所以实际上网络系统把数据分割成小块，然后逐块地发送，这种小块就称作分组（packet）。小数据块 + 控制信息（源和目的地址、编号）= 分组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换的原理：分组交换与报文交换的工作方式基本相同，都采用存储转发方式，形式上的主要差别在于，分组交换网中要限制所传输的数据单位的长度，一般选 128B。发送节点首先对从终端设备送来的数据报文进行接收、存储，而后将报文划分成一定长度的分组，并以分组为单位进行传输和交换。接收结点将收到的分组组装成信息或报文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无建立时延，无需为通信双方预先建立一条专用通信线路，用户可随时发送分组&lt;/li&gt;
&lt;li&gt;线路利用率高，通信双方在不同的时间一段一段地部分占有这条物理通道，多个分组可共享信道&lt;/li&gt;
&lt;li&gt;简化了存储管理。因为分组的长度固定，相应的缓冲区的大小也固定，在交换结点中存储器的管理通常被简化为对缓冲区的管理，相对比较容易&lt;/li&gt;
&lt;li&gt;加速传输，后一个分组的存储可以和前一个分组的转发并行操作；传输一个分组比一份报文所需缓冲区小，减少等待发送时间&lt;/li&gt;
&lt;li&gt;减少出错几率和重发数据量，提高可靠性，减少传输时延&lt;/li&gt;
&lt;li&gt;分组短小，适用于计算机之间突发式数据通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分组交换缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尽管分组交换比报文交换的传输时延少，但仍存在存储转发时延，而且其结点交换机必须具有更强的处理能力&lt;/li&gt;
&lt;li&gt;每个分组都要加控制信息，一定程度上降低了通信效率，增加了处理的时间&lt;/li&gt;
&lt;li&gt;当分组交换采用数据报服务时，可能出现失序、丢失或重复分组，分组到达目的结点时，要对分组按编号进行排序等工作，增加了麻烦。若采用虚电路服务，虽无失序问题，但有呼叫建立、数据传输和虚电路释放三个过程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据报方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据报传输过程
&lt;ol&gt;
&lt;li&gt;源主机（A）将报文分成多个分组，依次发送到直接相连的结点（A）&lt;/li&gt;
&lt;li&gt;结点 A 收到分组后，对每个分组差错检测和路由选择，不同分组的下一跳结点可能不同&lt;/li&gt;
&lt;li&gt;结点 C 收到分组 P1 后，对分组 P1 进行差错检测，若正确则向 A 发送确认信息，A 收到 C 确认后则丢弃分组 P1 副本&lt;/li&gt;
&lt;li&gt;所有分组到家辽（主机 B）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据报传输特点
&lt;ol&gt;
&lt;li&gt;数据报方式为网络层提供无连接服务。发送方可随时发送分组，网络中的结点可随时接收分组。无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同&lt;/li&gt;
&lt;li&gt;同一报文的不同分组达到目的结点时可能发生乱序、重复与丢失&lt;/li&gt;
&lt;li&gt;每个分组在传输过程中都必须携带源地址和目的地址，以及分组号&lt;/li&gt;
&lt;li&gt;分组在交换结点存储转发时，需要排队等候处理，这会带来一定的时延。当通过交换结点的通信量较大或网络发生拥塞时，这种时延会大大增加，交换结点还可根据情况丢弃部分分组&lt;/li&gt;
&lt;li&gt;网络具有冗余路径，当某一交换结点或一段链路出现故障时，可相应地更新转发表，寻找另一条路径转发分组，对故障的适应能力强，适用于突发性通信，不适于长报文、会话式通信&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚电路方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;虚电路将数据报方式和电路交换方式结合，发挥两者优点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚电路：一条源主机到目的主机类似于电路的路径 (逻辑连接), 路径上所有结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项记录了一个打开的虚电路的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚电路传输过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建立连接（虚电路建立）: 源主机发送 “呼叫请求” 分组并收到 “呼叫应答” 分组后才算建立连接&lt;/li&gt;
&lt;li&gt;数据传输：每个分组携带虚电路号，分组号、检验和等控制信息&lt;/li&gt;
&lt;li&gt;释放连接（虚电路释放）: 源主机发送 “释放请求” 分组以拆除虚电路&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚电路传输特点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;虚电路方式为网络层提供连接服务。源节点与目的结点之间建立一条逻辑连接，而非实际物理连接。连接服务：首先为分组的传输确定传输路径（建立连接），然后沿该路径（连接）传输系列分组，系列分组传输路径相同，传输结束后拆除连接&lt;/li&gt;
&lt;li&gt;一次通信的所有分组都通过虚电路顺序传送，分组不需携带源地址、目的地址等信息，包含虚电路号，相对数据报方式开销小，同一报文的不同分组到达目的结点时不会乱序、重复或丢失&lt;/li&gt;
&lt;li&gt;分组通过虚电路上的每个节点时，节点只进行差错检测，不需进行路由选择&lt;/li&gt;
&lt;li&gt;每个节点可能与多个节点之间建立多条虚电路，每条虚电路支持特定的两个端系统之间的数据传输，可以对两个数据端点的流量进行控制，两个端系统之间也可以有多条虚电路为不同的进程服务&lt;/li&gt;
&lt;li&gt;致命弱点：当网络中的某个结点或某条链路出故障而彻底失效时，则所有经过该结点或该链路的虚电路将遭到破坏&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据报与虚电路对比&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;数据报服务&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;虚电路服务&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;连接的建立&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不要&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必须有&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;目的地址&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每个分组都有完整的目的地址&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;仅在建立连接阶段使用，之后每个分组使用长度较短的虚电路号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;路由选择&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;每个分组独立地进行路由选择和转发&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属于同一条虚电路的分组，按照同一路由转发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组顺序&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不保证分组的有序到达&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;保证分组的有序到达&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可靠性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不保证可靠通信，可靠性由用户主机来保证&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可靠性由网络保证&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;对网络故障的适应性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;出故障的节点丢失分组，其他分组路径选择发生变化，可正常传输&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;所有经过故障节点的虚电路均不能正常工作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;差错处理和流量控制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;由用户主机进行流量控制，不保证数据报的可靠性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可由分组交换网负责，也可由用户主机负责&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据交换方式的选择&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传送数据量大，且传送时间远大于呼叫时，&lt;strong&gt;选择电路交换&lt;/strong&gt;。&lt;strong&gt;电路交换传输时延最小&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;当端到端的通路有很多段的链路组成时，采用&lt;strong&gt;分组交换传送数据&lt;/strong&gt;较为合适&lt;/li&gt;
&lt;li&gt;从信道利用率上看，&lt;strong&gt;报文交换和分组交换优于电路交换&lt;/strong&gt;，其中分组交换比报文交换的时延小，尤其&lt;strong&gt;适合于计算机之间的突发式的数据通信&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要公式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;这两个公式使用的单位是 &lt;code&gt;Hz&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;奈氏准则（奈奎斯特定理）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为 2WBaud，W 是信道带宽，单位是 Hz&lt;/li&gt;
&lt;li&gt;在任何信道中，码元传输的速率是有上限的。若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能&lt;/li&gt;
&lt;li&gt;信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输&lt;/li&gt;
&lt;li&gt;奈氏准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制&lt;/li&gt;
&lt;li&gt;由于码元的传输速率受奈氏准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;奈氏准则&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;理想低通信道下的极限数据传输率&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;该式中&lt;/mtext&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mtext&gt;表示带宽&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mtext&gt;表示几种码元&lt;/mtext&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mtext&gt;码元的离散电平数目&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;奈氏准则\\理想低通信道下的极限数据传输率=2Wlog_2V(b/s)\\该式中W表示带宽(Hz),V表示几种码元/码元的离散电平数目
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;奈&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;氏&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;准&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;则&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;理&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;想&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;低&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;通&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;下&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;极&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;限&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;该&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;V&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;几&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;种&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;码&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;元&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;离&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;散&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;电&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;平&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;目&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;香农定理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;噪声存在于所有的电子设备和通信信道中。由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此，信噪比就很重要&lt;/li&gt;
&lt;li&gt;信噪比 = 信号的平均功率 / 噪声的平均功率，常记为 S/N, 并用分贝 (dB) 作为度量单位，&lt;strong&gt; 信噪比 (dB)=10log&lt;sub&gt;10&lt;/sub&gt;(S/N) 数值等价&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高&lt;/li&gt;
&lt;li&gt;对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了&lt;/li&gt;
&lt;li&gt;只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输&lt;/li&gt;
&lt;li&gt;香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少&lt;/li&gt;
&lt;li&gt;从香农定理可以看出，若信道带宽 W 或信噪比 S/N 没有上限（不可能），那么信道的极限信息传输速率也就没有上限。&lt;/li&gt;
&lt;li&gt;香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;香农定理&lt;/mtext&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;信道的极限数据传输速率&lt;/mtext&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mspace linebreak=&#34;newline&#34;&gt;&lt;/mspace&gt;&lt;mtext&gt;该式中&lt;/mtext&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;mtext&gt;表示带宽&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;H&lt;/mi&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mtext&gt;表示信噪比，&lt;/mtext&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mtext&gt;是信道所穿信号的平均功率，&lt;/mtext&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mtext&gt;是信道内的高斯噪声功率&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;香农定理\\信道的极限数据传输速率=Wlog_2(1+S/N)(b/s)\\该式中W表示带宽(Hz),S/N表示信噪比，S是信道所穿信号的平均功率，N是信道内的高斯噪声功率
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;香&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;农&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;定&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;理&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;极&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;限&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;数&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;据&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;传&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;输&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;速&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.01968em;&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace newline&#34;&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;该&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;式&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;中&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.13889em;&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;带&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;宽&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.08125em;&#34;&gt;H&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;表&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;示&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;噪&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;比&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;所&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;穿&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;号&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;平&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;均&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;功&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.10903em;&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;是&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;信&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;道&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;内&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;的&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;高&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;斯&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;噪&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;声&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;功&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;率&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;2传输介质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2传输介质&#34;&gt;#&lt;/a&gt; 2. 传输介质&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;传输介质也称传输媒体 / 传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路，&lt;strong&gt;传输媒体并不是物理层&lt;/strong&gt;，传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为 0 层。在传输媒体中传输的是信号，但传输媒体并不知道所传输的信号代表什么意思。但物理层规定了电气特性，因此能够识别所传送的比特流（&lt;strong&gt;物理层是傻瓜，传输媒体连傻瓜都不如&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导向传输介质：电磁波被导向沿着固体媒介（铜线 / 光纤）传播&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;双绞线&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由两根采用一定规则并排绞合的、相互绝缘的铜导线组成，绞合可以减少对相邻导线的电磁干扰&lt;/li&gt;
&lt;li&gt;为了进一步提高抗电磁干扰能力，可在双绞线的外面再加上一个由金属丝编织成的屏蔽层，这就是屏蔽双绞线（STP），无屏蔽层的双绞线就称为非屏蔽双绞线（UTP）&lt;/li&gt;
&lt;li&gt;双绞线价格便宜，在局域网和传统电话网中普遍使用，模拟传输和数字传输都可以使用双绞线，其通信距离一般为几公里到数十公里，距离太远时，对于模拟传输，要用放大器放大衰减的信号；对于数字传输，要用中继器将失真的信号整形&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同轴电缆&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由导体铜质芯线、绝缘层、网状编织屏蔽层和塑料外层构成&lt;/li&gt;
&lt;li&gt;按特性阻抗数值的不同分为两类：50Ω 同轴电缆和 75Ω 同轴电缆，50Ω 同轴电缆主要用于传送基带数字信号，又称为基带同轴电缆，它在局域网中得到广泛应用；75Ω 同轴电缆主要用于传送宽带信号，又称为宽带同轴电缆，它主要用于有线电视系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双绞线 VS 同轴电缆&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由于外导体屏蔽层的作用，&lt;strong&gt;同轴电缆&lt;/strong&gt;抗干扰特性比双绞线好，被广泛用于传输较高速率的数据，其传输距离更远，但价格较双绞线贵&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光纤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;超低损耗，传送超远距离&lt;/li&gt;
&lt;li&gt;光纤通信就是利用光导纤维（简称光纤）传递光脉冲来进行通信，有光脉冲表示 1，无光脉冲表示 0&lt;/li&gt;
&lt;li&gt;可见光的频率大约是 108MHz，因此光纤通信系统的带宽远远大于目前其他各种传输媒体的带宽&lt;/li&gt;
&lt;li&gt;光纤主要由纤芯 (实心的) 和包层构成，光波通过纤芯进行传导，包层较纤芯有较低的折射率，当光线从高折射率的介质射向低折射率的介质时，其折射角将大于入射角，如果入射角足够大，就会出现全反射，即光线碰到包层时候就会折射回纤芯、这个过程不断重复，光也就沿着光纤传输下去&lt;/li&gt;
&lt;li&gt;光纤在发送端有光源，可以采用发光二极管或半导体激光器，它们在电脉冲作用下能产生出光脉冲；在接收端用光电二极管做成光检测器，在检测到光脉冲时可还原出电脉冲&lt;/li&gt;
&lt;li&gt;光纤的特点
&lt;ol&gt;
&lt;li&gt;传输损耗小，中继距离长，对远距离传输特别经济&lt;/li&gt;
&lt;li&gt;抗雷电和电磁干扰性能好&lt;/li&gt;
&lt;li&gt;无串音干扰，保密性好，也不易被窃听或截取数据&lt;/li&gt;
&lt;li&gt;体积小，重量轻&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;定义&lt;/th&gt;
&lt;th&gt;光源&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单模光纤&lt;/td&gt;
&lt;td&gt;一种在横向模式直接传输光信号的光纤&lt;/td&gt;
&lt;td&gt;定向性很好的激光二极管&lt;/td&gt;
&lt;td&gt;衰耗小，适合远距离传输&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多模光纤&lt;/td&gt;
&lt;td&gt;有多种传输光信号模式的光纤&lt;/td&gt;
&lt;td&gt;发光二极管&lt;/td&gt;
&lt;td&gt;易失真，适合近距离传输&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非导向传输介质 ：自由空间，介质可以是空气、真空、海水&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;无线电波&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;较强穿透能力，可传远距离，广泛用于通信领域（如手机通信）&lt;/li&gt;
&lt;li&gt;特点：信号向所有方向传播&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微波&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微波通信频率较高、频段范围宽，因此数据率很高&lt;/li&gt;
&lt;li&gt;特点：信号固定方向传播&lt;/li&gt;
&lt;li&gt;具体应用
&lt;ol&gt;
&lt;li&gt;地面微波接力通信&lt;/li&gt;
&lt;li&gt;卫星通信
&lt;ol&gt;
&lt;li&gt;优点：通信容量大、距离远、覆盖广、广播通信和多址通信&lt;/li&gt;
&lt;li&gt;缺点：传播时延长（250-270ms）、受气候影响大（强风太阳黑子爆发、日凌）、误码率较高、成本高&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;红外线、激光&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把要传输的信号分别转换为各自的信号格式，即红外光信号和激光信号，再在空间中传播&lt;/li&gt;
&lt;li&gt;特点：信号固定方向传播&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;3物理层设备&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3物理层设备&#34;&gt;#&lt;/a&gt; 3. 物理层设备&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;中继器：再生数字信号&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;诞生原因：对信号进行&lt;strong&gt;再生和还原&lt;/strong&gt;，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度&lt;/li&gt;
&lt;li&gt;对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度&lt;/li&gt;
&lt;li&gt;中继器两端：两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同。两端可连相同媒体，也可连不同媒体。中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据。&lt;strong&gt;中继器两端的网段一定要是同一个协议&lt;/strong&gt;（中继器不会存储转发，傻）&lt;/li&gt;
&lt;li&gt;5-4-3 规则：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障
&lt;ol&gt;
&lt;li&gt;5 个网段、4 个中继器或集线器（网络设备）、3 个计算机&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集线器：再生，放大信号，多口中继器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对信号进行再生放大转发，对衰减的信号进行放大，接着转发到其他所有（除输入端口外）处于工作状态的端口上，以增加信号传输的距离，延长网络的长度。不具备信号的定向传送能力，是一个共享式设备&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- #### 3.数据链路层

#### 4.网络层

#### 5.传输层

#### 6.应用层 --&gt;</content>
        <category term="计算机网络" />
        <updated>2020-03-12T08:39:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/03/07/6003_Vue/</id>
        <title>Vue</title>
        <link rel="alternate" href="http://example.com/2020/03/07/6003_Vue/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;插值操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插值操作&#34;&gt;#&lt;/a&gt; 插值操作&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Mustache语法 &amp;#123;&amp;#123;&amp;#125;&amp;#125;&lt;/code&gt;  双大括号（胡子 / 胡须）&lt;/li&gt;
&lt;li&gt;Mustache 语法中可以是&lt;strong&gt;变量和简单的表达式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;插值操作–相关指令
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-once&lt;/code&gt;  表示元素和组件只渲染一次，不会随着数据的改变而改变（无响应）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-html&lt;/code&gt;  该指令后面跟上一个 string 类型，会将 string 的 html 解析出来并且进行渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-text&lt;/code&gt;   使用较少，因为存在覆盖原有元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-pre&lt;/code&gt;     用于跳过这个元素和它的子元素的编译过程，用于显示原本的 Mustache 语法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-cloak&lt;/code&gt;   在某些情况下，我们浏览器可能会显示出未编译的 Mustache 标签&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-css&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-css&#34;&gt;  &lt;span class=&#34;hljs-selector-attr&#34;&gt;[cloak]&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-css&#34;&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;display&lt;/span&gt;: none;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-css&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-css&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-once 无法修改--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-once&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-html 解析并加载HTML标签--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;url&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-html&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-text 作用与双括号相同，但会覆盖标签里原文本值--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;test&amp;#125;&amp;#125;真好玩哈&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 把标签里面原有的文本进行覆盖只显示&amp;#x27;学习编程&amp;#x27; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-text&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;真好玩哈&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-pre 保持原格式不进行解析--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;test&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-pre&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;test&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-cloak --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 在Vue解析前h3存在cloak属性,Vue解析后该属性就自动没有 --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-cloak&lt;/span&gt;&amp;gt;&lt;/span&gt;简单测试&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;简单测试&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试v-once命令&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;url&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;lt;a href=&amp;quot;http://www.baidu.com&amp;quot;&amp;gt;百度一下&amp;lt;/a&amp;gt;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;学习编程&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;v-bind或&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#v-bind或&#34;&gt;#&lt;/a&gt;  &lt;code&gt;v-bind&lt;/code&gt;  或 &lt;code&gt;:&lt;/code&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-bind&lt;/code&gt;  基本使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作用：动态绑定属性&lt;/li&gt;
&lt;li&gt;缩写： &lt;code&gt;:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;预期：任意参数或对象&lt;/li&gt;
&lt;li&gt;用法:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;:src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;imgSrc&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;alt&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-bind:href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aHref&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;百度一下&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;imgSrc&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;https://imgcps.jd.com/ling4/12842874/5Lqs6YCJ5aW96LSn/5L2g5YC85b6X5oul5pyJ/p-5bd8253082acdd181d02fa42/4e121a9f/cr/s/q.jpg&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;aHref&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.baidu.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性绑定 (数组语法和对象语法的区别？作用？)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象语法&lt;/li&gt;
&lt;li&gt;数组语法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 对象语法 --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;h3 :class=&amp;quot;&amp;#123;active:IsActive,line:IsLine&amp;#125;&amp;quot;&amp;gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;:class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getClasses()&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 数组语法 --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;h3 class=&amp;quot;test&amp;quot; :class=&amp;quot;[active,line]&amp;quot;&amp;gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; @&lt;span class=&#34;hljs-attr&#34;&gt;click&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;修改颜色为red&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; @&lt;span class=&#34;hljs-attr&#34;&gt;click&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bule&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;修改颜色为bule&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Hello Vue.js&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-title class_&#34;&gt;IsActive&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-title class_&#34;&gt;IsLine&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;methods&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;red&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsLine&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsActive&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;bule&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsActive&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsLine&lt;/span&gt; = &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bule&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;getClasses&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;active&lt;/span&gt;:&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsActive&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;line&lt;/span&gt;:&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;IsLine&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;style 绑定&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象语法&lt;/li&gt;
&lt;li&gt;数组语法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 对象语法 --&amp;gt;&lt;/span&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;h2 :style=&amp;quot;&amp;#123;fontSize:finalSize+&amp;#x27;px&amp;#x27;,backgroundColor:finalColor&amp;#125;&amp;quot;&amp;gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;:style&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;getStyle()&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 数组语法 --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;h2 :style=&amp;quot;[baseStyle,baseStyle1]&amp;quot;&amp;gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&amp;lt;/h2&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;您好&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;finalSize&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;finalColor&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;red&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// baseStyle:&amp;#123;fontSize:100+&amp;#x27;px&amp;#x27;&amp;#125;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// baseStyle1:&amp;#123;backgroundColor:&amp;#x27;red&amp;#x27;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      , &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;methods&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;getStyle&lt;/span&gt;: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-attr&#34;&gt;fontSize&lt;/span&gt;:&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;finalSize&lt;/span&gt;+&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;px&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;hljs-attr&#34;&gt;backgroundColor&lt;/span&gt;:&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;finalColor&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Vue" />
        <updated>2020-03-07T02:36:25.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/03/02/6002_Vue/</id>
        <title>Vue</title>
        <link rel="alternate" href="http://example.com/2020/03/02/6002_Vue/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;1-安装四种安装方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-安装四种安装方式&#34;&gt;#&lt;/a&gt; 1. 安装（四种安装方式）&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在页面上以 &lt;code&gt;CDN包&lt;/code&gt; 的形式导入 (CDN 是什么？？？)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发环境版本&lt;/li&gt;
&lt;li&gt;生产环境版本&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载和引入 &lt;code&gt;JavaScript文件&lt;/code&gt; 自行托管&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发环境版本&lt;/li&gt;
&lt;li&gt;生产环境版本&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;npm&lt;/code&gt;  安装（结合 &lt;code&gt;webpack&lt;/code&gt;  和 &lt;code&gt;CLI&lt;/code&gt;  的使用）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;官方的CLI&lt;/code&gt;  搭建项目&lt;/p&gt;
&lt;p&gt;** 附加：MVVM 模式（ &lt;code&gt;Model ViewModel View&lt;/code&gt;  ）** 维基百科查询&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;View视图层&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;向用户展示的界面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Model数据层&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;一些死数据或者从服务器请求下来的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewModel视图模型层&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;数据绑定：将 Model 的数据改变实时修改展示到 View&lt;/li&gt;
&lt;li&gt;视图监听：将 DOM 发生一些事件实时修改到 Model 层的 Data 中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![截屏 2022-04-08 下午 10.32.41](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-04-08 下午 10.32.41.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;3-vue中options选项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-vue中options选项&#34;&gt;#&lt;/a&gt; 3. Vue 中 options 选项&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;el&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型： &lt;code&gt;String&lt;/code&gt;  或 &lt;code&gt;DOM元素&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用：挂载 Vue 实例管理的 DOM 元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型： &lt;code&gt;Object&lt;/code&gt;  或 &lt;code&gt;Function(组件当中data必须是一个函数)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用：Vue 实例对应的数据对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型： &lt;code&gt;&amp;#123;[key:sting]:Function&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;作用：定义属于 Vue 的一些方法，可以在其他地方调用，可以在指令中使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;1.Vue初体验&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;   &lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;name&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 开发范式有两种:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 1.命令式范式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 2.声明式范式(Vue属于声明式范式开发)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Hello,Vue.js !&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;初学者&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;2.Vue列表&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-for&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;item in message&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123;item&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;:[&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test_01&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test_02&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test_03&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test_04&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;3.Vue计数器&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;当前计数：&amp;#123;&amp;#123;counter&amp;#125;&amp;#125;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;button v-on:click=&amp;quot;counter++&amp;quot;&amp;gt;+&amp;lt;/button&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- &amp;lt;button v-on:click=&amp;quot;counter--&amp;quot;&amp;gt;-&amp;lt;/button&amp;gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- v-on的语法糖为@ --&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; @&lt;span class=&#34;hljs-attr&#34;&gt;click&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;+&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;v-on:click&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;-&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-javascript&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; app = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;el&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#app&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;counter&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;methods&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;add&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;counter&lt;/span&gt;++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;        &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;自加一次&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;      &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;sub&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;         &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;counter&lt;/span&gt;--;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;         &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;自减一次&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;附加：方法 (method) 和函数 (Function) 的区别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一般实例对象里面的称为方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Vue 实例属性和方法，都有 &lt;code&gt;$&lt;/code&gt;  前缀，便于和用户定义的属性区别开&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vue&#34;&gt;//$watch是一个实例方法&lt;br&gt;vm.$watch(&amp;#x27;a&amp;#x27;,function(newValue,oldValue)&amp;#123;&lt;br&gt;	这个回调将在vm.a改变后调用&lt;br&gt;//观察变量a的变化前后&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Vue" />
        <updated>2020-03-02T01:02:05.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/02/27/6001_Vue/</id>
        <title>Vue</title>
        <link rel="alternate" href="http://example.com/2020/02/27/6001_Vue/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h5 id=&#34;vue生命周期的理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue生命周期的理解&#34;&gt;#&lt;/a&gt; Vue 生命周期的理解&lt;/h5&gt;
&lt;p&gt;每个 &lt;code&gt;Vue&lt;/code&gt;  实例在创建时都会经过一系列的初始化过程， &lt;code&gt;vue&lt;/code&gt;  的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;create阶段&lt;/code&gt; ：vue 实例被创建&lt;br&gt;
 &lt;code&gt;beforeCreate&lt;/code&gt; : 最初调用触发，创建前，此时 data 和 methods 中的数据都还没有初始化，data 和 events 都不能用&lt;br&gt;
 &lt;code&gt;created&lt;/code&gt; ： 创建完毕，data 中有值，未挂载，data 和 events 已经初始化好，data 已经具有响应式；在这里可以发送请求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount阶段&lt;/code&gt; ： vue 实例被挂载到真实 DOM 节点&lt;br&gt;
 &lt;code&gt;beforeMount&lt;/code&gt; ：在模版编译之后，渲染之前触发，可以发起服务端请求，去数据，ssr 中不可用，基本用不上这个 hook&lt;br&gt;
 &lt;code&gt;mounted&lt;/code&gt; : 在渲染之后触发，此时可以操作 DOM，并能访问组件中的 DOM 以及 $ref,SSR 中不可用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update阶段&lt;/code&gt; ：当 vue 实例里面的 data 数据变化时，触发组件的重新渲染&lt;br&gt;
 &lt;code&gt;beforeUpdate&lt;/code&gt;  : 更新前，在数据变化后，模版改变前触发，切勿使用它监听数据变化&lt;br&gt;
 &lt;code&gt;updated&lt;/code&gt; ：更新后，在数据改变后，模版改变后触发，常用于重渲染案后的打点，性能检测或触发 vue 组件中非 vue 组件的更新&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy阶段&lt;/code&gt; ：vue 实例被销毁&lt;br&gt;
 &lt;code&gt;beforeDestroy&lt;/code&gt; ：实例被销毁前，组件卸载前触发，此时可以手动销毁一些方法，可以在此时清理事件、计时器或者取消订阅操作&lt;br&gt;
 &lt;code&gt;destroyed&lt;/code&gt; : 卸载完毕后触发，销毁后，可以做最后的打点或事件触发操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;组件生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组件生命周期&#34;&gt;#&lt;/a&gt; 组件生命周期&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;生命周期（父子组件） 父组件 beforeCreate --&amp;gt; 父组件 created --&amp;gt; 父组件 beforeMount --&amp;gt; 子组件 beforeCreate --&amp;gt; 子组件 created --&amp;gt; 子组件 beforeMount --&amp;gt; 子组件 mounted --&amp;gt; 父组件 mounted --&amp;gt; 父组件 beforeUpdate --&amp;gt; 子组件 beforeDestroy–&amp;gt; 子组件 destroyed --&amp;gt; 父组件 updated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;加载渲染过程&lt;/strong&gt; 父 beforeCreate-&amp;gt; 父 created-&amp;gt; 父 beforeMount-&amp;gt; 子 beforeCreate-&amp;gt; 子 created-&amp;gt; 子 beforeMount-&amp;gt; 子 mounted-&amp;gt; 父 mounted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挂载阶段&lt;/strong&gt; 父 created-&amp;gt; 子 created-&amp;gt; 子 mounted-&amp;gt; 父 mounted&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;父组件更新阶段&lt;/strong&gt; 父 beforeUpdate-&amp;gt; 父 updated&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;子组件更新阶段&lt;/strong&gt; 父 beforeUpdate-&amp;gt; 子 beforeUpdate-&amp;gt; 子 updated-&amp;gt; 父 updated&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;销毁阶段&lt;/strong&gt; 父 beforeDestroy-&amp;gt; 子 beforeDestroy-&amp;gt; 子 destroyed-&amp;gt; 父 destroyed&lt;/p&gt;
&lt;h5 id=&#34;vue的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue的生命周期&#34;&gt;#&lt;/a&gt; Vue 的生命周期&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生命周期：从创建到销毁的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生命周期函数内不能使用箭头函数，因为箭头函数没有 &lt;code&gt;this&lt;/code&gt; , 生命周期中要进行应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;figcaption data-lang=&#34;javascript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; object &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;vue.js&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; vm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Vue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;el&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#app&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token literal-property property&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;object&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;beforeCreate&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;beforeCreate&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;created&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;created&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;beforeMount&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;beforeMount&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;mounted&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;mounted&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;beforeUpdate&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;beforeUpdate&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function-variable function&#34;&gt;updated&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;updated&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      vm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;message &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;chagege ......&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="Vue" />
        <updated>2020-02-27T07:32:05.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2020/02/21/B001_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
        <title>数据结构</title>
        <link rel="alternate" href="http://example.com/2020/02/21/B001_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;数据结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据结构&#34;&gt;#&lt;/a&gt; 数据结构&lt;/h2&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h5 id=&#34;1绪论&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1绪论&#34;&gt;#&lt;/a&gt; 1. 绪论&lt;/h5&gt;
&lt;h6 id=&#34;1绪论数据结构介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1绪论数据结构介绍&#34;&gt;#&lt;/a&gt; 1. 绪论–数据结构介绍&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;数据结构学习内容表述
&lt;ol&gt;
&lt;li&gt;如何使用程序代码把现实世界的问题信息化&lt;/li&gt;
&lt;li&gt;如何使用计算机高效的处理这些信息从而创造价值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;发展阶段：人类文明–&amp;gt; 农业革命–&amp;gt; 工业革命–&amp;gt; 信息革命&lt;/li&gt;
&lt;li&gt;关于计算机联系图解&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![image-20220621090912904](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621090912904.png)&lt;/p&gt;
&lt;h6 id=&#34;2绪论概念理解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2绪论概念理解&#34;&gt;#&lt;/a&gt; 2. 绪论–概念理解&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据结构基本概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据：数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。数据是计算机程序加工的原料&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据元素：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据项：一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据对象：数据对象是具有相同性质的数据元素的集合，是数据的一个子集（数据元素描述的东西具有相同的性质）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构：数据结构是相互之间存在一种或多种特定关系的数据元素的集合。(数据元素之间的关系)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据类型：数据类型是一个值的集合和定义在此集合上的一组操作的总称。如原子类型，其值不可再分的数据类型；结构类型，其值可以再分解为若干成分（分量）的数据类型&lt;/p&gt;
&lt;p&gt;![image-20220621095124394](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220621095124394.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象数据类型 (Abstract Data Type,ADT)：抽象数据组织及与之相关的操作。ADT 用数学化的语言定义数据的逻辑结构、定义运算。&lt;strong&gt;抽象数据类型定义了一个数据结构&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据结构的三要素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑结构
&lt;ol&gt;
&lt;li&gt;集合结构：各个元素同属一个集合，别无其他关系&lt;/li&gt;
&lt;li&gt;线性结构：数据元素之间是一对一的关系。除了第一个元素，所有元素都有唯一前驱；除了最后一个元素，所有元素都有唯一后继&lt;/li&gt;
&lt;li&gt;树形结构：数据元素之间是一对多的关系&lt;/li&gt;
&lt;li&gt;图状结构 (网状结构)：数据元素之间是多对多的关系&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据运算：针对于某种逻辑结构，结合实际需求，定义基本运算&lt;/li&gt;
&lt;li&gt;物理结构 (存储结构)：使用计算机表示数据元素之间的逻辑关系
&lt;ol&gt;
&lt;li&gt;顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现&lt;/li&gt;
&lt;li&gt;链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系&lt;/li&gt;
&lt;li&gt;索引存储：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字，地址）&lt;/li&gt;
&lt;li&gt;散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储&lt;/li&gt;
&lt;li&gt;非顺序存储 (离散存储)：链式存储、索引存储、散列存储&lt;/li&gt;
&lt;li&gt;若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序存储，则各个数据元素在物理上可以是离散的。数据的存储结构会影响存储空间分配的方便程度，也会影响对数据运算的速度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义一种数据结构包括逻辑结构、数据运算，如何使用计算机实现这种数据结构主要讲的是物理结构&lt;/li&gt;
&lt;li&gt;运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法：对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令表示一个或多个操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序 = 数据结构 + 算法&lt;/li&gt;
&lt;li&gt;算法的特性
&lt;ol&gt;
&lt;li&gt;有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。算法必须是有穷的，而程序可以是无穷的（&lt;strong&gt;死循环不是算法&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出&lt;/li&gt;
&lt;li&gt;可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现&lt;/li&gt;
&lt;li&gt;输入：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合&lt;/li&gt;
&lt;li&gt;输出：一个算法有一个或多个输出，这些输出是与输入有着某种特定关系的量&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;算法的衡量角度
&lt;ol&gt;
&lt;li&gt;正确性。算法应能够正确地解决求解问题&lt;/li&gt;
&lt;li&gt;可读性。算法应具有良好的可读性，以帮助人们理解&lt;/li&gt;
&lt;li&gt;健壮性。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果&lt;/li&gt;
&lt;li&gt;高效率与低存储量需求。省时：时间复杂度低；省内存：空间复杂度低&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法的时间复杂度：事前预估算法时间开销 T (n) 与问题规模 n 的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最坏时间复杂度：最坏情况下算法的时间复杂度&lt;/li&gt;
&lt;li&gt;平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间&lt;/li&gt;
&lt;li&gt;最好时间复杂度：最好情况下算法的时间复杂度&lt;/li&gt;
&lt;li&gt;计算方法：寻找一个基本操作 (最深层循环)，并计算执行次数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(1)&amp;lt;O(log&lt;sub&gt;2&lt;/sub&gt;n)&amp;lt;O(n)&amp;lt;O(nlog&lt;sub&gt;2&lt;/sub&gt;n)&amp;lt;O(n&lt;sup&gt;2&lt;/sup&gt;)&amp;lt;O(n&lt;sup&gt;3&lt;/sup&gt;)&amp;lt;O(2&lt;sup&gt;n&lt;/sup&gt;)&amp;lt;O(n!)&amp;lt;O(n&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;算法的空间复杂度：空间开销（内存开销）与问题规模 n 之间的关系&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断口诀：常对幂指阶&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O(1)&amp;lt;O(log&lt;sub&gt;2&lt;/sub&gt;n)&amp;lt;O(n)&amp;lt;O(nlog&lt;sub&gt;2&lt;/sub&gt;n)&amp;lt;O(n&lt;sup&gt;2&lt;/sup&gt;)&amp;lt;O(n&lt;sup&gt;3&lt;/sup&gt;)&amp;lt;O(2&lt;sup&gt;n&lt;/sup&gt;)&amp;lt;O(n!)&amp;lt;O(n&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;2线性表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2线性表&#34;&gt;#&lt;/a&gt; 2. 线性表&lt;/h5&gt;
&lt;h6 id=&#34;1线性表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1线性表&#34;&gt;#&lt;/a&gt; 1. 线性表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义 (逻辑结构)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线性表是具有&lt;strong&gt;相同数据类型&lt;/strong&gt;的 n（n≥0）个&lt;strong&gt;数据元素&lt;/strong&gt;的&lt;strong&gt;有限序列&lt;/strong&gt;，其中 n 为表长，当 n= 0 时线性表是一个空表&lt;/li&gt;
&lt;li&gt;**a&lt;sub&gt;i&lt;/sub&gt;** 是线性表中的 &lt;code&gt;第i个&lt;/code&gt; 元素线性表中的位序 (位序从 1 开始的，数组下标从 0 开始的)&lt;/li&gt;
&lt;li&gt;a1 是表头元素；**a&lt;sub&gt;n&lt;/sub&gt;** 是表尾元素。除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本操作 (运算)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;InitList (&amp;amp;L)：初始化表。构造一个空的线性表 L，分配内存空间&lt;/li&gt;
&lt;li&gt;DestroyList (&amp;amp;L)：销毁操作。销毁线性表，并释放线性表 L 所占用的内存空间&lt;/li&gt;
&lt;li&gt;ListInsert (&amp;amp;L,i,e)：插入操作。在表 L 中的第 i 个位置上插入指定元素 e&lt;/li&gt;
&lt;li&gt;ListDelete (&amp;amp;L,i,&amp;amp;e)：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值&lt;/li&gt;
&lt;li&gt;LocateElem (L,e)：按值查找操作。在表 L 中查找具有给定关键字值的元素&lt;/li&gt;
&lt;li&gt;GetElem (L,i)：按位查找操作。获取表 L 中第 i 个位置的元素的值&lt;/li&gt;
&lt;li&gt;Length (L)：求表长。返回线性表 L 的长度，即 L 中数据元素的个数&lt;/li&gt;
&lt;li&gt;PrintList (L)：输出操作。按前后顺序输出线性表 L 的所有元素值&lt;/li&gt;
&lt;li&gt;Empty (L)：判空操作。若 L 为空表，则返回 true，否则返回 false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; : 引用数据类型，对参数的修改结果需要 &amp;quot;带回来&amp;quot;，内存地址复制还是指向原地址&lt;/li&gt;
&lt;li&gt;线性表在存储结构上分为顺序表、链表&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;![image-20220622150006188](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622150006188.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;2顺序表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2顺序表&#34;&gt;#&lt;/a&gt; 2. 顺序表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;顺序存储，把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;sizeof()&lt;/code&gt;  可以获取数据元素占用内存的大小&lt;/li&gt;
&lt;li&gt;静态分配（表长不可调）
&lt;ol&gt;
&lt;li&gt;内存中会遗留 &lt;code&gt;脏数据&lt;/code&gt; ，需要设置数据的默认值即 &lt;code&gt;L.length = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;若数组存满数据，直接舍弃，因为顺序表的表长确定后无法修改（存储空间是静态的）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;动态分配
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;malloc函数&lt;/code&gt; ：动态申请内存空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free函数&lt;/code&gt; ：动态释放内存空间&lt;/li&gt;
&lt;li&gt;练习：手写 malloc、free 这两个函数   &lt;code&gt;L.data=(ElemType*)malloc(sizeof(ElemType)* InitSize);&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;特点
&lt;ol&gt;
&lt;li&gt;随机访问，即可以在 O (1) 时间内找到第 i 个元素&lt;/li&gt;
&lt;li&gt;存储密度高，每个节点只存储数据元素&lt;/li&gt;
&lt;li&gt;拓展容量不方便（即便采用动态分配的方式实现，拓展长度的&lt;strong&gt;时间复杂度也比较高&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;插入、删除操作不方便，需要移动大量元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;li&gt;时间复杂度
&lt;ol&gt;
&lt;li&gt;最好：O (1)&lt;/li&gt;
&lt;li&gt;最坏：O (n)&lt;/li&gt;
&lt;li&gt;平均：O (n)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;li&gt;时间复杂度
&lt;ol&gt;
&lt;li&gt;最好：O (1)&lt;/li&gt;
&lt;li&gt;最坏：O (n)&lt;/li&gt;
&lt;li&gt;平均：O (n)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查找&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按位查找
&lt;ol&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;li&gt;时间复杂度：O (1)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按值查找
&lt;ol&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;li&gt;时间复杂度
&lt;ol&gt;
&lt;li&gt;最好：O (1)&lt;/li&gt;
&lt;li&gt;最坏：O (n)&lt;/li&gt;
&lt;li&gt;平均：O (n)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差异&lt;/p&gt;
&lt;p&gt;![image-20220622155805426](/Users/xiaoyunfei/Library/Application Support/typora-user-images/image-20220622155805426.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;3单链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3单链表&#34;&gt;#&lt;/a&gt; 3. 单链表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;定义
&lt;ol&gt;
&lt;li&gt;单链表：&lt;/li&gt;
&lt;li&gt;代码实现&lt;/li&gt;
&lt;li&gt;两种实现方式
&lt;ol&gt;
&lt;li&gt;带头结点 (代码实现方便)：头指针指向的元素为 null，下一个元素存储数据     &lt;code&gt;L-&amp;gt;next==null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不带头结点 (代码实现不方便)：头指针指向的元素就存储数据     &lt;code&gt;L==null&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;插入
&lt;ol&gt;
&lt;li&gt;按位序插入
&lt;ol&gt;
&lt;li&gt;带头结点&lt;/li&gt;
&lt;li&gt;不带头结点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;指定结点的后插操作&lt;/li&gt;
&lt;li&gt;指定结点的前插操作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;删除
&lt;ol&gt;
&lt;li&gt;按位序删除&lt;/li&gt;
&lt;li&gt;指点结点的删除&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找（三个时间复杂度都是 &lt;code&gt;O(n)&lt;/code&gt; ）
&lt;ol&gt;
&lt;li&gt;按位查找
&lt;ol&gt;
&lt;li&gt;单链表不具备随机访问的特性，只能依次扫描&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;按值查找&lt;/li&gt;
&lt;li&gt;求单链表长度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;建立（设置一个指向表尾的指针）：核心是初始化操作、指定结点的后插操作
&lt;ol&gt;
&lt;li&gt;尾插法：&lt;/li&gt;
&lt;li&gt;头插法：重要应用：链表的逆置&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;4双链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4双链表&#34;&gt;#&lt;/a&gt; 4. 双链表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;单链表无法逆向检索，双链表可进可退，存储密度较低一些&lt;/li&gt;
&lt;li&gt;初始化&lt;/li&gt;
&lt;li&gt;插入&lt;/li&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;li&gt;遍历：双链表不可随机存取，按位查找、按值查找操作都只能用遍历的方式实现。时间复杂度 O (n)&lt;/li&gt;
&lt;li&gt;空表：前后指针都指向 null&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;5循环链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5循环链表&#34;&gt;#&lt;/a&gt; 5. 循环链表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;循环单链表
&lt;ol&gt;
&lt;li&gt;单链表：表尾结点的 next 指针指向 NULL。单链表：从一个结点出发只能找到后续的各个结点&lt;/li&gt;
&lt;li&gt;循环单链表：表尾结点的 next 指针指向头结点。循环单链表：从一个结点出发可以找到其他任何一个结点&lt;/li&gt;
&lt;li&gt;从头结点找到尾部，时间复杂度为 O (n)。从尾部找到头部，时间复杂度为 O (1)&lt;/li&gt;
&lt;li&gt;空表：单手抱住空虚的自己；非空链表：&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;循环双链表
&lt;ol&gt;
&lt;li&gt;双链表：表头结点的 prior 指向 NULL；表尾结点的 next 指向 NULL&lt;/li&gt;
&lt;li&gt;循环双链表：表头结点的 prior 指向表尾结点；表尾结点的 next 指向头结点&lt;/li&gt;
&lt;li&gt;空表：双手抱住空虚的自己；非空链表：&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;代码问题：如何判断空表？如何判断指定结点是否为表尾结点 / 表头节点？如何在表头、表中、表尾插入 / 删除一个结点&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;6静态链表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6静态链表&#34;&gt;#&lt;/a&gt; 6. 静态链表&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;静态链表
&lt;ol&gt;
&lt;li&gt;分配一整片连续的内存空间，各个结点集中安置&lt;/li&gt;
&lt;li&gt;静态链表也可看作用数组的方式实现的链表&lt;/li&gt;
&lt;li&gt;在静态链表中游标充当指针，游标为 - 1 时就是到达表尾&lt;/li&gt;
&lt;li&gt;优点：增、删操作不需要大量移动元素&lt;/li&gt;
&lt;li&gt;缺点：不能随机存取，只能从头结点开始依次往后查找；&lt;strong&gt;容量固定不可变&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;适用场景：①不支持指针的低级语言；②数据元素数量固定不变的场景（如操作系统的文件分配表 FAT）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义静态链表&lt;/li&gt;
&lt;li&gt;基本操作的实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&#34;7顺序表和链表比较&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7顺序表和链表比较&#34;&gt;#&lt;/a&gt; 7. 顺序表和链表比较&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;顺序表&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;链表&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;逻辑结构&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;都属于线性表，都是线性结构&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;都属于线性表，都是线性结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;存储结构 / 物理结构&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优点：支持随机存取、存储密度高 &lt;br/&gt;缺点：大片连续空间分配不方便，改变容量不方便&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;优点：离散的小空间分配方便，改变容量方便&lt;br/&gt;缺点：不可随机存取，存储密度低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数据运算 / 基本操作&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;创建&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;需要预分配大片连续空间。若分配空间过小，则之后不方便拓展容量；若分配空间过大，则浪费内存资源&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;只需分配一个头结点（也可以不要头结点，只声明一个头指针），之后方便拓展&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入 / 删除元素要将后续元素都后移 / 前移时间复杂度 O (n)&lt;br/&gt;时间开销主要来自移动元素&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;插入 / 删除元素只需修改指针即可&lt;br/&gt;时间复杂度 O (n), 时间开销主要来自查找目标元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;弹性&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;❌&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增、删&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;❌&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;✅&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;技巧&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表长可预估、查询（搜索）操作较多&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表长难以预估、经常要增加 / 删除元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;!-- #### 3.栈和队列

#### 4.串

#### 5.树和二叉树

#### 6.图

#### 7.查找

#### 8.排序 --&gt;
</content>
        <category term="数据结构" />
        <updated>2020-02-20T22:39:44.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/02/12/1002_Git/</id>
        <title>Git常用命令</title>
        <link rel="alternate" href="http://example.com/2019/02/12/1002_Git/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;11-查看提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-查看提交历史&#34;&gt;#&lt;/a&gt; 11、查看提交历史；&lt;/h3&gt;
&lt;p&gt;git reflog&lt;br&gt;
git 仓库组成：&lt;br&gt;
Workspace：开发者工作区，也就是你当前写代码的目录，它一般保持的是最新仓库代码。&lt;br&gt;
Index / Stage：缓存区，最早叫 Stage，现在新版本已经改成 index，位于.git 目录中，它用来存放临时动作，比如我们做了 git add 或者 git rm，都是把文件提交到缓存区，这是可以撤销的，然后在通过 git commit 将缓存区的内容提交到本地仓库&lt;br&gt;
 Repository：仓库区，是仓库代码，你所有的提交都在这里，git 会保存好每一个历史版本，存放在仓库区，它可以是服务端的也可以是本地的，因为在分布式中，任何人都可以是主仓库。&lt;br&gt;
Remote：远程仓库，只能是别的电脑上的仓库，即服务器仓库。&lt;/p&gt;
&lt;h3 id=&#34;12-创建分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-创建分支&#34;&gt;#&lt;/a&gt; 12、创建分支；&lt;/h3&gt;
&lt;p&gt;git checkout -b 分支名&lt;br&gt;
等价于&lt;br&gt;
 git branch 分支名&lt;br&gt;
 git checkout 分支名&lt;/p&gt;
&lt;h3 id=&#34;13-查看当前分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-查看当前分支&#34;&gt;#&lt;/a&gt; 13、查看当前分支；&lt;/h3&gt;
&lt;p&gt;git branch&lt;/p&gt;
&lt;h3 id=&#34;14-切换分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#14-切换分支&#34;&gt;#&lt;/a&gt; 14、切换分支；&lt;/h3&gt;
&lt;p&gt;git checkout&lt;/p&gt;
&lt;h3 id=&#34;15-合并分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#15-合并分支&#34;&gt;#&lt;/a&gt; 15、合并分支；&lt;/h3&gt;
&lt;p&gt;git merge 分支名&lt;/p&gt;
&lt;h3 id=&#34;16-查看当前所有分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#16-查看当前所有分支&#34;&gt;#&lt;/a&gt; 16、查看当前所有分支；&lt;/h3&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;h3 id=&#34;17-删除本地分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17-删除本地分支&#34;&gt;#&lt;/a&gt; 17、删除本地分支；&lt;/h3&gt;
&lt;p&gt;git branch -D 分支名&lt;/p&gt;
&lt;h3 id=&#34;18-删除远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18-删除远程分支&#34;&gt;#&lt;/a&gt; 18、删除远程分支；&lt;/h3&gt;
&lt;p&gt;git push origin --delete 分支名&lt;/p&gt;
&lt;h3 id=&#34;19-本地仓库与远程仓库关联&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#19-本地仓库与远程仓库关联&#34;&gt;#&lt;/a&gt; 19、本地仓库与远程仓库关联；&lt;/h3&gt;
&lt;p&gt;git remote add origin 仓库地址&lt;/p&gt;
&lt;h3 id=&#34;20-推送到远程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-推送到远程&#34;&gt;#&lt;/a&gt; 20、推送到远程；&lt;/h3&gt;
&lt;p&gt;git push -u origin 分支仓库名&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地分支&#34;&gt;#&lt;/a&gt; 20、查看本地分支；&lt;/h3&gt;
&lt;p&gt;git branch&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地和远程仓库的所有分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地和远程仓库的所有分支&#34;&gt;#&lt;/a&gt; 20、查看本地和远程仓库的所有分支；&lt;/h3&gt;
&lt;p&gt;git branch -a&lt;/p&gt;
&lt;h3 id=&#34;20-查看远程仓库的分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看远程仓库的分支&#34;&gt;#&lt;/a&gt; 20、查看远程仓库的分支&lt;/h3&gt;
&lt;p&gt;git branch -r&lt;/p&gt;
&lt;h3 id=&#34;20-查看本地库已经关联的远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-查看本地库已经关联的远程仓库&#34;&gt;#&lt;/a&gt; 20、查看本地库已经关联的远程仓库&lt;/h3&gt;
&lt;p&gt;git remote -v&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2019-02-12T02:14:10.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/02/11/1001_Git/</id>
        <title>Git常用命令</title>
        <link rel="alternate" href="http://example.com/2019/02/11/1001_Git/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;1-全局配置git环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-全局配置git环境&#34;&gt;#&lt;/a&gt; 1、全局配置 git 环境；&lt;/h3&gt;
&lt;p&gt;git config --global &lt;a href=&#34;http://user.name&#34;&gt;user.name&lt;/a&gt; “用户名”&lt;br&gt;
git config --global user.email “邮箱”&lt;br&gt;
 基本命令：&lt;br&gt;
mkdir 文件夹名；创建文件夹&lt;br&gt;
 cd 文件夹名；进入文件夹&lt;br&gt;
 ls；查看文件目录&lt;br&gt;
 ls -sh；查看全部文件目录包含隐藏目录&lt;/p&gt;
&lt;h3 id=&#34;2-初始化git仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-初始化git仓库&#34;&gt;#&lt;/a&gt; 2、初始化 git 仓库；&lt;/h3&gt;
&lt;p&gt;git init&lt;/p&gt;
&lt;h3 id=&#34;3-将本地工作区的文件添加到本地版本库的提交缓存中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-将本地工作区的文件添加到本地版本库的提交缓存中&#34;&gt;#&lt;/a&gt; 3、将本地工作区的文件添加到本地版本库的提交缓存中；&lt;/h3&gt;
&lt;p&gt;git add .&lt;/p&gt;
&lt;h3 id=&#34;4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-将本地版本库提交缓存stage中的文件提交到本地版本库master中生成40位哈希值作为id&#34;&gt;#&lt;/a&gt; 4、将本地版本库提交缓存 stage 中的文件提交到本地版本库 master 中；生成 40 位哈希值，作为 id，&lt;/h3&gt;
&lt;p&gt;git commit -m “提交信息”&lt;/p&gt;
&lt;!-- 修改提交信息命令 ，编辑后command+x退出编辑界面--&gt;
&lt;p&gt;git commit -amend&lt;/p&gt;
&lt;h3 id=&#34;5-查看历史提交日志加上prettyoneline选项简洁输出&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-查看历史提交日志加上prettyoneline选项简洁输出&#34;&gt;#&lt;/a&gt; 5、查看历史提交日志，加上–pretty=oneline 选项简洁输出；&lt;/h3&gt;
&lt;p&gt;git log&lt;br&gt;
HEAD-&amp;gt;master: 指本次提交到 master 仓库&lt;/p&gt;
&lt;h3 id=&#34;6-回滚代码仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-回滚代码仓库&#34;&gt;#&lt;/a&gt; 6、回滚代码仓库；&lt;/h3&gt;
&lt;p&gt;git reset --hard&lt;/p&gt;
&lt;!-- 存在三种模式 --&gt;???
&lt;p&gt;–soft 、–mixed 以及–hard 是三个恢复等级&lt;br&gt;
使用–soft 就仅仅将头指针恢复，已经 add 的暂存区以及工作空间的所有东西都不变。&lt;br&gt;
如果使用–mixed，就将头恢复掉，已经 add 的暂存区也会丢失掉，工作空间的代码什么的是不变的。&lt;br&gt;
如果使用–hard，那么一切就全都恢复了，头变，aad 的暂存区消失，代码什么的也恢复到以前状态&lt;br&gt;
 git reset --hard HEAD^&lt;br&gt;
git reset --hard HEAD~3&lt;/p&gt;
&lt;h3 id=&#34;7-查看当前仓库状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-查看当前仓库状态&#34;&gt;#&lt;/a&gt; 7、查看当前仓库状态；&lt;/h3&gt;
&lt;p&gt;git status&lt;br&gt;
 英文对应：&lt;br&gt;
A：未修改&lt;br&gt;
 AM：修改&lt;br&gt;
 Untracked：未提交&lt;br&gt;
 modified：新文件，但未提交&lt;/p&gt;
&lt;!-- 工作区与缓存区 --&gt;
&lt;p&gt;工作区：当前目录&lt;br&gt;
缓存区：使用 git add 命令提交的文件信息，位于.git 目录下 index 文件中&lt;br&gt;
 git add . 与 git add --all 区别&lt;br&gt;
这个命令会将当前目录下包括子目录下所有改动的文件提交到暂存区，注意只包括改动的文件，不改动的不会放到缓存区。&lt;br&gt;
这个命令还会把删除的文件也提交进去&lt;br&gt;
如你在本地删除了 min.c 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的 min.c 也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件，如果不想删除文件，可以使用 git add .，注意后面有一个 “.” 点的符号，这个命令跟 git add --all 一样，但是不会记录删除操作&lt;/p&gt;
&lt;h3 id=&#34;8-将文件撤销回到最近一次修改的状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-将文件撤销回到最近一次修改的状态&#34;&gt;#&lt;/a&gt; 8、将文件撤销回到最近一次修改的状态；&lt;/h3&gt;
&lt;p&gt;git checkout – file 回到了之前修改的状态&lt;/p&gt;
&lt;h3 id=&#34;9-查看单个文件可回滚版本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-查看单个文件可回滚版本&#34;&gt;#&lt;/a&gt; 9、查看单个文件可回滚版本；&lt;/h3&gt;
&lt;p&gt;git log filename&lt;/p&gt;
&lt;h3 id=&#34;10-删除文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-删除文件&#34;&gt;#&lt;/a&gt; 10、删除文件；&lt;/h3&gt;
&lt;p&gt;git rm 文件名&lt;/p&gt;
</content>
        <category term="Git" />
        <updated>2019-02-11T11:52:20.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2019/01/13/4000_JavaScript/</id>
        <title>JavaScript</title>
        <link rel="alternate" href="http://example.com/2019/01/13/4000_JavaScript/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&#34;1javascript介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1javascript介绍&#34;&gt;#&lt;/a&gt; 1.JavaScript 介绍&lt;/h2&gt;
&lt;h3 id=&#34;1javascript应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1javascript应用&#34;&gt;#&lt;/a&gt; 1.JavaScript 应用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;web 端开发&lt;/li&gt;
&lt;li&gt;移动端开发&lt;/li&gt;
&lt;li&gt;小程序端开发&lt;/li&gt;
&lt;li&gt;桌面应用开发&lt;/li&gt;
&lt;li&gt;后端开发&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2javascript运行环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2javascript运行环境&#34;&gt;#&lt;/a&gt; 2.JavaScript 运行环境&lt;/h2&gt;
&lt;h3 id=&#34;1浏览器工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1浏览器工作原理&#34;&gt;#&lt;/a&gt; 1. 浏览器工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器内核&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gecko：早期被 Netscape 和 Mozilla、Firefox 浏览器使用，代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能&lt;/li&gt;
&lt;li&gt;Trident：微软开发的一种排版引擎，被 IE4~IE11 浏览器使用，但是 Edge 浏览器已经转向 Blink&lt;/li&gt;
&lt;li&gt;Webkit：苹果基于 KHTML 开发、开源的，用于 Safari 浏览器，Google Chrome 之前也在使用&lt;/li&gt;
&lt;li&gt;Blink：Google 谷歌基于 webkit 内核开发的，目前应用于 Google Chrome、Edge、Opera 等&lt;/li&gt;
&lt;li&gt;Presto:Opera 浏览器曾经使用过，特点是渲染速度的优化达到了极致，然而代价是牺牲了网页的兼容性&lt;/li&gt;
&lt;li&gt;内核也称排班引擎、浏览器引擎、页面渲染引擎、样板引擎&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核工作原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器渲染过程，需要将 JavaScript 代码转换为机器语言后交给 CPU 执行&lt;img src=&#34;../../all_photo/image-20220602085625470.png&#34; alt=&#34;image-20220602085625470&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Webkit浏览器&lt;/code&gt; 内核，由 WebCore 与 JavaScriptCore 两部分组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WebCore：负责 HTML、CSS 解析、布局、渲染等相关工作&lt;/li&gt;
&lt;li&gt;JavaScriptCore：解析、执行 JavaScript 代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2v8引擎工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2v8引擎工作原理&#34;&gt;#&lt;/a&gt; 2.V8 引擎工作原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JavaScript 引擎（V8 引擎是 Google 开发）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SpiderMonkey：第一款 JavaScript 引擎，由 BrendanEich 开发（也就是 JavaScript 作者）&lt;/li&gt;
&lt;li&gt;Chakra：微软开发，用于 IT 浏览器&lt;/li&gt;
&lt;li&gt;JavaScriptCore：WebKit 中的 JavaScript 引擎，Apple 公司开发&lt;/li&gt;
&lt;li&gt;V8 引擎：Google 开发的强大 JavaScript 引擎，也帮助 Chrome 从众多浏览器中脱颖而出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;V8 引擎工作原理&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;V8 定义：C&lt;ins&gt; 编写的 Google 开源高性能 JavaScript 和 webAssembly 引擎，它用于 Chrome 和 Node.js，在很多环境及平台下可以运行，也可以单独运行，也可以嵌入 C&lt;/ins&gt; 应用程序中运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parse：转换器，Parse 模块会将 JavaScript 代码转换成 AST (抽象语法树), 这是因为解释器并不直接认识 JavaScript 代码，如果函数没有被调用，那么是不会被转换成 AST (词法分析: &lt;code&gt;Scanner&lt;/code&gt;  转换生成多个 tokens:[{type:‘keyword’,value:‘const’}] 等、语法分析、)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:js 代码转换为 AST 抽象语法树网站 (&lt;a href=&#34;https://astexplorer.net/&#34;&gt;https://astexplorer.net/&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lgnition：解释器，会将 AST 转换成 ByteCode（字节码）, 因为编写代码运行在具体什么样环境并不清楚，所以需要将该代码转换为字节码，字节码可以运行在各个环境，同时会收集 TurboFan 优化所需要的信息 (比如函数参数的类型信息，有了类型才能进行真实的运算), 如果函数只调用一次，Ignition 会解释执行字节码 ByteCode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TurboFan：编译器，可以将字节码编译为 CPU 可以直接执行的机器码；如果一个函数被多次调用，那么就会被标记为 &lt;code&gt;热点函数&lt;/code&gt; ，那么就会经过 TurboFan 转换成优化的机器码，提高代码的执行性能；但是机器码实际上也会被还原为 ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如 sum 函数原来执行的是 number 类型，后来执行变成了 string 类型），之前优化的机器码并不能正确的处理运算，就会逆向的经过 &lt;code&gt;Deoptimization&lt;/code&gt;  优化转换成字节码，继续进行执行 (从这一点也可以看出 typescript 代码运行效率会好一些，因为在编写时就已经确定参数的类型，减少了逆向转换为字节码再一次进行运行编译为汇编语言然后机器代码，越过这个过程就会快一些)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Orinoco：垃圾回收，将程序中不需要的内存回收？？？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行原理过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../all_photo/image-20220704154715013.png&#34; alt=&#34;image-20220704154715013&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官方执行原理过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../all_photo/image-20220704160009294.png&#34; alt=&#34;image-20220704160009294&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript 源码解析过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Blink 将源码交给 V8 引擎，Stream 获取到源码并且进行编码转换&lt;/li&gt;
&lt;li&gt;Scanner 会进行词法分析（lexical analysis），词法分析会将代码转换成各种 tokens&lt;/li&gt;
&lt;li&gt;接下来 tokens 会被转换成 AST 树，经过 Parser 和 PreParser
&lt;ol&gt;
&lt;li&gt;Parser 就是直接将 tokens 转成 AST 树架构&lt;/li&gt;
&lt;li&gt;PreParser 称之为预解析
&lt;ol&gt;
&lt;li&gt;因为并不是所有的 JavaScript 代码，在一开始时就会被执行。那么对所有的 JavaScript 代码进行解析，必然会影响网页的运行效率&lt;/li&gt;
&lt;li&gt;所以 V8 引擎就实现了 Lazy Parsing（延迟解析）的方案，它的作用是将不必要的函数进行预解析，也就是只解析暂时需要的内容，而对&lt;strong&gt;函数的全量解析&lt;/strong&gt;是在&lt;strong&gt;函数被调用时&lt;/strong&gt;才会进行&lt;/li&gt;
&lt;li&gt;比如我们在一个函数 outer 内部定义了另外一个函数 inner，那么 inner 函数就会进行预解析，生成 AST 树后，会被 Ignition 转成字节码（bytecode）, 之后的过程就是代码的执行过程（后续会详细分析）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript 源码执行具体操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化全局对象
&lt;ol&gt;
&lt;li&gt;js 引擎会在执行代码之前，会在堆内存中创建一个全局对象：Global Object（GO）&lt;/li&gt;
&lt;li&gt;该对象所有的作用域（scope）都可以访问，里面会包含 Date、Array、String、Number、setTimeout、setInterval 等等，其中有一个 window 属性指向自己&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;执行上下文栈 (调用栈)
&lt;ol&gt;
&lt;li&gt;js 引擎内部有一个执行上下文栈 (Execution Context Stack, 简称 ECS), 它是用于执行代码的调用栈&lt;/li&gt;
&lt;li&gt;该栈执行的是全局代码块，全局的代码块为了执行会构建一个 Global Execution Context (GEC: 全局执行上下文),GEC 会被放入到 ECS 中执行&lt;/li&gt;
&lt;li&gt;GEC 被放入到 ECS 中里面包含两部分内容
&lt;ol&gt;
&lt;li&gt;在代码执行前，在 parser 转成 AST 的过程中，会将全局定义的变量、函数等加入到 GlobalObject 中，但是并不会赋值，这个过程也称之为变量的作用域提升（hoisting）&lt;/li&gt;
&lt;li&gt;在代码执行中，对变量赋值，或者执行其他的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（Functional Execution Context，简称 FEC），并且压入到 EC Stack 中&lt;/li&gt;
&lt;li&gt;FEC 中包含三部分内容
&lt;ol&gt;
&lt;li&gt;在解析函数成为 AST 树结构时，会创建一个 Activation Object (AO):AO 中包含形参、arguments、函数定义和指向函数对象、定义的变量（&lt;strong&gt;VO:AO&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;作用域链：由 VO（在函数中就是 AO 对象）和父级 VO 组成，查找时会一层层查找&lt;/li&gt;
&lt;li&gt;this 绑定的值：根据不同的情况绑定 this&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;变量环境和记录 ( &lt;code&gt;作用域链考点&lt;/code&gt; )
&lt;ol&gt;
&lt;li&gt;概念
&lt;ol&gt;
&lt;li&gt;VO：全局变量对象，创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中&lt;/li&gt;
&lt;li&gt;GO：全局对象，进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问 (全局)&lt;/li&gt;
&lt;li&gt;AO：私有变量对象 (函数即将被执行，还没有还执行)，进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问 (局部)&lt;/li&gt;
&lt;li&gt;GEC (global excution context) 全局执行上下文：执行全局代码，FEC (function excution context) 函数执行上下文：执行函数代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数的作用域与函数定义位置有关，与调用位置无关&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;早期 ECMA 版本规范：每一个执行上下文被关联到一个变量对象 (variable,VO), 在源代码中的变量和函数声明会被作为属性添加到 VO 中，对于函数来说，参数也会被添加到 VO 中&lt;/li&gt;
&lt;li&gt;在最新的 ECMA 的版本规范中，已经修改不称作 VO、GO、AO 等，而是称为变量环境，每添加的变量、函数叫作环境记录。每一个执行上下文会关联到一个 &lt;code&gt;变量环境&lt;/code&gt;  (VariableEnvironment 简称 VE) 中，在执行代码中变量和函数的声明会作为 &lt;code&gt;环境记录&lt;/code&gt;  (Environment Record) 添加到变量环境中，对于函数来说，参数也会被作为环境记录添加到变量环境中&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3javascript内存原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3javascript内存原理&#34;&gt;#&lt;/a&gt; 3.JavaScript 内存原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;内存管理
&lt;ol&gt;
&lt;li&gt;内存的管理有如下的生命周期
&lt;ol&gt;
&lt;li&gt;分配所申请的内存空间&lt;/li&gt;
&lt;li&gt;使用所分配的内存空间&lt;/li&gt;
&lt;li&gt;不使用时进行释放&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;管理内存的方式
&lt;ol&gt;
&lt;li&gt;手动管理内存：C、C++&lt;/li&gt;
&lt;li&gt;自动管理内存：Java、JavaScript、python、Swift、Dart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;内存分配
&lt;ol&gt;
&lt;li&gt;JS 对于基本数据类型内存的分配会在执行时，直接在栈空间进行分配&lt;/li&gt;
&lt;li&gt;对于复杂数据类型内存的分配会在堆内存中开辟一块空间，并且将这块空间的指针返回值变量引用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JS 的垃圾回收，Garbage Collection，简称&lt;strong&gt; GC&lt;/strong&gt;
&lt;ol&gt;
&lt;li&gt;不再使用的对象，称之为垃圾，需要被回收释放更多的内存空间&lt;/li&gt;
&lt;li&gt;Java 的运行环境 JVM，JavaScript 的运行环境 js 引擎都会有内存垃圾回收器&lt;/li&gt;
&lt;li&gt;GC 算法
&lt;ol&gt;
&lt;li&gt;引用计数：内存中存在一个引用计数，retain count：默认为 0，缺点可能会产生循环引用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标记清除&lt;/strong&gt;：设置一个根对象 (root object), 垃圾回收器会定期从这个根开始，找所有从开始有引用的对象，对于没有引用的对象，就认为是不可用对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;常见 GC 内存算法
&lt;ol&gt;
&lt;li&gt;JavaScript 垃圾回收&lt;/li&gt;
&lt;li&gt;引用计数算法&lt;/li&gt;
&lt;li&gt;标记清除算法&lt;/li&gt;
&lt;li&gt;标记整理算法&lt;/li&gt;
&lt;li&gt;分代回收算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;V8 引擎内存管理
&lt;ol&gt;
&lt;li&gt;V8 的分代算法&lt;/li&gt;
&lt;li&gt;V8 的内存分配&lt;/li&gt;
&lt;li&gt;新生代对象回收&lt;/li&gt;
&lt;li&gt;旧生代对象回收&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Performmance 调试&lt;/li&gt;
&lt;li&gt;JavaScript 内存泄漏&lt;/li&gt;
&lt;li&gt;严格模式
&lt;ol&gt;
&lt;li&gt;概念
&lt;ol&gt;
&lt;li&gt;严格模式是一种具有限制性的 JavaScript 模式，从而使代码隐式的脱离了 &lt;code&gt;懒散（sloppy）模式&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;支持严格模式的浏览器在检测到代码中有严格模式时，会以更加严格的方式对代码进行检测和执行&lt;/li&gt;
&lt;li&gt;严格模式对正常的 JavaScript 语义进行了一些限制
&lt;ol&gt;
&lt;li&gt;严格模式通过抛出错误来消除一些原有的静默（silent）错误&lt;/li&gt;
&lt;li&gt;严格模式让 JS 引擎在执行代码时可以进行更多的优化（不需要对一些特殊的语法进行处理）&lt;/li&gt;
&lt;li&gt;严格模式禁用了在 ECMAScript 未来版本中可能会定义的一些语法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;开启严格模式
&lt;ol&gt;
&lt;li&gt;支持在 js 文件中开启严格模式&lt;/li&gt;
&lt;li&gt;支持对某一个函数开启严格模式&lt;/li&gt;
&lt;li&gt;严格模式通过在文件或者函数开头使用 use strict 来开启&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;严格模式限制
&lt;ol&gt;
&lt;li&gt;禁止意外创建全局变量&lt;/li&gt;
&lt;li&gt;不允许函数有相同的参数名称&lt;/li&gt;
&lt;li&gt;出现静默错误&lt;/li&gt;
&lt;li&gt;不允许使用原先的八进制格式&lt;/li&gt;
&lt;li&gt;with 语句不允许使用&lt;/li&gt;
&lt;li&gt;eval 函数不会向上引用变量 (不会再向上层作用域添加变量)&lt;/li&gt;
&lt;li&gt;严格模式下试图删除不可删除的属性&lt;/li&gt;
&lt;li&gt;严格模式下，this 绑定不会默认转成对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4javascript事件循环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4javascript事件循环&#34;&gt;#&lt;/a&gt; 4.JavaScript 事件循环&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;浏览器的进程模式
&lt;ol&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;JavaScript 线程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;浏览器的事件循环
&lt;ol&gt;
&lt;li&gt;宏任务 macrotask&lt;/li&gt;
&lt;li&gt;微任务 microtask&lt;/li&gt;
&lt;li&gt;常见面试题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Node 的事件循环
&lt;ol&gt;
&lt;li&gt;libuv&lt;/li&gt;
&lt;li&gt;阻塞 IO&lt;/li&gt;
&lt;li&gt;非阻塞 IO&lt;/li&gt;
&lt;li&gt;宏任务 macrotask&lt;/li&gt;
&lt;li&gt;微任务 microtask&lt;/li&gt;
&lt;li&gt;常见面试题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3javascript作用域和函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3javascript作用域和函数&#34;&gt;#&lt;/a&gt; 3.JavaScript 作用域和函数&lt;/h2&gt;
&lt;h3 id=&#34;1认识作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1认识作用域&#34;&gt;#&lt;/a&gt; 1. 认识作用域&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;认识作用域&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript 编译、执行&lt;/li&gt;
&lt;li&gt;深入理解作用域&lt;/li&gt;
&lt;li&gt;作用域的嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;词法作用域&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;认识词法分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eval 函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;eval 是一个特殊的函数，可以将传入的字符串当作 JavaScript 代码来运行&lt;/li&gt;
&lt;li&gt;不建议在开发中使用
&lt;ol&gt;
&lt;li&gt;eval 代码可读性较差&lt;/li&gt;
&lt;li&gt;eval 是一个字符串，可能在执行过程中被篡改，造成恶意攻击&lt;/li&gt;
&lt;li&gt;eval 的执行必须经过 JS 解释器，不能被 JS 引擎优化&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsString = &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;var message = &amp;quot;Hello World~~&amp;quot;;console.log(message);&amp;#x27;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;eval&lt;/span&gt;(jsString);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with 关键字&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;with&lt;/code&gt;  的使用，但不推荐使用，在严格模式下会报错&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// &amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; message = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tests&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;message&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;您好&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// with语句:可以形成自己的作用域&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;with&lt;/span&gt; (object) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(message);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用域提升&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译器中变量声明和提升&lt;/li&gt;
&lt;li&gt;函数和变量的提升&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;块级作用域&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;with 作用域
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;with&lt;/code&gt;  可以自己形成作用域，先查找传进来的对象，之后再去上层查找&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;try...catch...&lt;/code&gt;  作用域&lt;/li&gt;
&lt;li&gt;let 变量声明&lt;/li&gt;
&lt;li&gt;const 变量声明&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作用域面试题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2执行上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2执行上下文&#34;&gt;#&lt;/a&gt; 2. 执行上下文&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;执行上下文
&lt;ol&gt;
&lt;li&gt;Global EC&lt;/li&gt;
&lt;li&gt;Function EC&lt;/li&gt;
&lt;li&gt;Eval EC&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;变量对象 VO
&lt;ol&gt;
&lt;li&gt;VO: 全局变量对象&lt;/li&gt;
&lt;li&gt;AO: 私有变量对象&lt;/li&gt;
&lt;li&gt;GO: 全局对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3深入函数执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3深入函数执行&#34;&gt;#&lt;/a&gt; 3. 深入函数执行&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call/apply执行函数&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;立即执行函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Scopechain&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;深入闭包&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;高阶函数：一个函数接收另一个函数作为参数或者一个函数会作为另一个函数的返回值返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt; : 过滤，接收一个&lt;strong&gt;返回布尔类型的函数为参数&lt;/strong&gt;，并且该函数具有三个参数分别为数组中的元素、数组中的元素的下标、数组本身&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt; : 映射，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forEach&lt;/code&gt; : 迭代遍历，无返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find&lt;/code&gt; : 查找的为一个对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;findIndex&lt;/code&gt; : 查找的为对象索引值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reduce&lt;/code&gt; : 累加计算&lt;/li&gt;
&lt;li&gt;方法：对象里面的函数（特殊位置的函数），函数：独立的 function 称为函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;闭包:Closure&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;维基百科：闭包又称词法闭包、函数闭包，是在支持头等函数的编程语言中，实现词法绑定的一种技术，闭包在实现上是一个结构体，它存储了一个函数和一个关联的环境，闭包和普通函数的区别在于，&lt;strong&gt;当捕捉闭包的时候，它的自由变量会在捕捉时被确定&lt;/strong&gt;，这样即使脱离了捕捉时的上下文，它也能照常运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MDN：&lt;strong&gt;一个函数和对其周围状态 (词法环境) 的引用捆绑&lt;/strong&gt;在一起 (说函数被引用包围)，这样的组合就是闭包，闭包让你可以在一个内层函数中访问到其外层函数的作用域，在 JavaScript 中，每当创建一个函数，闭包就会在函数创建时被创建出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个人理解：&lt;strong&gt;一个普通的函数，如果它可以访问到外层作用域的自由变量，那么这个函数就是一个闭包。从广义角度：(可以访问到) JavaScript 中的函数都是闭包；从狭义角度 (有访问到)：JavaScript 中的一个函数，若访问了外层作用域的自由变量，那么它就是一个闭包&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;闭包引起的内存泄漏&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用完毕后本该销毁的内存而没有销毁继续存在称为内存泄露&lt;/li&gt;
&lt;li&gt;内存释放将其设置为 &lt;code&gt;null&lt;/code&gt;  即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;闭包中引用的自由变量&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AO 对象不会被销毁时，该对象里面被闭包引用的自由变量不会被销毁，没有引用的自由变量会被 js 引擎销毁&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; name = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;GXX&amp;quot;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; age = &lt;span class=&#34;hljs-number&#34;&gt;19&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;debugger&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(name);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 按照ECAM规范整个foo函数的AO对象不会删除，所以该对象中的age属性也应该存在，但是浏览器的js引擎即V8引擎会进行优化将其删除掉&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(age);&lt;span class=&#34;hljs-comment&#34;&gt;//bar函数中不访问变量age&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; bar;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4函数的this绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4函数的this绑定&#34;&gt;#&lt;/a&gt; 4. 函数的 this 绑定&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;全局作用域下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;浏览器环境：全局作用域下 &lt;code&gt;this&lt;/code&gt;  绑定 window&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node 环境： &lt;code&gt;空对象&amp;#123;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行步骤：首先将要执行的 js 文件作为模块，然后进行加载编译，此时将 js 代码所有文件放入一个函数中，执行该函数，但是该函数调用 &lt;code&gt;call()&lt;/code&gt; , 在调用时向 &lt;code&gt;call()&lt;/code&gt;  中传入一个空对象绑定为 &lt;code&gt;this&lt;/code&gt;  即 &lt;code&gt;执行函数.call(&amp;#123;&amp;#125;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;函数作用域下&lt;/em&gt; &lt;code&gt;this&lt;/code&gt;  指向&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数在被调用时，JavaScript 会默认给 this 绑定一个值，this 指向与函数所处位置 (&lt;strong&gt;函数定义位置&lt;/strong&gt;) 无关，与&lt;strong&gt;函数被调用的方式&lt;/strong&gt;及调用位置有关，&lt;strong&gt;this 是在运行时被绑定&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;默认绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独立函数调用 &lt;code&gt;this&lt;/code&gt;  指向的是全局对象 &lt;code&gt;window&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj1&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;: foo&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将obj1的foo赋值给bar&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = obj1.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;隐式绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过某个对象进行调用，即调用位置中是&lt;strong&gt;通过某个对象发起的函数调用&lt;/strong&gt; (谁发起函数调用 this 就绑定谁)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; test = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;: foo&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj1&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;: test&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj2 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;obj2&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;obj1&lt;/span&gt;: obj1&lt;br&gt;&amp;#125;&lt;br&gt;obj2.&lt;span class=&#34;hljs-property&#34;&gt;obj1&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;span class=&#34;hljs-comment&#34;&gt;//test对象&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;object.fn()&lt;/code&gt; ：object 对象会被 js 引擎绑定到 fn 函数中的 this 上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐式绑定的前提条件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;必须在调用的对象内部有一个对函数的引用（比如一个属性）&lt;/li&gt;
&lt;li&gt;如果没有这样的引用，在进行调用时，会报找不到该函数的错误&lt;/li&gt;
&lt;li&gt;正是通过这个引用，间接的将 this 绑定到了这个对象上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;显示绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (数组形式)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2,num3&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(num1+num2+num3,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;call&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;);&lt;span class=&#34;hljs-comment&#34;&gt;//剩余参数形式&lt;/span&gt;&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;apply&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;]);&lt;span class=&#34;hljs-comment&#34;&gt;//数组形式&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个参数为绑定对象，第二个参数为参数列表 (剩余参数形式), &lt;code&gt;bind&lt;/code&gt;  返回为一个新的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 默认绑定和显示绑定bind冲突：优先级（显示绑定）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newFoo = foo.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;newFoo&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;new 绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 new 关键字来调用函数执行如下的操作
&lt;ol&gt;
&lt;li&gt;创建一个全新的对象，&lt;strong&gt;并将该对象赋值给 this，函数最后返回该对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这个新对象会被执行 prototype 连接&lt;/li&gt;
&lt;li&gt;这个新对象会绑定到函数调用的 this 上（this 的绑定在这个步骤完成）&lt;/li&gt;
&lt;li&gt;如果函数没有返回其他对象，表达式会返回这个新对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内置函数绑定&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 因为setTimeout内部实现函数调用时为独立函数调用，所以打印this时指向window&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);  &lt;span class=&#34;hljs-comment&#34;&gt;//window&lt;/span&gt;&lt;br&gt;&amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;数组.forEach/map/filter/find等高阶函数&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; names = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;];&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 函数直接独立调用指向window&lt;/span&gt;&lt;br&gt;names.&lt;span class=&#34;hljs-title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(item,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// forEach函数接收两个参数，第一个参数为一个函数，第二个参数为this绑定对象&lt;/span&gt;&lt;br&gt;names.&lt;span class=&#34;hljs-title function_&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;item&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(item,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;forEach&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;div的点击&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2、监听box盒子的点击,内部函数调用实现为：隐式this绑定调用进行打印即boxDiv.onclick()形式调用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; boxDiv = &lt;span class=&#34;hljs-variable language_&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;querySelector&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.box&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1.方式一：该方式添加监听事件会进行覆盖，也就是后面一个监听事件会覆盖前面一个，只生效一个最后一个事件&lt;/span&gt;&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-property&#34;&gt;onclick&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2.方式二：不会进行事件覆盖，会将函数收集到一个数组里面，执行时进行遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 内部函数调用实现为：call()方式，即fn.call(boxDiv)&lt;/span&gt;&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;boxDiv.&lt;span class=&#34;hljs-title function_&#34;&gt;addEventListener&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;click&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;规则的优先级&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;new 绑定 &amp;gt; 显示绑定 (bind/call/apply) &amp;gt; 隐式绑定 (object.foo ()) &amp;gt; 默认绑定 (独立函数调用)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;默认规则 (独立调用) 的优先级最低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示绑定优先级高于隐式绑定&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;object.&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;object.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;call&amp;quot;&lt;/span&gt;);&lt;span class=&#34;hljs-comment&#34;&gt;//call()绑定&lt;/span&gt;&lt;br&gt;object.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;apply&amp;quot;&lt;/span&gt;);&lt;span class=&#34;hljs-comment&#34;&gt;//apply()绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = object.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bind&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//bind()绑定优先级比较&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;:foo.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bind&amp;quot;&lt;/span&gt;)&lt;br&gt;&amp;#125;&lt;br&gt;object.&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new 绑定优先级高于隐式绑定&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;GXX&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// new的优先级高于隐式绑定&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; object.&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new 绑定优先级高于 bind&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 结论：new关键字不能和apply/call一起来使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// new VS bind&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; bar = foo.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bind&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊情况 —— 忽略显示绑定&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;call&amp;quot;&lt;/span&gt;);&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;apply&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// apply/call/bind:当传入null/undefined时，自动将this绑定成全局对象&lt;/span&gt;&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;); &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = foo.&lt;span class=&#34;hljs-title function_&#34;&gt;bind&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// var fn = foo.bind(undefined);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(); &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊情况 —— 间接函数引用&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object1&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object2 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;object2&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;;&lt;br&gt;object2.&lt;span class=&#34;hljs-property&#34;&gt;bar&lt;/span&gt; = object1.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;;&lt;br&gt;object2.&lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;span class=&#34;hljs-comment&#34;&gt;//打印object2对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 立即执行函数(匿名函数)，当作独立函数调用，打印全局对象window&lt;/span&gt;&lt;br&gt;(object2.&lt;span class=&#34;hljs-property&#34;&gt;bar&lt;/span&gt; = object1.&lt;span class=&#34;hljs-property&#34;&gt;foo&lt;/span&gt;)();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特殊情况 ——ES6 箭头函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据外层作用域来决定 &lt;code&gt;this&lt;/code&gt;  指向&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object =&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;data&lt;/span&gt;:[],&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;getData&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*     // 发送网络请求，将结果放到上面data属性中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    // 在箭头函数之前的解决方案&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    // 使用闭包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    var _this = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;      var result = [&amp;quot;111&amp;quot;,&amp;quot;222&amp;quot;,&amp;quot;333&amp;quot;,&amp;quot;444&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;      _this.data = result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    &amp;#125;, 2000); */&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 箭头函数出现后&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = [&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;222&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;333&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;444&amp;quot;&lt;/span&gt;];&lt;br&gt;      &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt; = result;&lt;br&gt;    &amp;#125;, &lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 隐式绑定，将getData方法中的this指向object对象，则_this就为object对象，即可拿到result数据&lt;/span&gt;&lt;br&gt;object.&lt;span class=&#34;hljs-title function_&#34;&gt;getData&lt;/span&gt;();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;this指向面试题&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对象花括号不是作用域&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,&lt;br&gt;	&lt;span class=&#34;hljs-attr&#34;&gt;foo&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;)&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//上层作用域为全局&lt;/span&gt;&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;箭头函数不看绑定，向上层作用域查找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一定要看：&lt;strong&gt;执行时看是谁发起函数调用&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;箭头函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;介绍及简写语法练习&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;call&amp;amp;apply&amp;amp;bind&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;call实现&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 给所有的函数添加一个hycall方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;hycall&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;thisArg,...args&lt;/span&gt;) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//...args没有传入参数是一个空的数组&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第一步：获取哪一个函数调用hycall&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第二步：对thisArg转成对象类型(防止传入的是非对象类型),使用thisArg对象时,当thisArg为字符串、数字、布尔等类型时需要进行转换为对应的对象&lt;/span&gt;&lt;br&gt;  thisArg = (thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; thisArg == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;(thisArg) : &lt;span class=&#34;hljs-variable language_&#34;&gt;window&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第三步：调用需要被执行的函数&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 1、使用call实现&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// fn.call(thisArg);&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 2、使用thisArg对象实现&lt;/span&gt;&lt;br&gt;  thisArg.&lt;span class=&#34;hljs-property&#34;&gt;fn&lt;/span&gt; = fn;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = thisArg.&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(...args);&lt;span class=&#34;hljs-comment&#34;&gt;//展开时至少是一个空的数组&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// delete thisArg.fn;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第四步：将最终的结果返回出去&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; result;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo函数被执行&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,num1,num2);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sum函数被执行&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,num1,num2);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num1 + num2;&lt;br&gt;&amp;#125;&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;hycall&lt;/span&gt;(&amp;#123;&amp;#125;);&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;hycall&lt;/span&gt;(&amp;#123;&amp;#125;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;hycall&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;foo.&lt;span class=&#34;hljs-title function_&#34;&gt;hycall&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;);&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;hycall&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hycall&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;apply实现&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;hyapply&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;thisArg,argArray&lt;/span&gt;) &amp;#123;&lt;span class=&#34;hljs-comment&#34;&gt;//argArray没有传入参数是undefined&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第一步：获取那一个函数调用hyapply方法&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第二步：保证传入都是对象类型&lt;/span&gt;&lt;br&gt;  thisArg = (thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; thisArg == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) ? &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;(thisArg) : &lt;span class=&#34;hljs-variable language_&#34;&gt;window&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第三步：调用执行函数&lt;/span&gt;&lt;br&gt;  thisArg.&lt;span class=&#34;hljs-property&#34;&gt;fn&lt;/span&gt; = fn;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 判断是否传入参数&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 方式一：!argArray为true没有参数，为false有参数&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = !argArray ? thisArg.&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;() : thisArg.&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(...argArray);&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 方式二：使用&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*   // 方式三：使用或运算符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  // argArray = argArray ? argArray:[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  argArray = argArray || [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var result = thisArg.fn(...argArray); */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;delete&lt;/span&gt; thisArg.&lt;span class=&#34;hljs-property&#34;&gt;fn&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; result;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sum函数被调用了&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,num1,num2);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num1 + num2;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 特殊情况一个参数也需要放入数组中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo函数被调用了&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,num);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bar函数被执行了&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;]);&lt;br&gt;sum.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;]);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; res1 = sum.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hyapply&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;]);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(res1);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; res2 = foo.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hyapply&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;]);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(res2);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; res3 = bar.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hyapply&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 边界判断(edge case)&lt;/span&gt;&lt;br&gt;bar.&lt;span class=&#34;hljs-title function_&#34;&gt;hyapply&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;bind实现&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;prototype&lt;/span&gt;&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;hybind&lt;/span&gt; = &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;thisArg, ...argArray&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第一步：获取到真实需要调用的函数&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; fn = &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第二步：绑定this&lt;/span&gt;&lt;br&gt;  thisArg = (thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; thisArg !== &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt;) ? &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;(thisArg) : &lt;span class=&#34;hljs-variable language_&#34;&gt;window&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;proxyFn&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;...args&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第三步：将函数放到thisArg中进行调用&lt;/span&gt;&lt;br&gt;    thisArg.&lt;span class=&#34;hljs-property&#34;&gt;fn&lt;/span&gt; = fn;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 特殊处理：对两个传入的参数进行合并&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; finalArgs = [...argArray, ...args]&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = thisArg.&lt;span class=&#34;hljs-title function_&#34;&gt;fn&lt;/span&gt;(...finalArgs);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;delete&lt;/span&gt; thisArg.&lt;span class=&#34;hljs-property&#34;&gt;fn&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 第四步：返回结果&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; result;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; proxyFn;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;foo函数被调用&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1, num2, num3, num4&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(num1, num2, num3, num4);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* // 系统的bind调用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var bar = foo.bind(&amp;quot;bind&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 传入参数的方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 方式一&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var newSum = sum.bind(&amp;quot;bind&amp;quot;,11,22,33,44);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;newSum();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 方式二&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var newSum = sum.bind(&amp;quot;bind&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;newSum(11,22,33,44);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 方式三&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var newSum = sum.bind(&amp;quot;bind&amp;quot;,11,22);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;newSum(33,44); */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* var bar = foo.hybind(&amp;quot;hybind&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var res = bar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;console.log(res); */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newSum = sum.&lt;span class=&#34;hljs-title function_&#34;&gt;hybind&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hybind&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; res = &lt;span class=&#34;hljs-title function_&#34;&gt;newSum&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;); &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;类数组对象 (array-like)，形式像是一个数组，本质上是一个对象，即为对象类型，不能使用数组的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;arguments参数转换数组&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1,num2&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;arguments&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// arguments转换为数组类型方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*   // 1、使用for循环遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var newArray1 = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  for (let i = 0; i &amp;lt; arguments.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    newArray1.push(arguments[i] * 10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  console.log(newArray1); */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*   // 2、将arguments转换为array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var newArray2 = Array.prototype.slice.call(arguments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  console.log(newArray2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var newArray3 = [].slice.call(arguments);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  console.log(newArray3); */&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// 3、使用ES6的语法&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newArray4 = &lt;span class=&#34;hljs-title class_&#34;&gt;Array&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;from&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;arguments&lt;/span&gt;);&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(newArray4);&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newArray5 = [...&lt;span class=&#34;hljs-variable language_&#34;&gt;arguments&lt;/span&gt;];&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(newArray5);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* // Array中slice方法实现     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;Array.prototype.hyslice = function (start,end) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var array = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  start = start || 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  end = end || array.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  var newArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  for (let i = start; i &amp;lt; end; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    newArray.push(array[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  return newArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// var newArrayFinal = Array.prototype.hyslice.call([&amp;quot;aaa&amp;quot;,&amp;quot;bbb&amp;quot;,&amp;quot;ccc&amp;quot;],1,3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var newArrayFinal = Array.prototype.hyslice.call([&amp;quot;aaa&amp;quot;,&amp;quot;bbb&amp;quot;,&amp;quot;ccc&amp;quot;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;console.log(newArrayFinal); */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* // slice方法的使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;var names = [&amp;quot;111&amp;quot;,&amp;quot;222&amp;quot;,&amp;quot;333&amp;quot;,&amp;quot;444&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;console.log(names.slice(1,3)); */&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;箭头函数中没有arguments&lt;/code&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器的全局作用域中没有 arguments&lt;/li&gt;
&lt;li&gt;node 环境下存在全局的 arguments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;箭头函数可以使用剩余参数 &lt;code&gt;(...args)&lt;/code&gt;  方式获取参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数式编程范式&lt;/li&gt;
&lt;li&gt;面向对象式编程范式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;5函数的柯里化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5函数的柯里化&#34;&gt;#&lt;/a&gt; 5. 函数的柯里化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;纯函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;纯函数的条件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定的输入，一定会产生确定的输出&lt;/li&gt;
&lt;li&gt;函数在执行过程中，不能产生副作用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;副作用理解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表示在执行一个函数时，除了返回函数值之外，还对调用函数产生了附加的影响，比如修改了全局变量，修改参数或者改变外部的存储&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// test是一个纯函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;info&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;br&gt;    ...info,&lt;span class=&#34;hljs-comment&#34;&gt;//展开运算符，对原对象进行浅拷贝，并没有修改原对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj1 = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; obj2 = &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(obj1);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(obj2);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(obj1);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯函数的优势&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安心的编写和安心的使用&lt;/li&gt;
&lt;li&gt;只是单纯实现自己的业务逻辑即可，不需要关心传入的内容是如何获得的或者依赖其他的外部变量是否已经发生了修改&lt;/li&gt;
&lt;li&gt;你在用的时候，你确定你的输入内容不会被任意篡改，并且自己确定的输入，一定会有确定的输出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯函数的案例学习&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;展开运算符，对原对象进行浅拷贝，并没有修改原对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;柯里化是什么&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;柯里化 (英语：Currying) 又译为 &lt;code&gt;卡瑞化&lt;/code&gt; 或 &lt;code&gt;加里化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;只传递给函数&lt;strong&gt;一部分参数&lt;/strong&gt;来调用它，让它返回&lt;strong&gt;一个函数&lt;/strong&gt;去处理&lt;strong&gt;剩余的参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现柯里化&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//一般函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x,y,z&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x+y+z);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用柯里化技术&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bax&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;y&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;z&lt;/span&gt;) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x+y+z);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 一般函数实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result1 = &lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result2 = &lt;span class=&#34;hljs-title function_&#34;&gt;bax&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;11&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result2);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 简化柯里化操作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;x&lt;/span&gt;) =&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;y&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;z&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x+y+z);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result3 = &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;22&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;33&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;44&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result3);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;柯里化函数的实现 (自动)&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x,y,z&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x+y+z);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化函数的实现hyCurrying&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hyCurrying&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;fn&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;curried1&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;...args1&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 判断接收参数args和函数本身需要接收的参数数量是否一致&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 当传入的参数大于等于函数需要的参数时，就执行函数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (args1.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt; &amp;gt;= fn.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt;) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;//方式一&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// return fn(...args1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*       // 方式二&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;      return fn.call(this,...args1); */&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 方式三&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 此处this理解:若curryAdd.apply(&amp;quot;test&amp;quot;)即curried1中的this，把this绑定在fn函数中 &lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; fn.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,args1);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 没有达到函数所需参数数量时，需要返回一个新的函数，继续来接收参数&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;curried2&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;...args2&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 接收到参数后，需要递归调用curried1来检查函数的参数个数是否达到所需参数的个数&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; curried1.&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,[...args1,...args2])&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// return curried1.apply(this,args.concat(args2))&lt;/span&gt;&lt;br&gt;      &amp;#125;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; curried2;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; curried1;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; curryAdd = &lt;span class=&#34;hljs-title function_&#34;&gt;hyCurrying&lt;/span&gt;(add);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result1 = &lt;span class=&#34;hljs-title function_&#34;&gt;curryAdd&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result2 = &lt;span class=&#34;hljs-title function_&#34;&gt;curryAdd&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result1);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result2);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;柯里化的应用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;函数的职责单一&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 一般函数实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;x, y, z&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;x&lt;/span&gt;: x + &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;y&lt;/span&gt;: y * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;z&lt;/span&gt;: z * z;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x + y + z)&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;add&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;));&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt; = (&lt;span class=&#34;hljs-params&#34;&gt;x&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;br&gt;  x+=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;y&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;    y*=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;(&lt;span class=&#34;hljs-params&#34;&gt;z&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;      z*=z;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (x+y+z);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)(&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(result);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;逻辑复用&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* // 23 + x = ？(x = 任意实数)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 一般函数实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;function log(date, type, message) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  console.log(`[$&amp;#123;date.getHours()&amp;#125;:$&amp;#123;date.getMinutes()&amp;#125;][$&amp;#123;type&amp;#125;]:[$&amp;#123;message&amp;#125;]`);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;log(new Date(), &amp;quot;DEBUG&amp;quot;, &amp;quot;查询数据错误&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;log(new Date(), &amp;quot;DEBUG&amp;quot;, &amp;quot;轮播图的错误&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;log(new Date(), &amp;quot;DEBUG&amp;quot;, &amp;quot;查询表单错误&amp;quot;); */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt; = date =&amp;gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;type&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-params&#34;&gt;message&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;`[&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;date.getHours()&amp;#125;&lt;/span&gt;:&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;date.getMinutes()&amp;#125;&lt;/span&gt;][&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;type&amp;#125;&lt;/span&gt;]:[&lt;span class=&#34;hljs-subst&#34;&gt;$&amp;#123;message&amp;#125;&lt;/span&gt;]`&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化--复用时间逻辑&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; nowLog = &lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;nowLog&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;6666&amp;quot;&lt;/span&gt;)(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 柯里化--复用时间逻辑、错误信息逻辑&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newAndDebug = &lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;())(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;同一类型错误信息&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;newAndDebug&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-title function_&#34;&gt;newAndDebug&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;组合函数&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将多个函数组合起来，自动依次调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现组合函数 (多个函数，多个参数)&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hyCompose&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;...fns&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// var length = fns.length;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; i = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; i &amp;lt; fns.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt;; i++) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-keyword&#34;&gt;typeof&lt;/span&gt; fns[i] !== &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;function&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TypeError&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Expected arguments are functions&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compose&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;...args&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; index = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; result = fns.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt; ? fns[index].&lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,args):args;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (++index &amp;lt; fns.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt;) &amp;#123;&lt;br&gt;      result = fns[index].&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,result);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; result;&lt;br&gt;  &amp;#125;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; compose;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;double&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num1&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num1*&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;square&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;num2&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; num2**&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; newFn = &lt;span class=&#34;hljs-title function_&#34;&gt;hyCompose&lt;/span&gt;(double,square);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-title function_&#34;&gt;newFn&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4javascript面向对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4javascript面向对象&#34;&gt;#&lt;/a&gt; 4.JavaScript 面向对象&lt;/h2&gt;
&lt;h3 id=&#34;1深入理解对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1深入理解对象&#34;&gt;#&lt;/a&gt; 1. 深入理解对象&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;补充&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript 支持多种编程范式，包括函数式编程、面向对象编程&lt;/li&gt;
&lt;li&gt;JavaScript 中的对象被设计成一组属性的无序集合，类似哈希表&lt;/li&gt;
&lt;li&gt;key 是一个标识符名称，value 可以是任意类型，也可以是其他对象或者函数类型&lt;/li&gt;
&lt;li&gt;如果值是一个函数，那么我们可以称之为是对象的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象的语法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建对象的两种方式
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;new&lt;/code&gt;  关键字及 &lt;code&gt;Object类&lt;/code&gt; 进行创建&lt;/li&gt;
&lt;li&gt;通过字面量进行创建&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对象字面量&lt;/li&gt;
&lt;li&gt;对象的类型&lt;/li&gt;
&lt;li&gt;函数对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象的内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;属性和方法定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象方法补充
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;preventExtensions&lt;/code&gt; : 禁止对象扩展新属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;seal&lt;/code&gt; : 密封对象，不允许配置和删除属性，禁止对象配置 / 删除里面的属性即设置 &lt;code&gt;configurable:false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;freeze&lt;/code&gt; : 冻结对象，不允许修改现有的属性，使属性不可以修改即设置 &lt;code&gt;writable:false&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象属性描述符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;想要对一个属性进行比较精准的操作控制，那么我们就可以使用属性描述符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过属性描述符可以精准的添加或修改对象的属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性描述符需要使用 ** &lt;code&gt;Object.defineProperty()&lt;/code&gt; ** 来对属性进行添加或者修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Object.defineProperty(obj,prop,descriptor)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;obj&lt;/code&gt; : 需要定义属性的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prop&lt;/code&gt; : 将要定义或修改的属性名称或 &lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;descriptor&lt;/code&gt; : 将要定义或修改的&lt;strong&gt;属性描述符&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;该方式添加的属性默认是不可枚举的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt; &lt;code&gt;Object.defineProperties()&lt;/code&gt; &lt;/strong&gt;: 在一个对象上定义多个新的属性或修改现有属性，返回该对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性描述符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据属性描述符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt; : 属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符
&lt;ol&gt;
&lt;li&gt;当我们直接在一个对象上定义某个属性时，这个属性的 [Configurable] 为 true&lt;/li&gt;
&lt;li&gt;当我们通过属性描述符定义一个属性时，这个属性的 [Configurable] 默认为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt; : 属性是否可以通过 for-in 或者 Object.keys () 返回该属性
&lt;ol&gt;
&lt;li&gt;当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true&lt;/li&gt;
&lt;li&gt;当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; : 属性的 value 值，读取属性时会返回该值，修改属性时，会对其进行修改
&lt;ol&gt;
&lt;li&gt;默认情况下这个值是 undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writable&lt;/code&gt; : 表示是否可以修改属性的值
&lt;ol&gt;
&lt;li&gt;当我们直接在一个对象上定义某个属性时，这个属性的 [[Writable]] 为 true&lt;/li&gt;
&lt;li&gt;当我们通过属性描述符定义一个属性时，这个属性的 [[Writable]] 默认为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存取 (访问器) 属性描述符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;configurable&lt;/code&gt; : 属性是否可以通过 delete 删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符
&lt;ol&gt;
&lt;li&gt;当我们直接在一个对象上定义某个属性时，这个属性的 [Configurable] 为 true&lt;/li&gt;
&lt;li&gt;当我们通过属性描述符定义一个属性时，这个属性的 [Configurable] 默认为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enumerable&lt;/code&gt; : 属性是否可以通过 for-in 或者 Object.keys () 返回该属性
&lt;ol&gt;
&lt;li&gt;当我们直接在一个对象上定义某个属性时，这个属性的 [[Enumerable]] 为 true&lt;/li&gt;
&lt;li&gt;当我们通过属性描述符定义一个属性时，这个属性的 [[Enumerable]] 默认为 false&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt; : 获取属性时会执行的函数，默认值为 &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; : 设置属性时会执行的函数，默认值为 undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; object = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;德尔蓝卡&amp;quot;&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;age&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;_address&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;北京市&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 存取属性描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1、隐藏某一个私有属性不希望直接被外界使用和赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 2、截获某一个属性它访问和设置值的过程时，会使用存储属性描述符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;defineProperty&lt;/span&gt;(object,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;address&amp;quot;&lt;/span&gt;,&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;configurable&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;enumerable&lt;/span&gt;:&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;get&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;_address&lt;/span&gt;;&lt;br&gt;  &amp;#125;,&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;set&lt;/span&gt;:&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;value&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;_address&lt;/span&gt; = value&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;)&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(object.&lt;span class=&#34;hljs-property&#34;&gt;address&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(object);&lt;br&gt;object.&lt;span class=&#34;hljs-property&#34;&gt;address&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;上海市&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(object);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取一次属性&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bar&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;设置一次属性值&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;configurable&lt;/th&gt;
&lt;th&gt;enumerable&lt;/th&gt;
&lt;th&gt;value&lt;/th&gt;
&lt;th&gt;writable&lt;/th&gt;
&lt;th&gt;get&lt;/th&gt;
&lt;th&gt;set&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数据属性描述符&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;不可以&lt;/td&gt;
&lt;td&gt;不可以&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;存取属性描述符&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;不可以&lt;/td&gt;
&lt;td&gt;不可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;td&gt;可以&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取对象的属性描述符&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getOwnPropertyDescriptor&lt;/code&gt; : 获取某一个特定属性的属性描述符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getOwnPropertyDescriptors&lt;/code&gt; : 获取所有属性的属性描述符&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问器属性使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象属性判断&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象的拷贝&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象的引用赋值&lt;/li&gt;
&lt;li&gt;对象的浅拷贝&lt;/li&gt;
&lt;li&gt;对象的深拷贝&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 对象增强&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object.is()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;简写属性名&lt;/li&gt;
&lt;li&gt;可计算属性名称&lt;/li&gt;
&lt;li&gt;简写方法名&lt;/li&gt;
&lt;li&gt;对象解构
&lt;ol&gt;
&lt;li&gt;嵌套解构&lt;/li&gt;
&lt;li&gt;部分解构&lt;/li&gt;
&lt;li&gt;参数上下文匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2面向对象编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2面向对象编程&#34;&gt;#&lt;/a&gt; 2. 面向对象编程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;理解面向对象&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是面向对象编程&lt;/li&gt;
&lt;li&gt;面向对象编程的特性
&lt;ol&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;li&gt;多态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;类和对象的关系&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建对象方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;工厂模式创建
&lt;ol&gt;
&lt;li&gt;该模式可以减少代码的重复量，缺点是无法获取对象的真实类型，获取对象类型都是 &lt;code&gt;object&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;构造函数创建
&lt;ol&gt;
&lt;li&gt;构造函数也称之为构造器 (constructor), 通常是我们在创建对象时会调用的函数&lt;/li&gt;
&lt;li&gt;一个普通的函数被使用 new 操作符来调用了，那么这个函数就称之为是一个构造函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;在函数内存中创建一个新的对象（空对象）&lt;/li&gt;
&lt;li&gt;这个对象内部的 [[prototype]] 属性会被赋值为该构造函数的 prototype 属性&lt;/li&gt;
&lt;li&gt;构造函数内部的 this，会指向创建出来的新对象&lt;/li&gt;
&lt;li&gt;执行函数的内部代码（函数体代码）&lt;/li&gt;
&lt;li&gt;如果构造函数没有返回非空对象，则返回创建出来的新对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：构造函数的缺点，需要为每一个对象的函数去创建一个函数对象实例，重复的创建对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;原型创建模式
&lt;ol&gt;
&lt;li&gt;认识原型&lt;/li&gt;
&lt;li&gt;对象的原型（隐式原型）
&lt;ol&gt;
&lt;li&gt;JavaScript 当中每个对象都有一个特殊的内置属性 [[prototype]]，这个特殊的对象可以指向另外一个对象&lt;/li&gt;
&lt;li&gt;原型对象的作用
&lt;ol&gt;
&lt;li&gt;当我们通过引用对象的属性 key 来获取一个 value 时，它会触发 [[Get]] 的操作&lt;/li&gt;
&lt;li&gt;这个操作会首先检查该属性是否有对应的属性，如果有的话就使用它&lt;/li&gt;
&lt;li&gt;如果对象中没有该属性，那么会访问对象 [[prototype]] 内置属性指向的对象上的属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;获取原型的方式
&lt;ol&gt;
&lt;li&gt;通过对象的__proto__属性可以获取到（但是这个是早期浏览器自己添加的，存在一定的兼容性问题）&lt;/li&gt;
&lt;li&gt;通过 Object.getPrototypeOf 方法可以获取到&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;函数的原型（显示原型）
&lt;ol&gt;
&lt;li&gt;所有的函数都有一个 prototype 的属性&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype属性&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;指向对象的显式原型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constructor属性&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;原型对象的属性：返回构造函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__proto__属性&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;指向对象的隐式原型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象继承&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;认识原型链&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;深入原型对象
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Object&lt;/code&gt;  是顶层对象， &lt;code&gt;Object的原型对象上面没有原型对象而是null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;  是所有类的父类&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;简洁的原型语法&lt;/li&gt;
&lt;li&gt;修改原型的属性
&lt;ol&gt;
&lt;li&gt;需要在原型上添加过多的属性，通常我们会重新整个原型对象&lt;/li&gt;
&lt;li&gt;每创建一个函数，就会同时创建它的 prototype 对象，这个对象也会自动获取 constructor 属性&lt;/li&gt;
&lt;li&gt;这里给 prototype 重新赋值了一个对象，那么这个新对象的 constructor 属性，会指向 Object 构造函数，而不是 Person 构造函数了&lt;/li&gt;
&lt;li&gt;默认情况下原生的 constructor 属性是不可枚举&lt;/li&gt;
&lt;li&gt;如果希望解决这个问题，就可以使用我们前面介绍的 Object.defineProperty () 函数了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;深入理解原型链
&lt;ol&gt;
&lt;li&gt;可以使用原型链继承&lt;/li&gt;
&lt;li&gt;原型链最顶层的原型对象就是 &lt;code&gt;Object&lt;/code&gt;  的原型对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;原型和实例的关系
&lt;ol&gt;
&lt;li&gt;实例的属性 &lt;code&gt;__proto__&lt;/code&gt; 指向原型对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承的实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原型链实现继承&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现方式： &lt;code&gt;子类.prototype = new 父类();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;原型链实现继承的弊端
&lt;ol&gt;
&lt;li&gt;通过直接打印对象是看不到继承的属性&lt;/li&gt;
&lt;li&gt;这个属性会被多个对象共享，如果这个属性是一个引用类型，，其中一个共享对象进行修改时，那么就会造成问题，若是基本数据类型则不会出现该问题&lt;/li&gt;
&lt;li&gt;不能给 Person 传递参数，因为这个对象是一次性创建的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;借用构造函数实现继承 (经典继承)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;constructor stealing&lt;/code&gt; : 称之为借用构造函数、经典继承、伪造对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;因为函数可以在任意的时刻被调用，因此通过 apply () 和 call () 方法也可以在新创建的对象上执行构造函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现方式&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 子类:私有属性和方法定义&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Student&lt;/span&gt;(&lt;span class=&#34;hljs-params&#34;&gt;name,age,friends,son&lt;/span&gt;) &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;// this指的是通过new绑定创建的stu对象&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;call&lt;/span&gt;(&lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;,name,age,friends);&lt;br&gt;  &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;sno&lt;/span&gt; = son;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;借用构造函数继承存在的弊端&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父类 Person 函数至少被调用了两次&lt;/li&gt;
&lt;li&gt;stu 原型对象上多出一些属性，而这些属性出现重复，因为子类本身就已经存在，但是这些属性没有存在的必要&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;组合借用继承方式（&lt;strong&gt;和借用继承没有不同&lt;/strong&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现方式&lt;/li&gt;
&lt;li&gt;存在弊端
&lt;ol&gt;
&lt;li&gt;一般都会调用两次父类构造函数，一次在创建子类原型的时候，一次在子类构造函数内部 (也就是每次创建子类实例的时候)&lt;/li&gt;
&lt;li&gt;所有的子类实例事实上会拥有两份父类的属性，一份在当前的实例自己里面 (也就是 person 本身的)，另一份在子类对应的原型对象中 (也就是 person.__proto__里面), 无需担心访问出现问题，默认一定是访问实例本身的属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;寄生式继承函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现方式&lt;/li&gt;
&lt;li&gt;存在弊端&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集成式组合继承&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;释放方式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ES6 类的使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;class 类的定义
&lt;ol&gt;
&lt;li&gt;声明式、表达式两种&lt;/li&gt;
&lt;li&gt;构造方法&lt;/li&gt;
&lt;li&gt;属性定义&lt;/li&gt;
&lt;li&gt;方法定义&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;类的实例化过程
&lt;ol&gt;
&lt;li&gt;类的构建过程解析&lt;/li&gt;
&lt;li&gt;类的类型、function 类型&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;属性分类解析
&lt;ol&gt;
&lt;li&gt;实例属性和方法&lt;/li&gt;
&lt;li&gt;原型属性和访问器&lt;/li&gt;
&lt;li&gt;static 类方法和属性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;class 类的继承
&lt;ol&gt;
&lt;li&gt;extends 关键字&lt;/li&gt;
&lt;li&gt;super 函数的使用
&lt;ol&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;普通函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Babel 的处理
&lt;ol&gt;
&lt;li&gt;Babel 工具对 class 的处理
&lt;ol&gt;
&lt;li&gt;阅读 Babel 转换后的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Babel 对继承的转换处理
&lt;ol&gt;
&lt;li&gt;Babel 继承的源码阅读&lt;/li&gt;
&lt;li&gt;_inherits&lt;/li&gt;
&lt;li&gt;_possibleConstructorReturn&lt;/li&gt;
&lt;li&gt;_classCallCheck&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向对象面试题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5es6~12新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5es6~12新特性&#34;&gt;#&lt;/a&gt; 5.ES6~12 新特性&lt;/h2&gt;
&lt;h3 id=&#34;1es6常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1es6常见新特性&#34;&gt;#&lt;/a&gt; 1.ES6 常见新特性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;基础补充
&lt;ol&gt;
&lt;li&gt;对象增强写法&lt;/li&gt;
&lt;li&gt;数组 / 对象解构&lt;/li&gt;
&lt;li&gt;var 与 let/const 区别&lt;/li&gt;
&lt;li&gt;作用域提升&lt;/li&gt;
&lt;li&gt;不允许重复声明变量&lt;/li&gt;
&lt;li&gt;window 对象的区别，let/const 不会添加到 window 对象上，&lt;strong&gt;保存的位置与之前也会有一定的区别&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2es7常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2es7常见新特性&#34;&gt;#&lt;/a&gt; 2.ES7 常见新特性&lt;/h3&gt;
&lt;h3 id=&#34;3es8常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3es8常见新特性&#34;&gt;#&lt;/a&gt; 3.ES8 常见新特性&lt;/h3&gt;
&lt;h3 id=&#34;4es9常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4es9常见新特性&#34;&gt;#&lt;/a&gt; 4.ES9 常见新特性&lt;/h3&gt;
&lt;h3 id=&#34;5es10常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5es10常见新特性&#34;&gt;#&lt;/a&gt; 5.ES10 常见新特性&lt;/h3&gt;
&lt;h3 id=&#34;6es11常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6es11常见新特性&#34;&gt;#&lt;/a&gt; 6.ES11 常见新特性&lt;/h3&gt;
&lt;h3 id=&#34;7es12常见新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7es12常见新特性&#34;&gt;#&lt;/a&gt; 7.ES12 常见新特性&lt;/h3&gt;
&lt;h2 id=&#34;6proxy-reflect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6proxy-reflect&#34;&gt;#&lt;/a&gt; 6.Proxy-Reflect&lt;/h2&gt;
&lt;h3 id=&#34;1proxy&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1proxy&#34;&gt;#&lt;/a&gt; 1.Proxy&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在 ES6 中，新增了一个 Proxy 类，这个类从名字就可以看出来，是用于帮助我们创建一个代理&lt;/li&gt;
&lt;li&gt;如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy 对象）&lt;/li&gt;
&lt;li&gt;之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2reflect&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2reflect&#34;&gt;#&lt;/a&gt; 2.Reflect&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Reflect 也是 ES6 新增的一个 API，它是一个对象，字面的意思是反射&lt;/li&gt;
&lt;li&gt;它主要提供了很多操作 JavaScript 对象的方法，有点像 Object 中操作对象的方法&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7异步处理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7异步处理&#34;&gt;#&lt;/a&gt; 7. 异步处理&lt;/h2&gt;
&lt;h3 id=&#34;1迭代器和生成器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1迭代器和生成器&#34;&gt;#&lt;/a&gt; 1. 迭代器和生成器&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;迭代器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本身为一个对象，使用户在容器对象上遍访的对象，使用该接口无需关心对象的内部实现细节，&lt;strong&gt;迭代器是帮助我们对某个数据结构进行遍历的对象&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在 JavaScript 中，&lt;strong&gt;迭代器也是一个具体的对象，这个对象需要符合迭代器协议 (iterator protocol)&lt;/strong&gt;, 迭代器协议定义了产生一系列值 (无论是有限还是无限个) 的标准方式，那么在 js 中这个标准就是一个&lt;strong&gt;特定的 next 方法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;next 方法有如下的要求
&lt;ol&gt;
&lt;li&gt;一个无参数函数或者含有一个参数的函数，返回一个应当拥有以下两个属性的对象
&lt;ol&gt;
&lt;li&gt;done（boolean）
&lt;ol&gt;
&lt;li&gt;如果迭代器可以产生序列中的下一个值，则为 false，这等价于没有指定 done 这个属性&lt;/li&gt;
&lt;li&gt;如果迭代器已将序列迭代完毕，则为 true。这种情况下，value 是可选的，如果它依然存在，即为迭代结束之后的默认返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;value
&lt;ol&gt;
&lt;li&gt;迭代器返回的任何 JavaScript 值，done 为 true 时可省略&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可迭代对象&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当一个对象实现了 ** &lt;code&gt;iterable protocol&lt;/code&gt; ** 协议时，它就是一个可迭代对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个对象要求是必须实现 &lt;code&gt;@@iterator方法&lt;/code&gt; ，即 ** &lt;code&gt;[Symbol.iterator]属性对应着一个函数&lt;/code&gt;  ** 在代码中我们使用 &lt;code&gt;Symbol.iterator&lt;/code&gt;  访问该属性&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//可迭代对象iteratorObj&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; iteratorObj = &amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;array&lt;/span&gt;: [&lt;span class=&#34;hljs-number&#34;&gt;111&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;222&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;333&lt;/span&gt;],&lt;br&gt;  [&lt;span class=&#34;hljs-title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;iterator&lt;/span&gt;]: &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;let&lt;/span&gt; index = &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123;&lt;br&gt;      &lt;span class=&#34;hljs-comment&#34;&gt;// 返回一个迭代器&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-attr&#34;&gt;next&lt;/span&gt;:&lt;span class=&#34;hljs-function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (index &amp;lt; &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;array&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;length&lt;/span&gt;) &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-variable language_&#34;&gt;this&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;array&lt;/span&gt;[index++] &amp;#125;&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;          &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-attr&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;, &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;undefined&lt;/span&gt; &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;      &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;  &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iteratorObj[&lt;span class=&#34;hljs-title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;iterator&lt;/span&gt;]);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 调用该方法会生成一个可迭代对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; iterator = iteratorObj[&lt;span class=&#34;hljs-title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;iterator&lt;/span&gt;]();&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 返回一个新的可迭代对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;const&lt;/span&gt; iterator2 = iteratorObj[&lt;span class=&#34;hljs-title class_&#34;&gt;Symbol&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;iterator&lt;/span&gt;]();&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator2);&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator2.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator2.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator2.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-variable language_&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;log&lt;/span&gt;(iterator2.&lt;span class=&#34;hljs-title function_&#34;&gt;next&lt;/span&gt;());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原生迭代器对象，已经实现可迭代协议有： &lt;code&gt;String、Array、Map、Set、arguments对象、NodeList集合&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可迭代对象的应用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript 语法： &lt;code&gt;for...of&lt;/code&gt; 、 &lt;code&gt;展开语法(spread syntax)&lt;/code&gt; 、 &lt;code&gt;yield*&lt;/code&gt; 、 &lt;code&gt;解构赋值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一些对象时： &lt;code&gt;new Map&lt;/code&gt; 、 &lt;code&gt;new WeakMap&lt;/code&gt; 、 &lt;code&gt;new Set&lt;/code&gt; 、 &lt;code&gt;new WeakSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一些方法调用： &lt;code&gt;Promise.all(iterator)&lt;/code&gt; 、 &lt;code&gt;Promise.race(iterator)&lt;/code&gt; 、 &lt;code&gt;Array.from(iterator)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成器&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成器是 ES6 中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等&lt;/li&gt;
&lt;li&gt;生成器函数也是一个函数，但是和普通的函数有一些区别
&lt;ol&gt;
&lt;li&gt;生成器函数需要&lt;strong&gt;在 function 的后面加一个符号 &lt;code&gt;*&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;生成器函数可以通过 ** &lt;code&gt;yield关键字&lt;/code&gt;  ** 来控制函数的执行流程&lt;/li&gt;
&lt;li&gt;生成器函数的&lt;strong&gt;返回值是一个 Generator&lt;/strong&gt;（生成器）&lt;/li&gt;
&lt;li&gt;生成器事实上是一种&lt;strong&gt;特殊的迭代器&lt;/strong&gt;，MDN：Instead,they return a special type of iterator,called aGenerator&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2promise的使用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2promise的使用&#34;&gt;#&lt;/a&gt; 2.Promise 的使用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;  是一个类，可以翻译为承诺、许诺、期约&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;then&lt;/code&gt;  是一个 Promise 对象上的一个方法：实际上是 Promise 原型上的 &lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器的循环事件&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;进程与线程理解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程：计算已经运行的程序，是操作系统管理程序的一种方式，启动一个应用程序，就会默认启动一个进程 (也可能是多个进程)&lt;/li&gt;
&lt;li&gt;线程：操作系统能够运行运算调度的最小单位，通常情况下它被包含在进程中，启动每一个进程中，都会启动至少一个线程用来执行程序中的代码，这个线程被称为主线程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;浏览器中的 JavaScript 线程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript 是单线程，拥有自己的容器进程：浏览器或 node&lt;/li&gt;
&lt;li&gt;浏览器是多进程的，当我们打开一个 tab 页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出&lt;/li&gt;
&lt;li&gt;JavaScript 同一时刻只能做一件事情，如果该事情非常耗时，那么当前的线程就会被阻塞，然而浏览器每一个进程是多线程的，那么其他的线程可以来完成这个耗时的操作，如：网络请求、定时器等，我们只需要在特定的时刻执行回调即可&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件循环图解&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../all_photo/image-20220725112224437.png&#34; alt=&#34;image-20220725112224437&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微任务和宏任务&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;微任务队列 (microtask queue)：一般有 queueMicrotask ()、Promise 的 then 回调、MutationObserver 的 API: 监听 DOM 的调用&lt;/li&gt;
&lt;li&gt;宏任务队列 (macrotask queue)：一般有定时器、ajax、DOM 事件点击、UI Rendering 渲染&lt;/li&gt;
&lt;li&gt;规范：在执行任何的宏任务之前，都需要先保证微任务队列已经被清空&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事件循环对于两个队列的优先级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;main script&lt;/code&gt;  代码优先执行&lt;/li&gt;
&lt;li&gt;在执行任何一个宏任务之前 (不是队列，而是一个宏任务)，都会先查看微任务队列中是否有任务需要执行，也就是说宏任务执行之前，必须保证微任务对队列是空的，若果不为空，那么就优先执行微任务队列中的任务 (回调函数)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;node 的事件循环&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器中 &lt;code&gt;EventLoop即事件循环&lt;/code&gt; 是根据 HTML5 定义的规范来实现的，不同的浏览器可能会有不同的实现，而 node 中是由 &lt;code&gt;libuv库&lt;/code&gt; 现实的&lt;/li&gt;
&lt;li&gt;微任务和宏任务
&lt;ol&gt;
&lt;li&gt;宏任务 (macrotask)：setTimeout、setInterval、IO 事件、setImmediate、close 事件&lt;/li&gt;
&lt;li&gt;微任务 (microtask)：Promise 的 then 回调、process.nextTick、queueMicrotask&lt;/li&gt;
&lt;li&gt;node 队列执行顺序
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;next tick microtask queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;other microtask queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timer queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check queue&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close queue&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;3async和await&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3async和await&#34;&gt;#&lt;/a&gt; 3.async 和 await&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;  关键字用于声明一个异步函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async&lt;/code&gt;  是 &lt;code&gt;asynchronous&lt;/code&gt;  单词的缩写，意思为异步、非同步&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync&lt;/code&gt;  是 &lt;code&gt;synchronous&lt;/code&gt;  单词的缩写，意思为同步、同时&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8模块化与包管理工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8模块化与包管理工具&#34;&gt;#&lt;/a&gt; 8. 模块化与包管理工具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;模块化开发
&lt;ol&gt;
&lt;li&gt;认识模块化开发
&lt;ol&gt;
&lt;li&gt;事实上模块化开发最终的目的是将程序划分成一个个小的结构，这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构，这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用，也可以通过某种方式，导入另外结构中的变量、函数、对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commonJS规范&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CommonJS和Node关系&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;CommonJS 是一个规范，最初是在浏览器以外的地方使用，当时被命名为&lt;strong&gt; ServerJS&lt;/strong&gt;，后来为了体现它的广泛性，修改为&lt;strong&gt; CommonJS&lt;/strong&gt;，平时我们也会简称为&lt;strong&gt; CJS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Node 是 CommonJS 在服务器端一个具有代表性的实现，Browserify 是 CommonJS 在浏览器中的一种实现，webpack 打包工具具备对 CommonJS 的支持和转换，Node 中对 CommonJS 进行了支持和实现，让我们在开发 node 的过程中可以方便的进行模块化开发，在 Node 中每一个 js 文件都是一个单独的模块，这个模块中包括 CommonJS 规范的核心变量：exports、module.exports、require，我们可以使用这些变量来方便的进行模块化开发，前面我们提到过模块化的核心是导出和导入，Node 中对其进行了实现：exports 和 module.exports 可以负责对模块中的内容进行导出，require 函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AMD和CMD规范&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ESModule规范化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES Module和CommonJS&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;npm 包管理工具&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="JavaScript" />
        <updated>2019-01-13T06:12:03.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018/11/25/3001_CSS/</id>
        <title>CSS基础</title>
        <link rel="alternate" href="http://example.com/2018/11/25/3001_CSS/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;src与href的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#src与href的区别&#34;&gt;#&lt;/a&gt; src 与 href 的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;src
&lt;ul&gt;
&lt;li&gt;引用外部资源 (img、script、video、iframe)&lt;/li&gt;
&lt;li&gt;替换当前元素内容&lt;/li&gt;
&lt;li&gt;暂停其他资源的下载，同步加载执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;href
&lt;ul&gt;
&lt;li&gt;连接外部资源 (a、link)&lt;/li&gt;
&lt;li&gt;不会替换当前元素内容&lt;/li&gt;
&lt;li&gt;不会暂停其他资源的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src 是指向外部资源的位置，指向的内容会嵌⼊到⽂档中当前标签所在的位置，在请求 src 资源时会将其指向的资源下载并应⽤到⽂档内如 js 脚本、img 图⽚和 iframe 等元素。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，因此⼀般 js 脚本会放在底部⽽不是头部。&lt;br&gt;
href 是指向⽹络资源所在位置（的超链接，⽤来建⽴和当前元素或⽂档之间的连接，当浏览器识别到它他指向的⽂件时，就会异步下载资源，不会停⽌对当前⽂档的执行&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTML基础" />
        <updated>2018-11-25T13:02:36.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018/11/06/2002_HTML/</id>
        <title>语义化标签了解</title>
        <link rel="alternate" href="http://example.com/2018/11/06/2002_HTML/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;渐进增强与优雅降级的理解及区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#渐进增强与优雅降级的理解及区别&#34;&gt;#&lt;/a&gt; 渐进增强与优雅降级的理解及区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;渐进增强（Progressive Enhancement）：&lt;/strong&gt;&lt;br&gt;
一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。&lt;br&gt;
&lt;strong&gt;优雅降级（Graceful Degradation）：&lt;/strong&gt;&lt;br&gt;
一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。&lt;br&gt;
&lt;strong&gt;两者区别&lt;/strong&gt;&lt;br&gt;
 1、广义：&lt;br&gt;
其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级&lt;br&gt;
 2、狭义：&lt;br&gt;
渐进增强一般说的是使用 CSS3 技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现 html 标签的语义，以便在 js/css 的加载失败 / 被禁用时，也不影响用户的相应功能。&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/* 例子 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.transition&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/*渐进增强写法*/&lt;/span&gt;&lt;br&gt;  -webkit-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;     -moz-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;       -o-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;          &lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.transition&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/*优雅降级写法*/&lt;/span&gt;&lt;br&gt;          &lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;       -o-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;     -moz-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;  -webkit-&lt;span class=&#34;hljs-attribute&#34;&gt;transition&lt;/span&gt;: all .&lt;span class=&#34;hljs-number&#34;&gt;5s&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;常见的兼容性问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见的兼容性问题&#34;&gt;#&lt;/a&gt; 常见的兼容性问题&lt;/h3&gt;
&lt;ol&gt;
&lt;li margin:0;padding:0;=&#34;&#34;&gt;不同浏览器的标签默认的 margin 和 padding 不一样。*&lt;/li&gt;
&lt;li&gt;IE6 双边距 bug：块属性标签 float 后，又有横行的 margin 情况下，在 IE6 显示 margin 比设置的大。hack：display:inline; 将其转化为行内属性。&lt;/li&gt;
&lt;li&gt;设置较小高度标签（一般小于 10px），在 IE6，IE7 中高度超出自己设置高度。hack：给超出高度的标签设置 overflow:hidden; 或者设置行高 line-height 小于你设置的高度。&lt;/li&gt;
&lt;li&gt;Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。&lt;/li&gt;
&lt;li&gt;超链接访问过后 hover 样式就不出现了，被点击访问过的超链接样式不再具有 hover 和 active 了。解决方法是改变 CSS 属性的排列顺序：L-V-H-A (love hate): a:link {} a:visited {} a:hover {} a:active {}&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;浏览器模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器模式&#34;&gt;#&lt;/a&gt; 浏览器模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;怪异模式：页面以一种比较宽松的向后兼容的非标准行为&lt;/li&gt;
&lt;li&gt;接近标准模式：只有少数的怪异模式&lt;/li&gt;
&lt;li&gt;标准模式：由 HTML 和 CSS 的规范描述行为&lt;br&gt;
 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;  唯一的作用是启用标准模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;标签的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#标签的区别&#34;&gt;#&lt;/a&gt; 标签的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;strong：加重语气，b: 简单加粗，浏览器搜索引擎更侧重 strong 标签&lt;/li&gt;
&lt;li&gt;title：无明确意义，只表示标题；h1：层次明确的标题，对页面信息的抓取有很大的影响&lt;/li&gt;
&lt;li&gt;i 内容展示为斜体，em 表示强调文本&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;导入css文件方式及区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导入css文件方式及区别&#34;&gt;#&lt;/a&gt; 导入 CSS 文件方式及区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;内联方式&lt;/li&gt;
&lt;li&gt;嵌入方式&lt;/li&gt;
&lt;li&gt;外链方式 &lt;code&gt;link&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;  是 html 标签，而 &lt;code&gt;@import&lt;/code&gt;  是 css 的&lt;/li&gt;
&lt;li&gt;页面被加载时， &lt;code&gt;link&lt;/code&gt;  会同时被加载，而 &lt;code&gt;@import&lt;/code&gt;  引用的 css 会等到页面被加载完再加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;  的权重高于 &lt;code&gt;@import&lt;/code&gt;  的权重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt;  导入方式
&lt;ul&gt;
&lt;li&gt;该方式是 CSS 属性，只能加载 CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;script标签中defer和async的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#script标签中defer和async的区别&#34;&gt;#&lt;/a&gt;  &lt;code&gt;script&lt;/code&gt;  标签中 defer 和 async 的区别&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; : 浏览器会立即并执行相应的脚本，不会等待后续加载的文档元素，只要读取到就会开始加载、执行，这种情况就阻塞了后续文档的加载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script defer&amp;gt;&lt;/code&gt; ：异步加载外部的 js 脚本文件，不会阻塞页面的解析；多个带 defer 属性的标签，按照加载顺序执行；加载后续文档的过程和 js 脚本的加载是并行进行的即异步的 (此时仅加载不执行)，js 脚本需要等到文档所有元素解析完成之后才执行，DOMContentLoaded 事件触发执行之前？？？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script async&amp;gt;&lt;/code&gt; ：异步加载外部的 js 脚本文件，不会阻塞页面的解析；多个带 async 属性的标签，不能保证加载的顺序；表示后续文档的加载和执行与 js 脚本的加载和执行是并行进行的即异步执行；&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTML基础" />
        <updated>2018-11-06T01:32:12.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018/11/05/2001_HTML/</id>
        <title>语义化标签了解</title>
        <link rel="alternate" href="http://example.com/2018/11/05/2001_HTML/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;概念： &lt;code&gt;合理正确的使用语义化标签来创建页面结构&lt;/code&gt; ，即正确的标签做正确的事情&lt;/li&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;无 CSS 样式编写时会呈现很好的内容效果&lt;/li&gt;
&lt;li&gt;代码结构清晰，易于阅读，便于团队协作开发与维护，也有利于屏幕阅读器渲染页面&lt;/li&gt;
&lt;li&gt;有利于搜索引擎优化 SEO，搜索引擎爬虫会根据不同的标签来赋予不同的权重&lt;/li&gt;
&lt;li&gt;提升用户体验，比如 title、alt 可以用于解释名词或者图片信息，label 标签灵活应用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标签 (切片元素)：header、nav、main、article、section、aside、footer
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;  用来定义摘自另一个源的块引用，在该标签中的内容会被从常规文本中分离出来，默认会表现为左右两侧缩进的群本，缩近距离一般为 40 个像素 (即外边距 40px), 定义块引用，浏览器会在 blockquote 元素前后添加换行，并增加外边距，cite 属性标注引用的信息的来源文档或者相关信息的 URL&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;  定义页面的介绍展示区域，网站 logo、主导航、搜索框等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;  导航栏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;  一个页面只能使用一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;  定义页面独立的内容，可以有自己的 header、footer、sections 等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;  用于标记文档的各个部分，例如长表单文章的章节或主要部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;  定义与主要内容相关的内容块，通常显示为侧边栏&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;  定义文档的底部区域，通常包括文档作者、著作权信息等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;  标签规定独立的流内容 (图像、图表、照片、代码等), 元素的内容应该与主内容相关，但如果被删除，则不应对文档流产生影响&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;  标签定义  &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;  元素的标题，元素应该被置于 “figure” 元素的第一个或最后一个子元素的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;  为较不重要的内容定义小字体，如果被包围的字体已经是字体模型所支持的最小字号，那么  &lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;  标签将不起任何作用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;  ~  &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;  定义页面的标题，h1 具有最高等级，h6 最低&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;  把文本定义为语气更强的强调的内容，以表示内容的重要性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;  标记内容着重点（大量用于提升段落文本语义），通常呈现为斜体文字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTML基础" />
        <updated>2018-11-05T05:32:31.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018/11/04/2004_HTML/</id>
        <title>HTML基础</title>
        <link rel="alternate" href="http://example.com/2018/11/04/2004_HTML/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;flex-布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#flex-布局&#34;&gt;#&lt;/a&gt; Flex 布局&lt;/h4&gt;
&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。&lt;br&gt;
Flex 是 Flexible Box 的缩写，意为 &amp;quot;弹性布局&amp;quot;, 用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。&lt;br&gt;
容器的属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;&lt;/li&gt;
&lt;li&gt;flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;&lt;/li&gt;
&lt;li flex-flow:=&#34;&#34; ||=&#34;&#34; ;=&#34;&#34;&gt;flex-flow： .box&lt;/li&gt;
&lt;li&gt;justify-content：对其方式，水平主轴对齐方式&lt;/li&gt;
&lt;li&gt;align-items：对齐方式，竖直轴线方向&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目的属性（元素的属性）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0&lt;/li&gt;
&lt;li&gt;flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大&lt;/li&gt;
&lt;li&gt;flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小&lt;/li&gt;
&lt;li&gt;flex-basis 属性：定义了在分配多余的空间，项目占据的空间。&lt;/li&gt;
&lt;li&gt;flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。&lt;/li&gt;
&lt;li&gt;align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖&lt;/li&gt;
&lt;li&gt;align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="HTML基础" />
        <updated>2018-11-04T14:32:45.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2018/10/28/2003_HTML/</id>
        <title>HTML基础</title>
        <link rel="alternate" href="http://example.com/2018/10/28/2003_HTML/"/>
        <content type="html">&lt;p&gt;🌸  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;Welcome to XGG &amp;amp; blog!&lt;/span&gt;&lt;br&gt;
🔭  &lt;span style=&#34;font-size:bold;color:purple&#34;&gt;When you have eliminated the impossible,whatever remains,however improbable,must be the truth.&lt;/span&gt;&lt;br&gt;
📫  &lt;span style=&#34;font-size:initial;color:purple&#34;&gt;If you get any problems when looking blog,you can find the answer in &lt;a href=&#34;https://juejin.cn/user/2784392994882045&#34;&gt;稀土掘金&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/LuckyWishes&#34;&gt;GitHub&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&#34;网页笔记&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网页笔记&#34;&gt;#&lt;/a&gt; 网页笔记&lt;/h3&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&#34;一-html&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-html&#34;&gt;#&lt;/a&gt; 一、HTML&lt;/h2&gt;
&lt;h3 id=&#34;1-bs和cs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-bs和cs&#34;&gt;#&lt;/a&gt; 1. B/S 和 C/S&lt;/h3&gt;
&lt;p&gt;B/S：浏览器中的网页（无需安装、无需更新、跨平台）&lt;/p&gt;
&lt;p&gt;C/S：移动端的 APP&lt;/p&gt;
&lt;p&gt;补充：&lt;/p&gt;
&lt;p&gt;客户端：用户通过客户端来使用软件&lt;/p&gt;
&lt;p&gt;服务器：服务器负责在远程处理业务逻辑&lt;/p&gt;
&lt;p&gt;服务器开发语言：Java、PHP、C#、Python、Node.js&lt;/p&gt;
&lt;p&gt;客户端形式：文字客户端、图形化界面、网页&lt;/p&gt;
&lt;h3 id=&#34;2-特点bs&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-特点bs&#34;&gt;#&lt;/a&gt; 2. 特点（B/S）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无需安装&lt;/li&gt;
&lt;li&gt;无需更新&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-简史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-简史&#34;&gt;#&lt;/a&gt; 3. 简史&lt;/h3&gt;
&lt;p&gt;​	万维网的发明人：蒂姆伯纳斯李，制作网页的标准规范 W3C（万维网联盟）&lt;/p&gt;
&lt;h3 id=&#34;4-结构htmlhypertext-markup-language&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-结构htmlhypertext-markup-language&#34;&gt;#&lt;/a&gt; 4. 结构–HTML（Hypertext Markup Language）&lt;/h3&gt;
&lt;p&gt;​	HTML：超文本标记语言&lt;/p&gt;
&lt;h3 id=&#34;5-属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-属性&#34;&gt;#&lt;/a&gt; 5. 属性&lt;/h3&gt;
&lt;p&gt;属性在开始标签里面写，属性是一个名值对；&lt;/p&gt;
&lt;p&gt;有些属性有属性值，有些属性没有属性值；&lt;/p&gt;
&lt;p&gt;​	属性具有属性值，但是有一些属性没有属性值也对&lt;/p&gt;
&lt;h3 id=&#34;6-文档声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-文档声明&#34;&gt;#&lt;/a&gt; 6. 文档声明&lt;/h3&gt;
&lt;p&gt;&amp;lt;! doctype html&amp;gt; 放在第一行，告诉浏览器网页版本 HTML5&lt;/p&gt;
&lt;p&gt;注意：注释不能嵌套&lt;/p&gt;
&lt;h3 id=&#34;7-进制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-进制&#34;&gt;#&lt;/a&gt; 7. 进制&lt;/h3&gt;
&lt;p&gt;所有数据在计算机中底层都是以二进制形式保存&lt;/p&gt;
&lt;p&gt;1 byte = 8 bit&lt;br&gt;
1 kb（千字节）= 1024 byte&lt;br&gt;
1 mb （兆字节）= 1024 kb&lt;br&gt;
1 gb （吉字节）= 1024 mb&lt;br&gt;
1 tb （特字节）= 1024 gb&lt;br&gt;
1 pb = 1024 tb&lt;/p&gt;
&lt;h3 id=&#34;8-编码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-编码&#34;&gt;#&lt;/a&gt; 8. 编码&lt;/h3&gt;
&lt;head&gt;&lt;/head&gt;网页的头部，标签里面的内容不显示在网页里面，主要帮助浏览器和搜索引擎来解析网页的
&lt;p&gt;将字符转换为二进制码的过程称为编码&lt;/p&gt;
&lt;p&gt;将二进制码转换为字符的过程称为解码&lt;/p&gt;
&lt;p&gt;字符集（charset）编码和解码所采用的规则称为字符集，编码和解码所采用的字符集的不同会导致乱码现象&lt;/p&gt;
&lt;p&gt;常见的字符集：ASCII（美国标准码）、ISO88591（欧洲）、GBK（中国）、GB2312（中国）、UTF-8（万国码，所有国家均适用）&lt;/p&gt;
&lt;p&gt;设置编码字符格式：charset=“utf-8”&lt;/p&gt;
&lt;meta charset= &#34;utf-8&#34;&gt; 
告诉浏览器编码格式  
&lt;/meta&gt;
&lt;h3 id=&#34;9-标签文档&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-标签文档&#34;&gt;#&lt;/a&gt; 9. 标签文档&lt;/h3&gt;
&lt;p&gt;目的查看标签的作用，网上可以查看&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://xn--www-e82fs70b28vt66a.w3school.com.cn&#34;&gt;建议查看 www.w3school.com.cn&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-实体-转义字符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-实体-转义字符&#34;&gt;#&lt;/a&gt; 10. 实体（ 转义字符）&lt;/h3&gt;
&lt;p&gt;实体查询和符号参考手册相关链接：&lt;a href=&#34;https://www.w3school.com.cn/html/html_entities.asp&#34;&gt;https://www.w3school.com.cn/html/html_entities.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在网页中编写多个空格会被浏览器默认为一个空格；若写特殊的字符时，需要使用转义字符&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;//实体的语法&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;nbsp;&lt;/span&gt;//空格&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;gt;&lt;/span&gt;//大于号&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;lt;&lt;/span&gt;//小于号&lt;br&gt;&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;amp;copy;&lt;/span&gt;//版权符号&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;11-meta标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11-meta标签&#34;&gt;#&lt;/a&gt; 11. meta 标签&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;meta：主要用于设置一些网页中的元数据，元数据不是给用户看的&lt;br&gt;charset：指定网页的字符集&lt;br&gt;name：指定的数据名称&lt;br&gt;content：制定的数据内容&lt;br&gt;keywords：网页关键字&lt;br&gt;description：用于网页的描述&lt;br&gt;http-equiv=&amp;quot;X-UA-Compatible&amp;quot;：将网页重定向到另一个网站&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;12-标签元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12-标签元素&#34;&gt;#&lt;/a&gt; 12. 标签元素&lt;/h3&gt;
&lt;p&gt;块级元素：一般通过块级元素对网页进行布局&lt;/p&gt;
&lt;p&gt;页面中独占一行的元素是块级元素&lt;/p&gt;
&lt;p&gt;行内元素：一般包裹文字&lt;/p&gt;
&lt;p&gt;在页面中不会独占一行的元素为行内元素&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;hgroup&lt;/span&gt;&amp;gt;&lt;/span&gt;标题组标签&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;hgroup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;加重标签&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;		//内联元素&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;长引用&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;//引用标签&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;q&lt;/span&gt;&amp;gt;&lt;/span&gt;短引用&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;q&lt;/span&gt;&amp;gt;&lt;/span&gt;//使用&amp;quot;&amp;quot;包裹起来&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;换行&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;不能放任何的块级元素&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;网页的头部&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;网页的主体部分&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;网页的底部&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;侧边栏内容&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;网页的导航栏&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;表示一个独立的文章&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;表示一个独立的区块 &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;行内元素，一般用于网页中选中文字&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;s&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;s&lt;/span&gt;&amp;gt;&lt;/span&gt;有误文本&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;无序列表 &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;有序列表&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;列表项&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dl&lt;/span&gt;&amp;gt;&lt;/span&gt;创建一个定义列表&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dt&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dt&lt;/span&gt;&amp;gt;&lt;/span&gt;定义的内容&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dd&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dd&lt;/span&gt;&amp;gt;&lt;/span&gt;对内容进行解释说明&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;herf&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;目标地址路径&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;target&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;打开的页面的属性&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;行内元素，可以嵌套除自身之外的任何元素超链接，实现网页之间的跳转&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;herf&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#id的属性值&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;锚点跳转&lt;br&gt;herf:&amp;quot;javascript:;&amp;quot;作为herf的属性，点击超链接什么也不会发生&lt;br&gt;_self:在当前页面打开超链接&lt;br&gt;_blank:在新的页面打开超链接&lt;br&gt;./当前文件所在目录&lt;br&gt;../当前文件所在目录的上一级目录&lt;br&gt;锚链接的用法：&lt;br&gt;1. 本页面锚链接(使用#name跳转到对应锚点)&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#top&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;target&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_self&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;这是一个超链接&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;2. 页面间锚链接(跳转到其他页面的指定位置，设置锚点)&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;herf&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t.html#nav&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;跳转到新页面指定部分&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;块级标签与行级标签的特点与区别:&lt;br&gt;块级标签自动换行，前后隔一行；行级标签不会自动换行，从左往右依次显示&lt;br&gt;块级标签的宽度默认是100%；行级标签的宽度由文字内容撑开&lt;br&gt;块级标签可以设置宽度、高度、边距等属性；行级标签不能设置上述属性&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片路径&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;alt&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片描述&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;title&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片标识&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;替换元素，基于块级元素与行内元素之间,成比例缩放，单位像素，一般在PC端不建议修改图片大小，在移动端需要修改图片&lt;br&gt;title 属性：设置图片的标题，当鼠标指在图片上后显示的文字&lt;br&gt;alt 属性：设置由于图片无法加载时显示的文字&lt;br&gt;align属性：设置图片周围文字相对于图片的位置&lt;br&gt;src：文件路径&lt;br&gt;1. 相对路径&lt;br&gt;2. 绝对路径&lt;br&gt;绝对路径只在当前计算机生效，若将网站转移服务器，则路径会失效。&lt;br&gt;通过绝对路径打开图片使用的是 file 协议，但网页中使用的是 http 协议，因此会出 现跨域问题，造成图片无法显示&lt;br&gt;3. 网络地址&lt;br&gt;&lt;br&gt;图片格式：&lt;br&gt;jpeg（jpg）：支持的颜色比较丰富，不支持透明效果，不支持动图；一般用来显示照片&lt;br&gt;gif：支持的颜色比较少，支持简单透明，支持动图；颜色单一的图片，动图&lt;br&gt;png：支持颜色丰富，支持复杂透明，不支持动图&lt;br&gt;webp：谷歌推出的，专门用来显示网页图片的一种格式，具备其他图片格式的所有优点，文件较小，兼容性不好&lt;br&gt;base64：可以把图片转换为字符，通过字符的形式引入图片&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;内联网页路径&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;frameborder&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt; //frameborder表示内联网页的框架边框&lt;br&gt;音频文件：&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;audio&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;视频资源的路径&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;controls&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;autoplay&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;loop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;br&gt;audio相关属性：&lt;br&gt;controls：是否允许用户控制播放 &lt;br&gt;autoplay：音频文件是否自动播放，该属性用的较少，一般页面无自动播放，用户体验不好&lt;br&gt;loop：音频是否循环播放&lt;br&gt;除了使用src来指定外部文件的路径以外，还可以使用source指定外部文件&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件路径（MP3）&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;大部分浏览器&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件路径（ogg）&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;小部分浏览器&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;IE8浏览器，该标签时间较早&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;embed&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件路径&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件类型（audio/MP3）&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;视频文件：&lt;br&gt;方式一：&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;br&gt;方式二：&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;…….webm&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;…….MP4&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;补充&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HTML5 新增结构标签及作用&lt;/p&gt;
&lt;p&gt;![截屏 2022-03-30 上午 9.06.20](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.06.20.png)&lt;/p&gt;
&lt;p&gt;![截屏 2022-03-30 上午 9.07.21](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.07.21.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表格&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;​		&lt;tr&gt;行&lt;/tr&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;​        &lt;th&gt;表头单元格&lt;/th&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;​        &lt;td&gt;普通单元格&lt;/td&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;colspan：占有列（合并列）横向合并单元格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rowspan：占有行（合并行）纵向合并单元格&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表格&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表头：thead&lt;/li&gt;
&lt;li&gt;主体：tbody&lt;/li&gt;
&lt;li&gt;底部：tfoot&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;border-spacing&lt;/code&gt; : 指定边框之间的距离&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;border-collapse&lt;/code&gt; : 设置边框的合并&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不同行的样式设置&lt;/strong&gt;： &lt;code&gt;tr:nth-child(odd)&amp;#123;&amp;#125;奇数行样式设置&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择器知识点：如果表格中没有使用 &lt;code&gt;tbody&lt;/code&gt;  而是直接使用 &lt;code&gt;tr&lt;/code&gt; , 那么浏览器会自动创建一个 &lt;code&gt;tbody&lt;/code&gt; , 并且将所有的 &lt;code&gt;tr&lt;/code&gt;  放到 &lt;code&gt;tbody&lt;/code&gt;  中，因此 &lt;code&gt;tr&lt;/code&gt;  不是 &lt;code&gt;table&lt;/code&gt;  的子元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;display:table-cell&lt;/code&gt;  设置为单元格进行居中操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表格属性&lt;/p&gt;
&lt;p&gt;![截屏 2022-03-30 上午 9.08.18](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.08.18.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行和列的属性 (&lt;em&gt;当表格属性与行列属性冲突时，以行列属性为准&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;![截屏 2022-03-30 上午 9.10.13](/Users/xiaoyunfei/Library/Application Support/typora-user-images/ 截屏 2022-03-30 上午 9.10.13.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Rice_w/article/details/123696681?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22123696681%22%2C%22source%22%3A%22Rice_w%22%7D&amp;amp;ctrtid=3BNev&#34;&gt;表格的结构化和直列化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Rice_w/article/details/123696681?csdn_share_tail=%7B%22type%22%3A%22blog%22%2C%22rType%22%3A%22article%22%2C%22rId%22%3A%22123696681%22%2C%22source%22%3A%22Rice_w%22%7D&amp;amp;ctrtid=3BNev&#34;&gt;HTML5 表单&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表单知识&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;form&lt;/code&gt;  的属性 &lt;code&gt;action&lt;/code&gt;  表单要提交的服务器地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本框&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;1. 文本框数据要提交到服务器中，必须要为元素指定name属性&lt;br&gt;2. 表单例子&lt;br&gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;action&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;movies.html&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    姓名: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    密码: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- 类似选择框，必须要指定一个value属性，value属性最终会作为用户的填写信息发送给服务器，checked默认选中 --&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- autocapitalize=&amp;quot;off&amp;quot;:关闭自动补全&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;         readonly:将表单项设置为只读，数据会提交&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;         disabled:将表单项设置为禁用，数据不会提交&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;         autofocus:设置表单项自动获取焦点	--&amp;gt;&lt;/span&gt;&lt;br&gt;    性别: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sex&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;         &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;radio&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sex&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    多选框: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;22&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;33&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;           &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;44&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    下拉列表: &lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;demo&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;111&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;222&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;222&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;333&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;selected&lt;/span&gt;&amp;gt;&lt;/span&gt;333&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;444&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;444&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;option&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    颜色选择器: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    电子邮件: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    时间: &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;datetime-local&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;提交&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;reset&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;重置&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;按钮&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二-css&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-css&#34;&gt;#&lt;/a&gt; 二、CSS&lt;/h2&gt;
&lt;h3 id=&#34;1-简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-简介&#34;&gt;#&lt;/a&gt; 1. 简介&lt;/h3&gt;
&lt;p&gt;层叠样式：网页实际上是一个多层的结构，通过 CSS 可以为网页的每一层设置样式，最终我们只看到最上面一层，总之，css 就是设置设置网页中的样式&lt;/p&gt;
&lt;h3 id=&#34;2-css编写位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-css编写位置&#34;&gt;#&lt;/a&gt; 2. CSS 编写位置&lt;/h3&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;1. 内联样式（开发时不推荐使用）&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;color:red;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;2. 内部样式&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;相关样式&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;3. 外部样式（使用浏览器的缓存机制，加快网页的加载速度，提升用户 体验）&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;rel&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;href&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;外部css文件地址&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;3-选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-选择器&#34;&gt;#&lt;/a&gt; 3. 选择器&lt;/h3&gt;
&lt;p&gt;通过选择器可以选中页面中的指定元素进而设置相关样式&lt;br&gt;
声明块：通过声明块来指定为元素设置样式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素选择器
&lt;ol&gt;
&lt;li&gt;作用：根据标签名选择元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;标签名&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;id 选择器 (id 属性值不能重复)
&lt;ol&gt;
&lt;li&gt;作用：根据元素的 id 属性值选中一个元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;id属性值&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;类选择器（可以为一个元素设置多个 class 属性值，且使用空格隔开）
&lt;ol&gt;
&lt;li&gt;作用：根据元素的 class 属性值选中一组元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;.class属性值&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;通配选择器
&lt;ol&gt;
&lt;li&gt;作用：选中页面中所有的元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;复合选择器 (交集选择器)
&lt;ol&gt;
&lt;li&gt;选择同时符合多个条件的元素 (注意：交集选择器中如果有元素选择器，必须使用元素选择器开头)&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;选择器1选择器2选择器n&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;选择器分组（并集选择器）
&lt;ol&gt;
&lt;li&gt;同时选择多个选择器对应的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;选择器1,选择器2,选择器n&amp;#123;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;子元素选择器
&lt;ol&gt;
&lt;li&gt;作用：选中指定父元素的指定子元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;父元素 &amp;gt; 子元素&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;后代元素选择器
&lt;ol&gt;
&lt;li&gt;作用：选中指定元素内的指定后代&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;祖先 后代&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;兄弟选择器 1
&lt;ol&gt;
&lt;li&gt;作用：选择紧靠后面的兄弟元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;前一个元素 + 后一个元素&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;兄弟选择器 2
&lt;ol&gt;
&lt;li&gt;作用：选择后面所有的兄弟元素&lt;/li&gt;
&lt;li&gt;语法： &lt;code&gt;兄元素~弟元素&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;属性选择器
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[属性名]&lt;/code&gt;  选择含有指定属性的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[属性名 = 属性值]&lt;/code&gt;  选择含有指定属性和属性值的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[属性名 ^= 属性值]&lt;/code&gt;  选择属性值以指定值开头的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[属性名 $= 属性值]&lt;/code&gt;  选择属性值以指定值结尾的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[属性名 *= 属性值]&lt;/code&gt;  选择属性值中含有某值的元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;伪类选择器 (伪类不存在的类，特殊的类)
&lt;ol&gt;
&lt;li&gt;伪类用来描述一个元素的&lt;strong&gt;特殊状态&lt;/strong&gt;，例如：第一个元素，被点击的元素、鼠标移入的元素……&lt;/li&gt;
&lt;li&gt;一般使用 &lt;code&gt;:&lt;/code&gt;  开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-child&lt;/code&gt;  第一个子元素（参考对象为所有的子元素进行排序）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-child&lt;/code&gt;  最后一个子元素（参考对象为所有的子元素进行排序）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-child()&lt;/code&gt;  选中第 n 个子元素（参考对象为所有的子元素进行排序）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;  第 n 个，n 的范围是 0~+∞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2n+1或even&lt;/code&gt;  表示选中偶数位的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2n+1或odd&lt;/code&gt;  表示选中奇数位的元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-of-type&lt;/code&gt;  作用同上（同类型元素中进行排序）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-of-type&lt;/code&gt;  作用同上（同类型元素中进行排序）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-of-type&lt;/code&gt;  作用同上（同类型元素中进行排序）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:not()&lt;/code&gt;  否定伪类，将符合条件的元素从选择器中去除&lt;/li&gt;
&lt;li&gt;超链接的伪类
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;a:link&lt;/code&gt;  表示未访问过的链接（正常链接）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a:visited&lt;/code&gt;  表示访问过的链接（由于隐私的原因，所以 visited 伪类只能修改链接颜色）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:hover&lt;/code&gt;  表示鼠标移入的状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:active&lt;/code&gt;  表示鼠标点击、激活的状态&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;伪元素选择器
&lt;ol&gt;
&lt;li&gt;伪元素：表示页面中特殊的并不真实存在的元素（&lt;strong&gt;特殊位置&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;一般使用 &lt;code&gt;::&lt;/code&gt;  开头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::first-letter&lt;/code&gt;  表示第一个字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::first-line&lt;/code&gt;  表示第一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::selection&lt;/code&gt;  表示选中的内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::before&lt;/code&gt;  元素的开始（必须结合 content 属性使用）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::after&lt;/code&gt;  元素的最后（必须结合 content 属性使用）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-样式的继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4-样式的继承&#34;&gt;#&lt;/a&gt; 4. 样式的继承&lt;/h3&gt;
&lt;p&gt;我们为一个元素设置的样式同时也会应用到它的后代元素的上，继承是发生在祖先后代之间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：不是所有的元素都会被继承，比如背景相关的样式、布局相关的样式均不会被继承&lt;/p&gt;
&lt;h3 id=&#34;5-选择器的权重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-选择器的权重&#34;&gt;#&lt;/a&gt; 5. 选择器的权重&lt;/h3&gt;
&lt;p&gt;当通过不同的选择器选中相同元素时，并且给相同的样式设置不同的值时，有可能发生样式冲突，这个时候有选择器的权重决定&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs html&#34;&gt;内联样式&amp;gt;id选择器&amp;gt;类和伪类选择器&amp;gt;元素选择器&amp;gt;通配选择器&amp;gt;继承的样式（无优先级）&lt;br&gt;比较优先级时，需要将所有的优先级进行相加运算，最后优先级越高则越优先显示（分组选择器是单独计算的）&lt;br&gt;选择器的累加不会超过最大数量级，类选择器再高也不会超过id选择器，若是优先级相同，则优先使用靠下的样式&lt;br&gt;使用!important时，获得最高优先级，超过内联样式的优先级，慎用！&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;6-单位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-单位&#34;&gt;#&lt;/a&gt; 6. 单位&lt;/h3&gt;
&lt;p&gt;像素：屏幕实际是由许多的小点构成，不同屏幕大小的像素是不同的，像素越小的屏幕显示效果越清晰&lt;/p&gt;
&lt;p&gt;百分比：属性值设置为相对于父元素属性的百分比，设置百分比可以可以使子元素跟随父元素的改变而改变&lt;/p&gt;
&lt;p&gt;em：相对于自身元素的字体大小计算，1em = 1 font-size，em 会根据字体大小的改变而改变（一般默认 font-size = 16 像素）&lt;/p&gt;
&lt;p&gt;rem：相对于根元素的字体大小计算&lt;/p&gt;
&lt;h3 id=&#34;7-颜色&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-颜色&#34;&gt;#&lt;/a&gt; 7. 颜色&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;css 里面可以使用颜色名，但是不是很方便描述&lt;/li&gt;
&lt;li&gt;常见一般使用 RGB 值，通过三种颜色进行调整，每一种颜色值的范围是 0~255;&lt;/li&gt;
&lt;li&gt;rgba：增加了一个值，一共有四个值，最后一个表示不透明度（1 表示完全不透明、0 表示完全透明、.5 表示半透明）&lt;/li&gt;
&lt;li&gt;十六进制颜色值（语法：#aabbcc 简写为 #abc）&lt;/li&gt;
&lt;li&gt;HSL 值：H: 色相、S：饱和度、L：亮度；HSLA 值：不透明度&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;8-文档流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-文档流&#34;&gt;#&lt;/a&gt; 8. 文档流&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;文档流是一个位置，在最底层，文档流是网页的基础，我们创建的元素默认都在文档流中进行排列，元素分为两个状态在文档流中、不在文档流中&lt;/li&gt;
&lt;li&gt;块级元素
&lt;ol&gt;
&lt;li&gt;块级元素会在页面中独占一行（自上向下垂直排列）&lt;/li&gt;
&lt;li&gt;默认宽度是父级元素的全部（把父元素撑满）&lt;/li&gt;
&lt;li&gt;默认高度被内容撑开（子元素撑开）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;行内元素
&lt;ol&gt;
&lt;li&gt;行内元素不会独占页面的一行，只占自身的大小&lt;/li&gt;
&lt;li&gt;行内元素在页面里面自左向右水平排列，如果一行之中不能排列完，则元素会换到第二行继续自左向右水平排列&lt;/li&gt;
&lt;li&gt;行内元素默认的宽度和高度都是被内容水平撑开的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;9-盒子模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9-盒子模型&#34;&gt;#&lt;/a&gt; 9. 盒子模型&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;盒子是有四个部分组成分别为：content：内容区、padding：内边距、border：边框、margin：外边距&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;weith：内容区的宽度、height：内容区的高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;边框属于盒子的边缘，边框的大小会影响盒子的大小，需要设置边框的样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内边距的设置会影响盒子的大小，背景颜色会延伸到内边距上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外边距不会影响盒子可见框的大小，但是外边距会影响盒子的位置，默认情况下设置左和上会影响该元素，若是设置右和下会影响其他的元素，margin 会影响盒子的实际占用空间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;水平方向的布局&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直方向的布局&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border-style&lt;/span&gt;:dotted;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border-bottom-width&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt;;//专门指定某一个边的宽度&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border-color&lt;/span&gt;: red;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border-width&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; solid red;//边框三个属性简写&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;padding&lt;/span&gt;：&lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt;;//内边距三个属性简写&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;：&lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1px&lt;/span&gt;;//外边距三个属性简写&lt;br&gt;&lt;br&gt;水平方向的布局&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;margin-left&lt;/span&gt;+&lt;span class=&#34;hljs-attribute&#34;&gt;border-left&lt;/span&gt;+&lt;span class=&#34;hljs-attribute&#34;&gt;padding-left&lt;/span&gt;+&lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;+&lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;-rigth+&lt;span class=&#34;hljs-attribute&#34;&gt;border&lt;/span&gt;-rigth+&lt;span class=&#34;hljs-attribute&#34;&gt;padding&lt;/span&gt;-rigth=父元素内容区的宽度&lt;br&gt;//若是不够默认会修改&lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;-rigth,有auto优先auto&lt;br&gt;//如果两个外边距设置为auto，宽度固定值，则会将外边距设置为相同的值，可以利用这个特点是子元素在父元素中居中 &lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;10px&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt; auto;&lt;br&gt;&lt;br&gt;垂直方向的布局&lt;br&gt;如果子元素的大小超过了父元素，则子元素会从父元素中溢出，可以使用是&lt;span class=&#34;hljs-attribute&#34;&gt;overflow&lt;/span&gt;属性进行处理&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;overflow&lt;/span&gt;:hidden;&lt;br&gt;visible:默认值，子元素会从父元素中显示出来&lt;br&gt;hidden:隐藏，溢出内容将会被裁减不会显示出来&lt;br&gt;scroll:生成两个滚动条，通过滚动条进行查看内容&lt;br&gt;auto:根据需要生成滚动条&lt;br&gt;&lt;br&gt;overflow-x:&lt;span class=&#34;hljs-number&#34;&gt;10px&lt;/span&gt;;//水平大小&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;overflow-y&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;10px&lt;/span&gt;;//垂直大小&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;10垂直外边距折叠块级0&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10垂直外边距折叠块级0&#34;&gt;#&lt;/a&gt; 10. 垂直外边距折叠（块级 0）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;相邻的垂直方向外边距会发生重叠现象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兄弟元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;兄弟元素间的相邻垂直外边距会取两者之间较大值（两者都是正值）&lt;/li&gt;
&lt;li&gt;特殊情况
&lt;ol&gt;
&lt;li&gt;相邻的外边距一正一负，则取两者之和&lt;/li&gt;
&lt;li&gt;相邻的外边距都是负值，取两者中绝对值较大的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父子元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;父子元素间相邻外边距，子元素会传递父元素（上外边距）&lt;/li&gt;
&lt;li&gt;父子外边距的折叠会影响页面的布局，必须进行处理（设置为兄弟元素即可）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行内元素&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;行内元素不支持设置宽度和高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行内元素可以设置 padding、border、margin，垂直方向的 padding、border、margin 不会影响页面布局&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//display用来设置元素显示的类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;可选值为：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;inline 将元素设置为行内元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;block 将元素设置为块元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;inline-block 将元素设置为行内块元素，行内块既可以设置高度和宽度，也不会独占一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;table 将元素设置为一个表格&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;none 元素不在页面中显示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//visibility 用来设置元素的显示状态&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;可选值：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;visible 元素在页面中正常显示&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hidden 元素在页面中隐藏不显示，但依然占据页面中的位置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//去除项目符号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;list-style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//去除a链接的下划线&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;text-decoration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//设置居中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;margin&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;50px auto&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//子元素的行高和父元素高相同，则实现垂直居中效果&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;line-height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 48px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//父元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 48px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//子元素&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs awk&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;### 11.浏览器的默认样式&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. 通常浏览器会为元素设置一些默认样式，有时候默认样式会影响页面布局，通常情况下会去除浏览器的默认样式（PC端）&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;### 12.盒子的大小设置&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. ```css&lt;br&gt;   &lt;span class=&#34;hljs-regexp&#34;&gt;//&lt;/span&gt;默认情况下，盒子的大小是由内容区、内边距、边框共同决定&lt;br&gt;   &lt;span class=&#34;hljs-regexp&#34;&gt;//&lt;/span&gt;box-sizing用来设置盒子尺寸的计算方法（设置width和height的作用）&lt;br&gt;   box-sizing: border-box;&lt;span class=&#34;hljs-regexp&#34;&gt;//&lt;/span&gt;默认值，宽度和高度用来设置内容区的大小&lt;br&gt;   &lt;br&gt;   &lt;span class=&#34;hljs-regexp&#34;&gt;//&lt;/span&gt;宽度和高度用来设置整个盒子可见框的大小&lt;br&gt;   box-sizing: content-box;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;13-轮廓阴影和圆角&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#13-轮廓阴影和圆角&#34;&gt;#&lt;/a&gt; 13. 轮廓阴影和圆角&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//用来设置元素的轮廓线，使用方法和border一模一样&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//区别是轮廓不会影响可见框的大小&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;outline&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;1px solid red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//轮廓的设置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;outline-offset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; //轮廓距离边框的距离&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//用来设置元素的阴影效果，阴影不会影响页面布局&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//第一个值，水平偏移量，设置阴影的水平位置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//第二个值，垂直偏移量，设置阴影的垂直位置&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//第三个值，阴影的模糊半径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//第四个值，阴影的颜色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;box-shadow&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 10px 10px 10px red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;//用来设置圆角，圆角设置圆的半径大小（若为两个值可以考虑为椭圆）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border-radius&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 50%&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//该设置为一个圆&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs markdown&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;### 14.浮动元素&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;1.&lt;/span&gt; 通过浮动使一个元素向其父元素的左侧和右侧移动&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;2.&lt;/span&gt; 使用&lt;span class=&#34;hljs-code&#34;&gt;`float`&lt;/span&gt;属性设置元素浮动，none：不浮动、left：向左浮动、right：向右浮动&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;3.&lt;/span&gt; 元素使用浮动之后会脱离文档流，不占用文档流的位置，水平布局的等式不需要成立&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;4.&lt;/span&gt; 浮动的特点&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   1.&lt;/span&gt; 浮动元素不会覆盖文字，文字会自动环绕在浮动元素的周围，利用浮动实现文字环绕效果&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   2.&lt;/span&gt; 浮动元素会完全脱离文档流，不再占用文档流的位置&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   3.&lt;/span&gt; 设置浮动之后元素就会向父元素左侧或者右侧移动，不会从父元素中移出&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   4.&lt;/span&gt; 浮动元素向左或向右移动时，不会超过它前面的其他浮动元素&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   5.&lt;/span&gt; 如果浮动元素上边是一个没有浮动的块元素，则浮动元素无法上移&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   6.&lt;/span&gt; 浮动元素不会超过上边浮动的兄弟元素，最多和兄弟元素一样高&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;5.&lt;/span&gt; 作用：让页面中的元素水平排列&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;6.&lt;/span&gt; 脱离文档流的特点（不需要区分块级和行内元素）&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   1.&lt;/span&gt; 块元素&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;      1.&lt;/span&gt; 块级元素不在独占页面的一行&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;      2.&lt;/span&gt; 脱离文档流之后块级元素的宽度和高度默认都被内容撑开&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;   2.&lt;/span&gt; 行内元素&lt;br&gt;&lt;span class=&#34;hljs-bullet&#34;&gt;      1.&lt;/span&gt; 行内元素脱离文档流之后变成块级元素，特点和块级元素一样&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;### 15. 块级元素水平排列可以使用浮动设置&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;### 16.高度塌陷和BFC&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;```css&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;// 高度塌陷问题&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后，其会完全脱离文档流，子元素从文档流中脱离，将会无法撑开父元素的高度，导致父元素的高度丢失，父元素高度丢失以后，下面的元素会自动上移，导致页面布局混乱，所以高度塌陷是浮动布局中常见的问题，必须进行处理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;BFC:(Block Formatting Context)	块级格式化环境&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-code&#34;&gt;BFC是一个css中的隐含属性，可以为一个元素开启BFC，开启BFC之后该元素变成一个独立的布局区域&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;元素开启 BFC 的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启 BFC 的元素不会被浮动元素所覆盖&lt;/li&gt;
&lt;li&gt;开启 BFC 的元素子元素和父元素外边距不会重叠&lt;/li&gt;
&lt;li&gt;开启 BFC 的元素可以包含浮动的子元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以通过一些特殊方式开启 BFC&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;设置元素的浮动（宽度丢失）【不推荐】 &lt;code&gt;例如：float:left;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将元素设置为行内元素【不推荐】 &lt;code&gt;例如：display:inline-block&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将元素的 &lt;code&gt;overflow&lt;/code&gt;  设置为一个非 &lt;code&gt;visible&lt;/code&gt;  的值     &lt;code&gt;例如：overflow:hidden&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;after伪类解决高度塌陷即 元素名::after&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::after&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;display&lt;/span&gt;:bolck;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;clear&lt;/span&gt;:both;&lt;br&gt;&amp;#125;&lt;br&gt;//after伪元素默认是行内元素，需要设置为块级元素&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决外边距重叠问题&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::before&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;display&lt;/span&gt;:table;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;clearfix类&lt;/code&gt; 可以同时解决高度塌陷和外边距重叠&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.clearfix&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::before&lt;/span&gt;,&lt;span class=&#34;hljs-selector-class&#34;&gt;.clearfix&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::after&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;display&lt;/span&gt;:table;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;clear&lt;/span&gt;:both;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;17清除浮动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#17清除浮动&#34;&gt;#&lt;/a&gt; 17. 清除浮动&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;作用：清除浮动元素对当前元素所产生的影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;left&lt;/code&gt; ：清除左侧浮动元素对当前元素所产生的影响&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right&lt;/code&gt; ：清除左侧浮动元素对当前元素所产生的影响&lt;/li&gt;
&lt;li&gt;&lt;code&gt;both&lt;/code&gt; ：清除两侧浮动元素对当前元素所产生最大影响的那侧&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;设置清除浮动元素以后，浏览器会自动为元素添加一个上外边距，使其位置不受影响&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;18定位更加高级的布局手段可以摆放到页面的任何位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#18定位更加高级的布局手段可以摆放到页面的任何位置&#34;&gt;#&lt;/a&gt; 18. 定位：更加高级的布局手段，可以摆放到页面的任何位置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;position属性设置&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;  默认值，元素是静止的，未开启定位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relative&lt;/code&gt; ：开启元素的相对定位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;absolute&lt;/code&gt; ：开启元素的绝对定位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixed&lt;/code&gt; ：开启元素的固定定位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sticky&lt;/code&gt; ：开启元素的粘滞定位&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;静态定位 &lt;code&gt;position:static&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取消原有定位，对定位进行覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设置不设置有什么区别&lt;/strong&gt;？？？&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相对定位 &lt;code&gt;position:relative&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启相对定位后，不设置偏移量不会发生任何变化&lt;/li&gt;
&lt;li&gt;相对定位是参照于元素在文档流中的位置进行定位的&lt;/li&gt;
&lt;li&gt;相对定位会提升元素的层级&lt;/li&gt;
&lt;li&gt;相对定位元素不会脱离文档流&lt;/li&gt;
&lt;li&gt;相对定位不会改变元素的性质，块依然是块，行内依然为行内&lt;/li&gt;
&lt;li&gt;偏移量
&lt;ol&gt;
&lt;li&gt;top：定位元素和定位位置上边的距离&lt;/li&gt;
&lt;li&gt;bottom：定位元素和定位位置下边的距离&lt;/li&gt;
&lt;li&gt;left：定位元素和定位位置左侧的距离&lt;/li&gt;
&lt;li&gt;right：定位元素和定位位置右侧的距离&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位 &lt;code&gt;position:absolute&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;开启绝对定位后，不设置偏移量不会发生任何变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位元素会脱离文档流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位改变元素的性质，行内元素变成块级元素，块的宽高被内容撑开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位会提升元素的层级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;绝对定位元素是相对于其包含块进行定位的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包含块&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;正常情况下，包含块就是距离当前元素最近的祖先元素&lt;/li&gt;
&lt;li&gt;绝对定位的包含块就是距离当前元素开启了定位的祖先元素，如果所有的祖先元素都没有开启定位则根元素就是它的包含块（html：根元素、初始包含块）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;补充：水平方向的公式 和垂直方向的公式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;margin-left&lt;/code&gt; 、 &lt;code&gt;border-left&lt;/code&gt; 、 &lt;code&gt;padding-left&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;margin-right&lt;/code&gt; 、 &lt;code&gt;border-right&lt;/code&gt; 、 &lt;code&gt;padding-right&lt;/code&gt;  之和等于包含块内容区的宽度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开启决定定位之后公式左边需要添加 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt;  等于包含块内容区的宽度（可设置 auto 的属性 &lt;code&gt;margin&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt;  的默认值是 &lt;code&gt;auto&lt;/code&gt; ，等式不满足的时候自动调整这两个值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;垂直方向和水平方向相同&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;//水平居中&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;right&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;margin-left&lt;/span&gt;: auto;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;margin-right&lt;/span&gt;: auto;&lt;br&gt;&lt;br&gt;//垂直居中&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;top&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;bottom&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;margin-top&lt;/span&gt;: auto;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;margin-bottom&lt;/span&gt;: auto;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. 父元素存在相对定位 &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.box1&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;300px&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;height&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;300px&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: aqua;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;position&lt;/span&gt;: relative;//父元素中要开启相对定位&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.box2&lt;/span&gt;&amp;#123;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;width&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;60px&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;height&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;60px&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;background-color&lt;/span&gt;: red;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;position&lt;/span&gt;: absolute;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;left&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;right&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;top&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;bottom&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;margin&lt;/span&gt;: auto;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;固定定位 &lt;code&gt;position:fixed&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特殊的绝对定位，部分特点和绝对定位一样&lt;/li&gt;
&lt;li&gt;固定定位永远参照与浏览器的视口进行定位&lt;/li&gt;
&lt;li&gt;固定定位的元素不会随着网页的滚动条滚动&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;粘滞定位 &lt;code&gt;position:sticky&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;兼容性不太好，部分特点和相对定位一样&lt;/li&gt;
&lt;li&gt;粘滞定位可以在元素到达某个位置时将其固定&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;19元素的层级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#19元素的层级&#34;&gt;#&lt;/a&gt; 19. 元素的层级&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;定位层级都是相同的，不分绝对定位还是相对定位&lt;/li&gt;
&lt;li&gt;设置透明 &lt;code&gt;background-color: rgba(255, 0, 0, .3);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启定位的元素可以利用 &lt;code&gt;z-index:1;&lt;/code&gt;  给元素设置层级（里面是一个整数，值越大元素就越优先显示）&lt;/li&gt;
&lt;li&gt;如果元素的优先级相同，那么就优先显示靠下的元素；祖先元素的层级再高也不会覆盖后代元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;20轮播图练习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20轮播图练习&#34;&gt;#&lt;/a&gt; 20. 轮播图练习&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;a class=&lt;span class=&#34;token string&#34;&gt;&#34;active&#34;&lt;/span&gt; href=&lt;span class=&#34;token string&#34;&gt;&#34;#&#34;&lt;/span&gt;&gt;&amp;lt;/a&gt;//active默认激活&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;background-clip&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; border-box&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//将背景颜色设置到内容区，边框和内边距不在有背景颜色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token property&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 1px solid transparent&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;//边框为透明色&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;br&gt;### &lt;span class=&#34;hljs-number&#34;&gt;21&lt;/span&gt;.字体族&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. ```css&lt;br&gt;   问题：&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. 加载速度&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;. 版权&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;. 字体格式&lt;br&gt;   &lt;span class=&#34;hljs-keyword&#34;&gt;@font-face&lt;/span&gt;&amp;#123;&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;/* 指定字体的名字 */&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-attribute&#34;&gt;font-family&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;Courier New&amp;#x27;&lt;/span&gt;, Courier, monospace;&lt;br&gt;   &lt;span class=&#34;hljs-comment&#34;&gt;/* 服务器中字体的路径 */&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-attribute&#34;&gt;src&lt;/span&gt;:&lt;span class=&#34;hljs-built_in&#34;&gt;url&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;字体路径&amp;quot;&lt;/span&gt;);&lt;br&gt;   &amp;#125;&lt;br&gt;   字体相关的样式&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;color&lt;/span&gt;		设置字体颜色&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;font-size&lt;/span&gt;		设置字体大小&lt;br&gt;   		单位：&lt;br&gt;   				&lt;span class=&#34;hljs-selector-tag&#34;&gt;em&lt;/span&gt;：相当于当前元素的一个&lt;span class=&#34;hljs-attribute&#34;&gt;font-size&lt;/span&gt;&lt;br&gt;   				rem：相当于根元素的一个&lt;span class=&#34;hljs-attribute&#34;&gt;font-size&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;font-family&lt;/span&gt;		字体族（字体的格式）&lt;br&gt;   		可选值：&lt;br&gt;   					serif		衬线字体&lt;br&gt;   					sans-serif		非衬线字体&lt;br&gt;   					monospace		等宽字体&lt;br&gt;   指定字体的类型，浏览器会自动使用该类型下的字体&lt;br&gt;   &lt;span class=&#34;hljs-attribute&#34;&gt;font-family&lt;/span&gt;  可以指定多个字体，多个字体间使用，隔开。若第一个无效时依次尝试去&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22图标字体将图标直接设置为字体class类-实体-伪元素三种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#22图标字体将图标直接设置为字体class类-实体-伪元素三种方式&#34;&gt;#&lt;/a&gt; 22. 图标字体：将图标直接设置为字体（ &lt;code&gt;class类&lt;/code&gt; 、实体、伪元素三种方式）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过伪元素来设置图标字体&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;找到要设置图标的元素通过 &lt;code&gt;before&lt;/code&gt;  和 &lt;code&gt;after&lt;/code&gt;  选中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在属性 &lt;code&gt;content&lt;/code&gt;  中设置字体编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置字体样式&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::before&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\f1b0&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;font-family&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;字体样式&amp;#x27;&lt;/span&gt;;//fab、fas等&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;font-weight&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;900px&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;或&lt;br&gt;&amp;lt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;span&lt;/span&gt; class=&amp;quot;fas&amp;quot;&amp;gt;&amp;amp;&lt;span class=&#34;hljs-selector-id&#34;&gt;#x&lt;/span&gt;图标的编码&amp;lt;/&lt;span class=&#34;hljs-selector-tag&#34;&gt;span&lt;/span&gt;&amp;gt;//另一种方式&lt;br&gt;&lt;br&gt;阿里图标字体库的使用方式&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. 直接使用类 class = iconfont&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;. 使用伪元素的方式 &lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;::before&lt;/span&gt;&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\f1b0&amp;#x27;&lt;/span&gt;;&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;font-family&lt;/span&gt;:&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;字体样式&amp;#x27;&lt;/span&gt;;//fab、fas等&lt;br&gt;  &lt;span class=&#34;hljs-attribute&#34;&gt;font-weight&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;900px&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23文本样式的相关设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#23文本样式的相关设置&#34;&gt;#&lt;/a&gt; 23. 文本样式的相关设置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;行高的设置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;可以将行高和高度设置相同的值，使单行文字在一个元素中垂直居中&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;height&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;100px&lt;/span&gt;&lt;br&gt;line-height:&lt;span class=&#34;hljs-number&#34;&gt;100px&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行高是指文字占有的实际高度，可以通过 line-height 来设置行高，行高可以指定一个大小 (em、px), 也可以设置一个整数，表示为字体的整数倍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行高设置文字的行间距，行间距 = 行高 - 字体大小&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字体框：字体存在的格子，可以通过 font-size 设置字体框的高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;行高会在字体框的上下平均分配&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字体的简写属性&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;font&lt;/span&gt;:字体大小/行高(可省略) 字体族&lt;br&gt;font-weight:字重(字体的加粗)&lt;br&gt;	可选值&lt;br&gt;			normal	默认值，不加粗&lt;br&gt;			bold	加粗&lt;br&gt;			&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;~&lt;span class=&#34;hljs-number&#34;&gt;900&lt;/span&gt;级别&lt;br&gt;font-style:字体的风格&lt;br&gt;			normal	正常&lt;br&gt;			italic	斜体&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本的水平和垂直对齐&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;text-align&lt;/span&gt;  文本的水平对齐&lt;br&gt;	可选值&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;left&lt;/span&gt;		左侧对齐&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;right&lt;/span&gt;		右侧对齐&lt;br&gt;		center	居中对齐	&lt;br&gt;		justify	两端对齐&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;vertical-align&lt;/span&gt;	设置元素垂直对齐的方式&lt;br&gt;	可选值&lt;br&gt;		baseline	默认值，基线对齐&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;top&lt;/span&gt;				顶部对齐&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;bottom&lt;/span&gt;		底部对齐&lt;br&gt;		middle		居中对齐&lt;br&gt;附加:若是图片和父元素存在缝隙，可以使用vertical-align:bottom;解决&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文本样式的设置&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;text-decoration&lt;/span&gt;  设置文本修饰&lt;br&gt;	可选值&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;none&lt;/span&gt;	无下划线&lt;br&gt;		underline		下划线&lt;br&gt;		line-through	删除线&lt;br&gt;		overline			上划线&lt;br&gt;		例:text-decoration:underline red dotted;&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;. &lt;span class=&#34;hljs-attribute&#34;&gt;white-space&lt;/span&gt;	设置网页如何处理空白&lt;br&gt;	可选值&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;normal&lt;/span&gt;	正常&lt;br&gt;		nowrap	不换行&lt;br&gt;		pre 		保留空白&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;. 显示省略号的效果&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;white-space&lt;/span&gt;: nowrap;//文本不换行&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;overflow&lt;/span&gt;: hidden;//多余的文本进行隐藏&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;text-overflow&lt;/span&gt;: ellipsis;//使用省略号进行替换&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;24京东顶部导航条总结学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#24京东顶部导航条总结学习&#34;&gt;#&lt;/a&gt; 24. 京东顶部导航条总结学习&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;box-shadow&lt;/code&gt;  属性详解&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;值&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;h-shadow&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必需。水平阴影的位置。允许负值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;v-shadow&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必需。垂直阴影的位置。允许负值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;blur&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。模糊距离。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;spread&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。阴影的尺寸。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;color&lt;/em&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。阴影的颜色。请参阅 CSS 颜色值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;inset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选。将外部阴影 (outset) 改为内部阴影。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;25背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#25背景&#34;&gt;#&lt;/a&gt; 25. 背景&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-color:&lt;/code&gt;  设置背景颜色&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-image:&lt;/code&gt;  设置背景图片&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以同时设置颜色和图片，背景颜色将会成为图片的背景颜色&lt;/li&gt;
&lt;li&gt;背景的图片小于元素：背景图片将会自动在元素中平铺，X 轴和 Y 轴方向平铺&lt;/li&gt;
&lt;li&gt;背景的图片大于元素：背景图片将会无法完全显示&lt;/li&gt;
&lt;li&gt;背景的图片等于元素：直接正常显示&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-repeat:&lt;/code&gt;  设置背景重复的方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;默认值repeat&lt;/code&gt; : 背景将会沿着 x 轴和 y 轴方向重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat-x&lt;/code&gt; : 沿着 x 轴方向重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;repeat-y&lt;/code&gt; : 沿着 y 轴方向重复&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-repeat&lt;/code&gt; : 背景图片不重复&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-position:&lt;/code&gt;  设置背景图片的位置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;top&lt;/code&gt; 、 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、 &lt;code&gt;bottom&lt;/code&gt; 、 &lt;code&gt;center&lt;/code&gt;  同时指定两个值，若只指定一个值，则第二值会和第一个值相同&lt;/li&gt;
&lt;li&gt;通过偏移量来指定背景图片的位置： &lt;code&gt;水平方向的偏移量&lt;/code&gt; 、 &lt;code&gt;垂直方向的偏移量&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-clip&lt;/code&gt; : 设置背景范围&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;border-box&lt;/code&gt; : 默认值，背景会出现在边框的下边&lt;/li&gt;
&lt;li&gt;&lt;code&gt;padding-box&lt;/code&gt; : 背景不会出现在边框下边，只出现在内容区和内边距&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content-box&lt;/code&gt; : 背景只会出现在内容区&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-origin&lt;/code&gt; : 背景图片的偏移量计算原点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;padding-box&lt;/code&gt; : 默认值， &lt;code&gt;background-position&lt;/code&gt;  从内边距出开始计算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-box&lt;/code&gt; : 背景图片的偏移量从边框处开始计算&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content-box&lt;/code&gt; : 背景图片的偏移量从内容区处开始计算&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-size&lt;/code&gt; : 设置背景图片的大小，第一个值表示宽度，第二值表示高度，若只写一个，则第二个值默认是 auto&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;contain&lt;/code&gt; : 图片比例不变，将图片在元素中完整显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cover&lt;/code&gt; : 图片比例不变，将元素铺满&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background-attachment&lt;/code&gt; : 背景图片是否跟随元素移动&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;/code&gt; : 默认值，背景图片会跟随元素移动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fixed&lt;/code&gt; : 背景图片固定在页面中，不会随元素移动&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;background&lt;/code&gt; : 属性简写，无顺序要求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;background-size 必须写在 background-position 的后面，并且时候 &lt;code&gt;/&lt;/code&gt;  隔开&lt;/li&gt;
&lt;li&gt;background-origin 要写在 background-clip 的前面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图片属于网页中的外部资源，外部资源都需要浏览器单独发送请求加载，浏览器家在外部资源是按需加载的，用则加载，不用则不加载。解决多个图片因请求时长而出现的闪烁问题，可以将多个小图片同意保存到一个大图片中，然后通过调整 &lt;code&gt;background-position&lt;/code&gt;  来显示特定的图片称为 &lt;code&gt;CSS-Sprite&lt;/code&gt; , 这种图称为雪碧图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;雪碧图特点：一张图片里有包含多个图片，一次性将多个图片加载进页面，降低请求的次数，加快访问速度，提升用户的体验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;渐变：&lt;strong&gt;渐变是图片，需要通过 background-image 来设置&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;线性渐变&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;.线性渐变，需要沿着一条直线发生变化：linear-gradient()&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;background-image&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;linear-gradient&lt;/span&gt;(red,yellow)&lt;br&gt;指定渐变的方向：to left,to right,to bottom,to top,deg度数，turn圈&lt;br&gt;可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况&lt;br&gt;&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;.线性渐变，可以平铺的线性渐变：&lt;span class=&#34;hljs-built_in&#34;&gt;repeating-linear-gradient&lt;/span&gt;()&lt;br&gt;background-image: &lt;span class=&#34;hljs-built_in&#34;&gt;repeating-linear-gradient&lt;/span&gt;(red,yellow &lt;span class=&#34;hljs-number&#34;&gt;25px&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;径向渐变&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;.径向渐变(放射性效果)radial-gradient()&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;background-image&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;radial-gradient&lt;/span&gt;(red,yellow &lt;span class=&#34;hljs-number&#34;&gt;50px&lt;/span&gt;)&lt;br&gt;默认情况下径向渐变的形状根据元素的形状来计算的，正方形--圆形，长方形--椭圆形，也可以手动设置径向渐变的大小：circle、ellipse；渐变位置&lt;span class=&#34;hljs-built_in&#34;&gt;radial-gradient&lt;/span&gt;(大小 at 位置，颜色 位置，颜色 位置)&lt;br&gt;大小:circle 圆形、ellipse 椭圆形、farthest-side 远边、farthest-corner 远角、closest-side 近边、closest-corner 近角&lt;br&gt;位置:top、right、left、center、bottom&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="HTML基础" />
        <updated>2018-10-28T03:02:36.000Z</updated>
    </entry>
</feed>
